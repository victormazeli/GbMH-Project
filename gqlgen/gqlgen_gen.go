// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/steebchen/keskin-api/prisma"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Administrator() AdministratorResolver
	Appointment() AppointmentResolver
	AppointmentReview() AppointmentReviewResolver
	Branch() BranchResolver
	Company() CompanyResolver
	Customer() CustomerResolver
	EmailTemplate() EmailTemplateResolver
	Employee() EmployeeResolver
	Favorite() FavoriteResolver
	Manager() ManagerResolver
	Mutation() MutationResolver
	News() NewsResolver
	Product() ProductResolver
	ProductCategory() ProductCategoryResolver
	ProductReview() ProductReviewResolver
	ProductServiceAttribute() ProductServiceAttributeResolver
	ProductSubCategory() ProductSubCategoryResolver
	Query() QueryResolver
	Service() ServiceResolver
	ServiceCategory() ServiceCategoryResolver
	ServiceReview() ServiceReviewResolver
	ServiceSubCategory() ServiceSubCategoryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActivateAccountPayload struct {
		Status func(childComplexity int) int
	}

	Administrator struct {
		Activated         func(childComplexity int) int
		Birthday          func(childComplexity int) int
		City              func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Email             func(childComplexity int) int
		FirstName         func(childComplexity int) int
		FullName          func(childComplexity int) int
		Gender            func(childComplexity int) int
		ID                func(childComplexity int) int
		Image             func(childComplexity int) int
		LastName          func(childComplexity int) int
		NotificationToken func(childComplexity int) int
		PhoneNumber       func(childComplexity int) int
		Street            func(childComplexity int) int
		Type              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		ZipCode           func(childComplexity int) int
	}

	AdministratorConnection struct {
		Nodes func(childComplexity int) int
	}

	Appointment struct {
		AfterImage      func(childComplexity int) int
		BeforeImage     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Customer        func(childComplexity int) int
		Desc            func(childComplexity int) int
		Duration        func(childComplexity int) int
		Employee        func(childComplexity int) int
		End             func(childComplexity int) int
		ID              func(childComplexity int) int
		Note            func(childComplexity int) int
		Price           func(childComplexity int) int
		Products        func(childComplexity int) int
		Review          func(childComplexity int) int
		Services        func(childComplexity int) int
		Start           func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		ViewerCanReview func(childComplexity int) int
		ViewerReview    func(childComplexity int) int
	}

	AppointmentConnection struct {
		Nodes func(childComplexity int) int
	}

	AppointmentProduct struct {
		Count func(childComplexity int) int
		Item  func(childComplexity int) int
	}

	AppointmentReview struct {
		Appointment func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Customer    func(childComplexity int) int
		ID          func(childComplexity int) int
		Stars       func(childComplexity int) int
		Status      func(childComplexity int) int
		Text        func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	AppointmentReviewConnection struct {
		Nodes func(childComplexity int) int
	}

	ApproveReviewPayload struct {
		Review func(childComplexity int) int
	}

	Branch struct {
		Address                   func(childComplexity int) int
		AppTheme                  func(childComplexity int) int
		Company                   func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		FacebookLink              func(childComplexity int) int
		FromEmail                 func(childComplexity int) int
		ID                        func(childComplexity int) int
		Images                    func(childComplexity int) int
		Imprint                   func(childComplexity int) int
		InstagramLink             func(childComplexity int) int
		Logo                      func(childComplexity int) int
		MailchimpAPIKey           func(childComplexity int) int
		MailchimpCredentialsValid func(childComplexity int) int
		MailchimpListId           func(childComplexity int) int
		Name                      func(childComplexity int) int
		NavigationLink            func(childComplexity int) int
		News                      func(childComplexity int) int
		OpeningHours              func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		ReviewAggregations        func(childComplexity int) int
		Reviews                   func(childComplexity int) int
		SMTPSendHost              func(childComplexity int) int
		SMTPSendPort              func(childComplexity int) int
		SMTPUsername              func(childComplexity int) int
		SharingRedirectUrl        func(childComplexity int) int
		Slots                     func(childComplexity int) int
		SmtpPassword              func(childComplexity int) int
		TiktokLink                func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		WebsiteUrl                func(childComplexity int) int
		WelcomeMessage            func(childComplexity int) int
	}

	BranchConnection struct {
		Nodes func(childComplexity int) int
	}

	BranchImageSlot struct {
		Branch     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		ImageURL   func(childComplexity int) int
		SlotNumber func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	CancelAppointmentPayload struct {
		Appointment func(childComplexity int) int
	}

	Company struct {
		Aliases            func(childComplexity int) int
		AppTheme           func(childComplexity int) int
		Branches           func(childComplexity int, pagination *PaginationInput) int
		CreatedAt          func(childComplexity int) int
		CustomUrls         func(childComplexity int) int
		ID                 func(childComplexity int) int
		Logo               func(childComplexity int) int
		Name               func(childComplexity int) int
		PwaBackgroundColor func(childComplexity int) int
		PwaIcon            func(childComplexity int) int
		PwaShortName       func(childComplexity int) int
		PwaThemeColor      func(childComplexity int) int
		SharingRedirectUrl func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	CompanyConnection struct {
		Nodes func(childComplexity int) int
	}

	CreateAdministratorPayload struct {
		Administrator func(childComplexity int) int
	}

	CreateBranchPayload struct {
		Branch func(childComplexity int) int
	}

	CreateCompanyPayload struct {
		Company func(childComplexity int) int
	}

	CreateCustomerPayload struct {
		Customer func(childComplexity int) int
	}

	CreateEmployeePayload struct {
		Employee func(childComplexity int) int
	}

	CreateFavoritePayload struct {
		Favorite func(childComplexity int) int
	}

	CreateManagerPayload struct {
		Manager func(childComplexity int) int
	}

	CreateNewsPayload struct {
		News func(childComplexity int) int
	}

	CreateProductCategoryPayload struct {
		Category func(childComplexity int) int
	}

	CreateProductPayload struct {
		Product func(childComplexity int) int
	}

	CreateProductSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	CreateServiceCategoryPayload struct {
		Category func(childComplexity int) int
	}

	CreateServicePayload struct {
		Service func(childComplexity int) int
	}

	CreateServiceSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	Customer struct {
		Activated          func(childComplexity int) int
		AllowReviewSharing func(childComplexity int) int
		Appointments       func(childComplexity int, input *AppointmentInput) int
		Birthday           func(childComplexity int) int
		City               func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		FullName           func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		LastName           func(childComplexity int) int
		Note               func(childComplexity int) int
		NotificationToken  func(childComplexity int) int
		PhoneNumber        func(childComplexity int) int
		Reviews            func(childComplexity int) int
		Street             func(childComplexity int) int
		Type               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		ZipCode            func(childComplexity int) int
	}

	CustomerConnection struct {
		Nodes func(childComplexity int) int
	}

	CustomerRequestAppointmentPayload struct {
		Message func(childComplexity int) int
	}

	CustomerReviewConnection struct {
		Nodes func(childComplexity int) int
	}

	DeleteAdministratorPayload struct {
		Administrator func(childComplexity int) int
	}

	DeleteBranchPayload struct {
		Branch func(childComplexity int) int
	}

	DeleteCompanyPayload struct {
		Company func(childComplexity int) int
	}

	DeleteCustomerPayload struct {
		Customer func(childComplexity int) int
	}

	DeleteEmployeePayload struct {
		Employee func(childComplexity int) int
	}

	DeleteFavoritePayload struct {
		Favorite func(childComplexity int) int
	}

	DeleteManagerPayload struct {
		Manager func(childComplexity int) int
	}

	DeleteNewsPayload struct {
		News func(childComplexity int) int
	}

	DeleteProductCategoryPayload struct {
		Category func(childComplexity int) int
	}

	DeleteProductPayload struct {
		Product func(childComplexity int) int
	}

	DeleteProductSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	DeleteReviewPayload struct {
		Review func(childComplexity int) int
	}

	DeleteServiceCategoryPayload struct {
		Category func(childComplexity int) int
	}

	DeleteServicePayload struct {
		Service func(childComplexity int) int
	}

	DeleteServiceSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	EditEmployeeAvailabilityPayload struct {
		Employee func(childComplexity int) int
	}

	EmailTemplate struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	EmailTemplateQueryPayload struct {
		Template func(childComplexity int) int
	}

	EmailTemplatesQueryPayload struct {
		Templates func(childComplexity int) int
	}

	Employee struct {
		Activated         func(childComplexity int) int
		Appointments      func(childComplexity int, input *AppointmentInput) int
		Birthday          func(childComplexity int) int
		City              func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Email             func(childComplexity int) int
		FirstName         func(childComplexity int) int
		FullName          func(childComplexity int) int
		Gender            func(childComplexity int) int
		ID                func(childComplexity int) int
		Image             func(childComplexity int) int
		LastName          func(childComplexity int) int
		NotificationToken func(childComplexity int) int
		PhoneNumber       func(childComplexity int) int
		Street            func(childComplexity int) int
		Type              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		WorkingHours      func(childComplexity int) int
		ZipCode           func(childComplexity int) int
	}

	EmployeeConnection struct {
		Nodes func(childComplexity int) int
	}

	Favorite struct {
		ID      func(childComplexity int) int
		Product func(childComplexity int) int
		Service func(childComplexity int) int
		User    func(childComplexity int) int
	}

	FavoritesPayload struct {
		Products func(childComplexity int) int
		Services func(childComplexity int) int
	}

	FormattedOpeningHour struct {
		Break    func(childComplexity int) int
		Closed   func(childComplexity int) int
		FullDay  func(childComplexity int) int
		Key      func(childComplexity int) int
		ShortDay func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	FormattedWorkingHours struct {
		Break      func(childComplexity int) int
		FullDay    func(childComplexity int) int
		Key        func(childComplexity int) int
		NotWorking func(childComplexity int) int
		ShortDay   func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	Image struct {
		ID  func(childComplexity int) int
		URL func(childComplexity int) int
	}

	IsValidPasswordTokenPayload struct {
		Valid func(childComplexity int) int
	}

	LoginPayload struct {
		Session func(childComplexity int) int
		User    func(childComplexity int) int
	}

	LogoutPayload struct {
		Session func(childComplexity int) int
	}

	Manager struct {
		Activated         func(childComplexity int) int
		Appointments      func(childComplexity int, input *AppointmentInput) int
		Birthday          func(childComplexity int) int
		City              func(childComplexity int) int
		Company           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Email             func(childComplexity int) int
		FirstName         func(childComplexity int) int
		FullName          func(childComplexity int) int
		Gender            func(childComplexity int) int
		ID                func(childComplexity int) int
		Image             func(childComplexity int) int
		LastName          func(childComplexity int) int
		NotificationToken func(childComplexity int) int
		PhoneNumber       func(childComplexity int) int
		Street            func(childComplexity int) int
		Type              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		WorkingHours      func(childComplexity int) int
		ZipCode           func(childComplexity int) int
	}

	ManagerConnection struct {
		Nodes func(childComplexity int) int
	}

	Mutation struct {
		ActivateAccount              func(childComplexity int, input ActivateAccountInput) int
		AddImageSlot                 func(childComplexity int, input BranchImageSlotInput) int
		ApproveReview                func(childComplexity int, id string, status prisma.ReviewStatus) int
		CancelAppointment            func(childComplexity int, input CancelAppointmentInput, language *string) int
		CreateAdministrator          func(childComplexity int, input CreateAdministratorInput) int
		CreateBranch                 func(childComplexity int, input CreateBranchInput, language *string) int
		CreateCompany                func(childComplexity int, input CreateCompanyInput, language *string) int
		CreateCustomer               func(childComplexity int, input CreateCustomerInput) int
		CreateEmployee               func(childComplexity int, input CreateEmployeeInput) int
		CreateFavorite               func(childComplexity int, input CreateFavoriteInput) int
		CreateManager                func(childComplexity int, input CreateManagerInput) int
		CreateNews                   func(childComplexity int, input CreateNewsInput, language *string) int
		CreateProduct                func(childComplexity int, input CreateProductInput, language *string) int
		CreateProductCategory        func(childComplexity int, input CreateProductCategoryInput) int
		CreateProductSubCategory     func(childComplexity int, input CreateProductSubCategoryInput) int
		CreateService                func(childComplexity int, input CreateServiceInput, language *string) int
		CreateServiceCategory        func(childComplexity int, input CreateServiceCategoryInput) int
		CreateServiceSubCategory     func(childComplexity int, input CreateServiceSubCategoryInput) int
		CustomerRequestAppointment   func(childComplexity int, input CustomerRequestAppointmentInput, language *string) int
		DeleteAdministrator          func(childComplexity int, input DeleteAdministratorInput) int
		DeleteBranch                 func(childComplexity int, input DeleteBranchInput, language *string) int
		DeleteBranchImage            func(childComplexity int, input DeleteBranchImageInput) int
		DeleteCompany                func(childComplexity int, input DeleteCompanyInput, language *string) int
		DeleteCustomer               func(childComplexity int, input DeleteCustomerInput) int
		DeleteEmployee               func(childComplexity int, input DeleteEmployeeInput) int
		DeleteFavorite               func(childComplexity int, input DeleteFavoriteInput) int
		DeleteManager                func(childComplexity int, input DeleteManagerInput) int
		DeleteNews                   func(childComplexity int, input DeleteNewsInput, language *string) int
		DeleteProduct                func(childComplexity int, input DeleteProductInput, language *string) int
		DeleteProductCategory        func(childComplexity int, input DeleteProductCategoryInput) int
		DeleteProductSubCategory     func(childComplexity int, input DeleteProductSubCategoryInput) int
		DeleteReview                 func(childComplexity int, id string) int
		DeleteService                func(childComplexity int, input DeleteServiceInput, language *string) int
		DeleteServiceCategory        func(childComplexity int, input DeleteServiceCategoryInput) int
		DeleteServiceSubCategory     func(childComplexity int, input DeleteServiceSubCategoryInput) int
		EditEmployeeAvailability     func(childComplexity int, input EditEmployeeAvailabilityInput) int
		ForceAppointmentNotification func(childComplexity int, input *ForceAppointmentNotificationInput) int
		Login                        func(childComplexity int, input LoginInput) int
		Logout                       func(childComplexity int) int
		NewEmailTemplate             func(childComplexity int) int
		NotifyAllCustomers           func(childComplexity int, input NotifyAllCustomersInput) int
		Register                     func(childComplexity int, input RegisterInput) int
		RemoveViewerProfilePicture   func(childComplexity int) int
		ReplaceExistingProduct       func(childComplexity int, input ReplaceExistingProductInput, language *string) int
		ReplaceExistingService       func(childComplexity int, input ReplaceExistingServiceInput, language *string) int
		RequestActivationLink        func(childComplexity int, input RequestActivationLinkInput) int
		RequestPasswordReset         func(childComplexity int, input RequestPasswordResetInput) int
		RescheduleAppointment        func(childComplexity int, input RescheduleAppointmentInput, language *string) int
		ResetPassword                func(childComplexity int, input ResetPasswordInput) int
		SendInviteEmail              func(childComplexity int, input SendInviteEmailInput, language *string) int
		SendUserNotification         func(childComplexity int, input *SendUserNotificationInput) int
		SetProductActive             func(childComplexity int, input SetProductActiveInput) int
		SetServiceActive             func(childComplexity int, input SetServiceActiveInput) int
		StaffApproveAppointment      func(childComplexity int, input StaffApproveAppointmentInput, language *string) int
		StaffCreateAppointment       func(childComplexity int, input StaffCreateAppointmentInput, language *string) int
		StaffUpdateAppointment       func(childComplexity int, input StaffUpdateAppointmentInput, language *string) int
		SubscribeNewsletter          func(childComplexity int, email string, branchID string) int
		TriggerTestNotification      func(childComplexity int) int
		UpdateAdministrator          func(childComplexity int, input UpdateAdministratorInput) int
		UpdateAfterImage             func(childComplexity int, input UpdateAppointmentImageInput, language *string) int
		UpdateBeforeImage            func(childComplexity int, input UpdateAppointmentImageInput, language *string) int
		UpdateBranch                 func(childComplexity int, input UpdateBranchInput, language *string) int
		UpdateCompany                func(childComplexity int, input UpdateCompanyInput, language *string) int
		UpdateCustomer               func(childComplexity int, input UpdateCustomerInput) int
		UpdateEmailTemplate          func(childComplexity int, input UpdateEmailTemplateInput, language *string) int
		UpdateEmployee               func(childComplexity int, input UpdateEmployeeInput) int
		UpdateManager                func(childComplexity int, input UpdateManagerInput) int
		UpdateNews                   func(childComplexity int, input UpdateNewsInput, language *string) int
		UpdateNotificationToken      func(childComplexity int, input UpdateNotificationTokenInput) int
		UpdateProduct                func(childComplexity int, input UpdateProductInput, language *string) int
		UpdateProductCategory        func(childComplexity int, input UpdateProductCategoryInput) int
		UpdateProductSubCategory     func(childComplexity int, input UpdateProductSubCategoryInput) int
		UpdateService                func(childComplexity int, input UpdateServiceInput, language *string) int
		UpdateServiceCategory        func(childComplexity int, input UpdateServiceCategoryInput) int
		UpdateServiceSubCategory     func(childComplexity int, input UpdateServiceSubCategoryInput) int
		UpdateViewer                 func(childComplexity int, input UpdateViewerInput) int
		UploadViewerProfilePicture   func(childComplexity int, upload graphql.Upload) int
		UpsertBranchOpeningHour      func(childComplexity int, input UpsertBranchOpeningHourInput) int
		UpsertReview                 func(childComplexity int, input UpsertReviewInput) int
	}

	News struct {
		Branch    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Image     func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	NewsConnection struct {
		Nodes func(childComplexity int) int
	}

	NotificationPayload struct {
		Result func(childComplexity int) int
		UserID func(childComplexity int) int
	}

	NotificationsPayload struct {
		Payloads func(childComplexity int) int
	}

	OpeningHours struct {
		Formatted func(childComplexity int) int
		Raw       func(childComplexity int) int
	}

	OrderHistoryPayload struct {
		Products func(childComplexity int) int
		Services func(childComplexity int) int
	}

	PageInfo struct {
		HasNextPage func(childComplexity int) int
	}

	PhoneNumber struct {
		Href func(childComplexity int) int
		Raw  func(childComplexity int) int
	}

	Price struct {
		DisplayValue func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	Product struct {
		Active             func(childComplexity int) int
		Attributes         func(childComplexity int) int
		Capacity           func(childComplexity int) int
		Category           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Desc               func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		Name               func(childComplexity int) int
		Price              func(childComplexity int) int
		ReviewAggregations func(childComplexity int) int
		Reviews            func(childComplexity int) int
		SubCategory        func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		ViewerCanReview    func(childComplexity int) int
		ViewerReview       func(childComplexity int) int
	}

	ProductCategory struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Products      func(childComplexity int) int
		SubCategories func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ProductConnection struct {
		Nodes func(childComplexity int) int
	}

	ProductReview struct {
		CreatedAt func(childComplexity int) int
		Customer  func(childComplexity int) int
		ID        func(childComplexity int) int
		Product   func(childComplexity int) int
		Stars     func(childComplexity int) int
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ProductReviewConnection struct {
		Nodes func(childComplexity int) int
	}

	ProductServiceAttribute struct {
		Key   func(childComplexity int) int
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ProductSubCategory struct {
		Category  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Products  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	PublicStaffMemberConnection struct {
		Nodes func(childComplexity int) int
	}

	Query struct {
		Appointment          func(childComplexity int, id string, language *string) int
		AppointmentTimeslots func(childComplexity int, input TimeslotInput) int
		Branch               func(childComplexity int, id string, language *string) int
		Branches             func(childComplexity int, input BranchesInput, language *string) int
		Companies            func(childComplexity int, language *string) int
		Company              func(childComplexity int, id string, language *string) int
		CurrentCompany       func(childComplexity int) int
		Customer             func(childComplexity int, id string, language *string) int
		Customers            func(childComplexity int, input CustomerInput, language *string) int
		EmailTemplate        func(childComplexity int, input EmailTemplateInput, language *string) int
		EmailTemplates       func(childComplexity int, language *string) int
		Employee             func(childComplexity int, id string, language *string) int
		Employees            func(childComplexity int, input EmployeeInput, language *string) int
		Favorites            func(childComplexity int, language *string) int
		IsValidPasswordToken func(childComplexity int, token string) int
		OrderHistory         func(childComplexity int, language *string) int
		Product              func(childComplexity int, id string, language *string) int
		ProductCategories    func(childComplexity int) int
		ProductCategory      func(childComplexity int, id string) int
		ProductSubCategories func(childComplexity int) int
		ProductSubCategory   func(childComplexity int, id string) int
		Products             func(childComplexity int, input ProductInput, language *string) int
		PublicStaffMembers   func(childComplexity int, input StaffMemberInput) int
		RelatedCompanies     func(childComplexity int, email string, password string, language *string) int
		Reviews              func(childComplexity int, input ReviewInput, language *string) int
		Service              func(childComplexity int, id string, language *string) int
		ServiceCategories    func(childComplexity int) int
		ServiceCategory      func(childComplexity int, id string) int
		ServiceSubCategories func(childComplexity int) int
		ServiceSubCategory   func(childComplexity int, id string) int
		Services             func(childComplexity int, input ServiceInput, language *string) int
		StaffMember          func(childComplexity int, id *string) int
		StaffMembers         func(childComplexity int, input StaffMemberInput) int
		Viewer               func(childComplexity int) int
	}

	RawOpeningHour struct {
		Afternoon func(childComplexity int) int
		Break     func(childComplexity int) int
		Closed    func(childComplexity int) int
		Day       func(childComplexity int) int
		Forenoon  func(childComplexity int) int
		FullDay   func(childComplexity int) int
		ShortDay  func(childComplexity int) int
	}

	RawWorkingHours struct {
		Afternoon  func(childComplexity int) int
		Break      func(childComplexity int) int
		Day        func(childComplexity int) int
		Forenoon   func(childComplexity int) int
		FullDay    func(childComplexity int) int
		NotWorking func(childComplexity int) int
		ShortDay   func(childComplexity int) int
	}

	RegisterPayload struct {
		Status func(childComplexity int) int
	}

	RelatedCompanies struct {
		Companies func(childComplexity int) int
		IsAdmin   func(childComplexity int) int
	}

	RemoveViewerProfilePicturePayload struct {
		Image func(childComplexity int) int
		User  func(childComplexity int) int
	}

	ReplaceExistingProductsPayload struct {
		ProductSubCategory func(childComplexity int) int
	}

	ReplaceExistingServicePayload struct {
		ServiceSubCategory func(childComplexity int) int
	}

	RequestActivationLinkPayload struct {
		Status func(childComplexity int) int
	}

	RequestPasswordResetPayload struct {
		Status func(childComplexity int) int
	}

	RescheduleAppointmentPayload struct {
		Appointment func(childComplexity int) int
	}

	ResetPasswordPayload struct {
		Status func(childComplexity int) int
	}

	ReviewAggregations struct {
		AverageRating func(childComplexity int) int
		CountPerStar  func(childComplexity int) int
		TotalCount    func(childComplexity int) int
	}

	ReviewConnection struct {
		Nodes func(childComplexity int) int
	}

	SendEmailPayload struct {
		Status func(childComplexity int) int
	}

	Service struct {
		Active             func(childComplexity int) int
		Attributes         func(childComplexity int) int
		Category           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Desc               func(childComplexity int) int
		Duration           func(childComplexity int) int
		GenderTarget       func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		Name               func(childComplexity int) int
		Price              func(childComplexity int) int
		ReviewAggregations func(childComplexity int) int
		Reviews            func(childComplexity int) int
		SubCategory        func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		ViewerCanReview    func(childComplexity int) int
		ViewerReview       func(childComplexity int) int
	}

	ServiceCategory struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Services      func(childComplexity int) int
		SubCategories func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ServiceConnection struct {
		Nodes func(childComplexity int) int
	}

	ServiceReview struct {
		CreatedAt func(childComplexity int) int
		Customer  func(childComplexity int) int
		ID        func(childComplexity int) int
		Service   func(childComplexity int) int
		Stars     func(childComplexity int) int
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ServiceReviewConnection struct {
		Nodes func(childComplexity int) int
	}

	ServiceSubCategory struct {
		Category  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Services  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Session struct {
		ID    func(childComplexity int) int
		Token func(childComplexity int) int
	}

	SetProductActivePayload struct {
		Product func(childComplexity int) int
	}

	SetServiceActivePayload struct {
		Service func(childComplexity int) int
	}

	StaffApproveAppointmentPayload struct {
		Appointment func(childComplexity int) int
	}

	StaffCreateAppointmentPayload struct {
		Appointment func(childComplexity int) int
	}

	StaffMemberConnection struct {
		Nodes func(childComplexity int) int
	}

	StaffUpdateAppointmentPayload struct {
		Appointment func(childComplexity int) int
	}

	SubscribeNewsletterPayload struct {
		ID            func(childComplexity int) int
		UniqueEmailID func(childComplexity int) int
	}

	Timerange struct {
		End   func(childComplexity int) int
		Start func(childComplexity int) int
	}

	TimeslotRange struct {
		End   func(childComplexity int) int
		Start func(childComplexity int) int
	}

	Timeslots struct {
		Duration func(childComplexity int) int
		Price    func(childComplexity int) int
		Ranges   func(childComplexity int) int
	}

	UpdateAdministratorPayload struct {
		Administrator func(childComplexity int) int
	}

	UpdateAppointmentImagePayload struct {
		Appointment func(childComplexity int) int
	}

	UpdateBranchPayload struct {
		Branch func(childComplexity int) int
	}

	UpdateCompanyPayload struct {
		Company func(childComplexity int) int
	}

	UpdateCustomerPayload struct {
		Customer func(childComplexity int) int
	}

	UpdateEmailTemplatePayload struct {
		Template func(childComplexity int) int
	}

	UpdateEmployeePayload struct {
		Employee func(childComplexity int) int
	}

	UpdateManagerPayload struct {
		Manager func(childComplexity int) int
	}

	UpdateNewsPayload struct {
		News func(childComplexity int) int
	}

	UpdateProductCategoryPayload struct {
		Category func(childComplexity int) int
	}

	UpdateProductPayload struct {
		Product func(childComplexity int) int
	}

	UpdateProductSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	UpdateServiceCategoryPayload struct {
		Category func(childComplexity int) int
	}

	UpdateServicePayload struct {
		Service func(childComplexity int) int
	}

	UpdateServiceSubCategoryPayload struct {
		SubCategory func(childComplexity int) int
	}

	UpdateViewerPayload struct {
		User func(childComplexity int) int
	}

	UploadViewerProfilePicturePayload struct {
		Image func(childComplexity int) int
		User  func(childComplexity int) int
	}

	UpsertBranchOpeningHourPayload struct {
		Branch func(childComplexity int) int
	}

	UpsertReviewPayload struct {
		Review func(childComplexity int) int
	}

	WorkingHours struct {
		Formatted func(childComplexity int) int
		Raw       func(childComplexity int) int
	}
}

type AdministratorResolver interface {
	ID(ctx context.Context, obj *prisma.Administrator) (string, error)

	Email(ctx context.Context, obj *prisma.Administrator) (string, error)
	FirstName(ctx context.Context, obj *prisma.Administrator) (*string, error)
	LastName(ctx context.Context, obj *prisma.Administrator) (*string, error)
	FullName(ctx context.Context, obj *prisma.Administrator) (*string, error)
	Gender(ctx context.Context, obj *prisma.Administrator) (*prisma.Gender, error)
	ZipCode(ctx context.Context, obj *prisma.Administrator) (*string, error)
	Street(ctx context.Context, obj *prisma.Administrator) (*string, error)
	City(ctx context.Context, obj *prisma.Administrator) (*string, error)
	Birthday(ctx context.Context, obj *prisma.Administrator) (*string, error)
	Image(ctx context.Context, obj *prisma.Administrator) (*Image, error)
	PhoneNumber(ctx context.Context, obj *prisma.Administrator) (*PhoneNumber, error)
	NotificationToken(ctx context.Context, obj *prisma.Administrator) (*string, error)
}
type AppointmentResolver interface {
	Desc(ctx context.Context, obj *prisma.Appointment) (*string, error)

	Price(ctx context.Context, obj *prisma.Appointment) (*Price, error)
	Duration(ctx context.Context, obj *prisma.Appointment) (*int, error)

	Note(ctx context.Context, obj *prisma.Appointment) (*string, error)
	BeforeImage(ctx context.Context, obj *prisma.Appointment) (*Image, error)
	AfterImage(ctx context.Context, obj *prisma.Appointment) (*Image, error)
	Employee(ctx context.Context, obj *prisma.Appointment) (*prisma.Employee, error)
	Customer(ctx context.Context, obj *prisma.Appointment) (*prisma.Customer, error)
	Review(ctx context.Context, obj *prisma.Appointment) (*prisma.AppointmentReview, error)
	ViewerReview(ctx context.Context, obj *prisma.Appointment) (*prisma.AppointmentReview, error)
	ViewerCanReview(ctx context.Context, obj *prisma.Appointment) (*bool, error)
	Products(ctx context.Context, obj *prisma.Appointment) ([]*AppointmentProduct, error)
	Services(ctx context.Context, obj *prisma.Appointment) ([]*prisma.Service, error)
}
type AppointmentReviewResolver interface {
	Customer(ctx context.Context, obj *prisma.AppointmentReview) (*prisma.Customer, error)
	Appointment(ctx context.Context, obj *prisma.AppointmentReview) (*prisma.Appointment, error)
}
type BranchResolver interface {
	Name(ctx context.Context, obj *prisma.Branch) (*string, error)
	WelcomeMessage(ctx context.Context, obj *prisma.Branch) (*string, error)
	PhoneNumber(ctx context.Context, obj *prisma.Branch) (*PhoneNumber, error)

	Images(ctx context.Context, obj *prisma.Branch) ([]*Image, error)

	FacebookLink(ctx context.Context, obj *prisma.Branch) (*string, error)
	TiktokLink(ctx context.Context, obj *prisma.Branch) (*string, error)
	InstagramLink(ctx context.Context, obj *prisma.Branch) (*string, error)
	Company(ctx context.Context, obj *prisma.Branch) (*prisma.Company, error)
	OpeningHours(ctx context.Context, obj *prisma.Branch) (*OpeningHours, error)
	Logo(ctx context.Context, obj *prisma.Branch) (*Image, error)

	News(ctx context.Context, obj *prisma.Branch) ([]*prisma.News, error)
	Slots(ctx context.Context, obj *prisma.Branch) ([]*BranchImageSlot, error)
	SMTPSendHost(ctx context.Context, obj *prisma.Branch) (*string, error)
	SMTPSendPort(ctx context.Context, obj *prisma.Branch) (*string, error)
	SMTPUsername(ctx context.Context, obj *prisma.Branch) (*string, error)

	FromEmail(ctx context.Context, obj *prisma.Branch) (*string, error)
	Reviews(ctx context.Context, obj *prisma.Branch) (*AppointmentReviewConnection, error)
	ReviewAggregations(ctx context.Context, obj *prisma.Branch) (*ReviewAggregations, error)
	MailchimpAPIKey(ctx context.Context, obj *prisma.Branch) (*string, error)

	MailchimpCredentialsValid(ctx context.Context, obj *prisma.Branch) (*bool, error)
}
type CompanyResolver interface {
	Name(ctx context.Context, obj *prisma.Company) (*string, error)
	Aliases(ctx context.Context, obj *prisma.Company) ([]string, error)
	CustomUrls(ctx context.Context, obj *prisma.Company) ([]string, error)

	Logo(ctx context.Context, obj *prisma.Company) (*Image, error)

	PwaShortName(ctx context.Context, obj *prisma.Company) (string, error)
	PwaIcon(ctx context.Context, obj *prisma.Company) (*Image, error)

	Branches(ctx context.Context, obj *prisma.Company, pagination *PaginationInput) (*BranchConnection, error)
}
type CustomerResolver interface {
	ID(ctx context.Context, obj *prisma.Customer) (string, error)

	Email(ctx context.Context, obj *prisma.Customer) (string, error)
	FirstName(ctx context.Context, obj *prisma.Customer) (*string, error)
	LastName(ctx context.Context, obj *prisma.Customer) (*string, error)
	FullName(ctx context.Context, obj *prisma.Customer) (*string, error)
	Gender(ctx context.Context, obj *prisma.Customer) (*prisma.Gender, error)
	ZipCode(ctx context.Context, obj *prisma.Customer) (*string, error)
	Street(ctx context.Context, obj *prisma.Customer) (*string, error)
	City(ctx context.Context, obj *prisma.Customer) (*string, error)
	Birthday(ctx context.Context, obj *prisma.Customer) (*string, error)
	Image(ctx context.Context, obj *prisma.Customer) (*Image, error)
	PhoneNumber(ctx context.Context, obj *prisma.Customer) (*PhoneNumber, error)
	Note(ctx context.Context, obj *prisma.Customer) (*string, error)

	Appointments(ctx context.Context, obj *prisma.Customer, input *AppointmentInput) (*AppointmentConnection, error)
	Reviews(ctx context.Context, obj *prisma.Customer) (*CustomerReviewConnection, error)
	NotificationToken(ctx context.Context, obj *prisma.Customer) (*string, error)
}
type EmailTemplateResolver interface {
	Content(ctx context.Context, obj *prisma.EmailTemplate) (*string, error)
	Title(ctx context.Context, obj *prisma.EmailTemplate) (*string, error)
}
type EmployeeResolver interface {
	ID(ctx context.Context, obj *prisma.Employee) (string, error)

	Email(ctx context.Context, obj *prisma.Employee) (string, error)
	FirstName(ctx context.Context, obj *prisma.Employee) (*string, error)
	LastName(ctx context.Context, obj *prisma.Employee) (*string, error)
	FullName(ctx context.Context, obj *prisma.Employee) (*string, error)
	Gender(ctx context.Context, obj *prisma.Employee) (*prisma.Gender, error)
	ZipCode(ctx context.Context, obj *prisma.Employee) (*string, error)
	Street(ctx context.Context, obj *prisma.Employee) (*string, error)
	City(ctx context.Context, obj *prisma.Employee) (*string, error)
	Birthday(ctx context.Context, obj *prisma.Employee) (*string, error)
	Image(ctx context.Context, obj *prisma.Employee) (*Image, error)
	PhoneNumber(ctx context.Context, obj *prisma.Employee) (*PhoneNumber, error)
	Appointments(ctx context.Context, obj *prisma.Employee, input *AppointmentInput) (*AppointmentConnection, error)
	WorkingHours(ctx context.Context, obj *prisma.Employee) (*WorkingHours, error)
	NotificationToken(ctx context.Context, obj *prisma.Employee) (*string, error)
}
type FavoriteResolver interface {
	User(ctx context.Context, obj *prisma.Favorite) (prisma.IUser, error)
	Product(ctx context.Context, obj *prisma.Favorite) (*prisma.Product, error)
	Service(ctx context.Context, obj *prisma.Favorite) (*prisma.Service, error)
}
type ManagerResolver interface {
	ID(ctx context.Context, obj *prisma.Manager) (string, error)

	Email(ctx context.Context, obj *prisma.Manager) (string, error)
	FirstName(ctx context.Context, obj *prisma.Manager) (*string, error)
	LastName(ctx context.Context, obj *prisma.Manager) (*string, error)
	FullName(ctx context.Context, obj *prisma.Manager) (*string, error)
	Image(ctx context.Context, obj *prisma.Manager) (*Image, error)
	Gender(ctx context.Context, obj *prisma.Manager) (*prisma.Gender, error)
	PhoneNumber(ctx context.Context, obj *prisma.Manager) (*PhoneNumber, error)
	ZipCode(ctx context.Context, obj *prisma.Manager) (*string, error)
	Street(ctx context.Context, obj *prisma.Manager) (*string, error)
	City(ctx context.Context, obj *prisma.Manager) (*string, error)
	Birthday(ctx context.Context, obj *prisma.Manager) (*string, error)
	Company(ctx context.Context, obj *prisma.Manager) (*prisma.Company, error)
	Appointments(ctx context.Context, obj *prisma.Manager, input *AppointmentInput) (*AppointmentConnection, error)
	NotificationToken(ctx context.Context, obj *prisma.Manager) (*string, error)
	WorkingHours(ctx context.Context, obj *prisma.Manager) (*WorkingHours, error)
}
type MutationResolver interface {
	CancelAppointment(ctx context.Context, input CancelAppointmentInput, language *string) (*CancelAppointmentPayload, error)
	CustomerRequestAppointment(ctx context.Context, input CustomerRequestAppointmentInput, language *string) (*CustomerRequestAppointmentPayload, error)
	ForceAppointmentNotification(ctx context.Context, input *ForceAppointmentNotificationInput) (*NotificationPayload, error)
	RescheduleAppointment(ctx context.Context, input RescheduleAppointmentInput, language *string) (*RescheduleAppointmentPayload, error)
	StaffApproveAppointment(ctx context.Context, input StaffApproveAppointmentInput, language *string) (*StaffApproveAppointmentPayload, error)
	StaffCreateAppointment(ctx context.Context, input StaffCreateAppointmentInput, language *string) (*StaffCreateAppointmentPayload, error)
	StaffUpdateAppointment(ctx context.Context, input StaffUpdateAppointmentInput, language *string) (*StaffUpdateAppointmentPayload, error)
	UpdateBeforeImage(ctx context.Context, input UpdateAppointmentImageInput, language *string) (*UpdateAppointmentImagePayload, error)
	UpdateAfterImage(ctx context.Context, input UpdateAppointmentImageInput, language *string) (*UpdateAppointmentImagePayload, error)
	ActivateAccount(ctx context.Context, input ActivateAccountInput) (*ActivateAccountPayload, error)
	Login(ctx context.Context, input LoginInput) (*LoginPayload, error)
	Logout(ctx context.Context) (*LogoutPayload, error)
	Register(ctx context.Context, input RegisterInput) (*RegisterPayload, error)
	RequestActivationLink(ctx context.Context, input RequestActivationLinkInput) (*RequestActivationLinkPayload, error)
	RequestPasswordReset(ctx context.Context, input RequestPasswordResetInput) (*RequestPasswordResetPayload, error)
	ResetPassword(ctx context.Context, input ResetPasswordInput) (*ResetPasswordPayload, error)
	CreateBranch(ctx context.Context, input CreateBranchInput, language *string) (*CreateBranchPayload, error)
	DeleteBranch(ctx context.Context, input DeleteBranchInput, language *string) (*DeleteBranchPayload, error)
	DeleteBranchImage(ctx context.Context, input DeleteBranchImageInput) (*DeleteBranchPayload, error)
	UpdateBranch(ctx context.Context, input UpdateBranchInput, language *string) (*UpdateBranchPayload, error)
	AddImageSlot(ctx context.Context, input BranchImageSlotInput) (*UpdateBranchPayload, error)
	UpsertBranchOpeningHour(ctx context.Context, input UpsertBranchOpeningHourInput) (*UpsertBranchOpeningHourPayload, error)
	CreateCompany(ctx context.Context, input CreateCompanyInput, language *string) (*CreateCompanyPayload, error)
	DeleteCompany(ctx context.Context, input DeleteCompanyInput, language *string) (*DeleteCompanyPayload, error)
	UpdateCompany(ctx context.Context, input UpdateCompanyInput, language *string) (*UpdateCompanyPayload, error)
	NewEmailTemplate(ctx context.Context) (string, error)
	SendInviteEmail(ctx context.Context, input SendInviteEmailInput, language *string) (*SendEmailPayload, error)
	UpdateEmailTemplate(ctx context.Context, input UpdateEmailTemplateInput, language *string) (*UpdateEmailTemplatePayload, error)
	CreateFavorite(ctx context.Context, input CreateFavoriteInput) (*CreateFavoritePayload, error)
	DeleteFavorite(ctx context.Context, input DeleteFavoriteInput) (*DeleteFavoritePayload, error)
	SubscribeNewsletter(ctx context.Context, email string, branchID string) (*SubscribeNewsletterPayload, error)
	CreateNews(ctx context.Context, input CreateNewsInput, language *string) (*CreateNewsPayload, error)
	DeleteNews(ctx context.Context, input DeleteNewsInput, language *string) (*DeleteNewsPayload, error)
	UpdateNews(ctx context.Context, input UpdateNewsInput, language *string) (*UpdateNewsPayload, error)
	NotifyAllCustomers(ctx context.Context, input NotifyAllCustomersInput) (*NotificationsPayload, error)
	SendUserNotification(ctx context.Context, input *SendUserNotificationInput) (*NotificationsPayload, error)
	TriggerTestNotification(ctx context.Context) (*NotificationPayload, error)
	CreateProduct(ctx context.Context, input CreateProductInput, language *string) (*CreateProductPayload, error)
	DeleteProduct(ctx context.Context, input DeleteProductInput, language *string) (*DeleteProductPayload, error)
	ReplaceExistingProduct(ctx context.Context, input ReplaceExistingProductInput, language *string) (*ReplaceExistingProductsPayload, error)
	SetProductActive(ctx context.Context, input SetProductActiveInput) (*SetProductActivePayload, error)
	UpdateProduct(ctx context.Context, input UpdateProductInput, language *string) (*UpdateProductPayload, error)
	CreateProductCategory(ctx context.Context, input CreateProductCategoryInput) (*CreateProductCategoryPayload, error)
	DeleteProductCategory(ctx context.Context, input DeleteProductCategoryInput) (*DeleteProductCategoryPayload, error)
	UpdateProductCategory(ctx context.Context, input UpdateProductCategoryInput) (*UpdateProductCategoryPayload, error)
	CreateProductSubCategory(ctx context.Context, input CreateProductSubCategoryInput) (*CreateProductSubCategoryPayload, error)
	DeleteProductSubCategory(ctx context.Context, input DeleteProductSubCategoryInput) (*DeleteProductSubCategoryPayload, error)
	UpdateProductSubCategory(ctx context.Context, input UpdateProductSubCategoryInput) (*UpdateProductSubCategoryPayload, error)
	UpsertReview(ctx context.Context, input UpsertReviewInput) (*UpsertReviewPayload, error)
	ApproveReview(ctx context.Context, id string, status prisma.ReviewStatus) (*ApproveReviewPayload, error)
	DeleteReview(ctx context.Context, id string) (*DeleteReviewPayload, error)
	CreateService(ctx context.Context, input CreateServiceInput, language *string) (*CreateServicePayload, error)
	DeleteService(ctx context.Context, input DeleteServiceInput, language *string) (*DeleteServicePayload, error)
	ReplaceExistingService(ctx context.Context, input ReplaceExistingServiceInput, language *string) (*ReplaceExistingServicePayload, error)
	SetServiceActive(ctx context.Context, input SetServiceActiveInput) (*SetServiceActivePayload, error)
	UpdateService(ctx context.Context, input UpdateServiceInput, language *string) (*UpdateServicePayload, error)
	CreateServiceCategory(ctx context.Context, input CreateServiceCategoryInput) (*CreateServiceCategoryPayload, error)
	DeleteServiceCategory(ctx context.Context, input DeleteServiceCategoryInput) (*DeleteServiceCategoryPayload, error)
	UpdateServiceCategory(ctx context.Context, input UpdateServiceCategoryInput) (*UpdateServiceCategoryPayload, error)
	CreateServiceSubCategory(ctx context.Context, input CreateServiceSubCategoryInput) (*CreateServiceSubCategoryPayload, error)
	DeleteServiceSubCategory(ctx context.Context, input DeleteServiceSubCategoryInput) (*DeleteServiceSubCategoryPayload, error)
	UpdateServiceSubCategory(ctx context.Context, input UpdateServiceSubCategoryInput) (*UpdateServiceSubCategoryPayload, error)
	CreateAdministrator(ctx context.Context, input CreateAdministratorInput) (*CreateAdministratorPayload, error)
	DeleteAdministrator(ctx context.Context, input DeleteAdministratorInput) (*DeleteAdministratorPayload, error)
	UpdateAdministrator(ctx context.Context, input UpdateAdministratorInput) (*UpdateAdministratorPayload, error)
	CreateCustomer(ctx context.Context, input CreateCustomerInput) (*CreateCustomerPayload, error)
	DeleteCustomer(ctx context.Context, input DeleteCustomerInput) (*DeleteCustomerPayload, error)
	UpdateCustomer(ctx context.Context, input UpdateCustomerInput) (*UpdateCustomerPayload, error)
	CreateEmployee(ctx context.Context, input CreateEmployeeInput) (*CreateEmployeePayload, error)
	DeleteEmployee(ctx context.Context, input DeleteEmployeeInput) (*DeleteEmployeePayload, error)
	EditEmployeeAvailability(ctx context.Context, input EditEmployeeAvailabilityInput) (*EditEmployeeAvailabilityPayload, error)
	UpdateEmployee(ctx context.Context, input UpdateEmployeeInput) (*UpdateEmployeePayload, error)
	CreateManager(ctx context.Context, input CreateManagerInput) (*CreateManagerPayload, error)
	DeleteManager(ctx context.Context, input DeleteManagerInput) (*DeleteManagerPayload, error)
	UpdateManager(ctx context.Context, input UpdateManagerInput) (*UpdateManagerPayload, error)
	UploadViewerProfilePicture(ctx context.Context, upload graphql.Upload) (*UploadViewerProfilePicturePayload, error)
	RemoveViewerProfilePicture(ctx context.Context) (*RemoveViewerProfilePicturePayload, error)
	UpdateViewer(ctx context.Context, input UpdateViewerInput) (*UpdateViewerPayload, error)
	UpdateNotificationToken(ctx context.Context, input UpdateNotificationTokenInput) (*UpdateViewerPayload, error)
}
type NewsResolver interface {
	Title(ctx context.Context, obj *prisma.News) (*string, error)
	Image(ctx context.Context, obj *prisma.News) (*Image, error)
	Branch(ctx context.Context, obj *prisma.News) (*prisma.Branch, error)
}
type ProductResolver interface {
	ID(ctx context.Context, obj *prisma.Product) (string, error)

	Name(ctx context.Context, obj *prisma.Product) (string, error)
	Desc(ctx context.Context, obj *prisma.Product) (*string, error)
	Price(ctx context.Context, obj *prisma.Product) (*Price, error)
	Capacity(ctx context.Context, obj *prisma.Product) (*string, error)
	Category(ctx context.Context, obj *prisma.Product) (*prisma.ProductCategory, error)
	SubCategory(ctx context.Context, obj *prisma.Product) (*prisma.ProductSubCategory, error)
	Image(ctx context.Context, obj *prisma.Product) (*Image, error)
	Attributes(ctx context.Context, obj *prisma.Product) ([]*prisma.ProductServiceAttribute, error)

	Reviews(ctx context.Context, obj *prisma.Product) (*ProductReviewConnection, error)
	ViewerReview(ctx context.Context, obj *prisma.Product) (*prisma.ProductReview, error)
	ViewerCanReview(ctx context.Context, obj *prisma.Product) (*bool, error)
	ReviewAggregations(ctx context.Context, obj *prisma.Product) (*ReviewAggregations, error)
}
type ProductCategoryResolver interface {
	Products(ctx context.Context, obj *prisma.ProductCategory) ([]*prisma.Product, error)
	SubCategories(ctx context.Context, obj *prisma.ProductCategory) ([]*prisma.ProductSubCategory, error)
}
type ProductReviewResolver interface {
	Customer(ctx context.Context, obj *prisma.ProductReview) (*prisma.Customer, error)
	Product(ctx context.Context, obj *prisma.ProductReview) (*prisma.Product, error)
}
type ProductServiceAttributeResolver interface {
	Name(ctx context.Context, obj *prisma.ProductServiceAttribute) (*string, error)
	Value(ctx context.Context, obj *prisma.ProductServiceAttribute) (*string, error)
}
type ProductSubCategoryResolver interface {
	Category(ctx context.Context, obj *prisma.ProductSubCategory) (*prisma.ProductCategory, error)
	Products(ctx context.Context, obj *prisma.ProductSubCategory) ([]*prisma.Product, error)
}
type QueryResolver interface {
	Appointment(ctx context.Context, id string, language *string) (*prisma.Appointment, error)
	Branch(ctx context.Context, id string, language *string) (*prisma.Branch, error)
	Branches(ctx context.Context, input BranchesInput, language *string) (*BranchConnection, error)
	Company(ctx context.Context, id string, language *string) (*prisma.Company, error)
	Companies(ctx context.Context, language *string) (*CompanyConnection, error)
	RelatedCompanies(ctx context.Context, email string, password string, language *string) (*RelatedCompanies, error)
	CurrentCompany(ctx context.Context) (*prisma.Company, error)
	Customer(ctx context.Context, id string, language *string) (*prisma.Customer, error)
	Customers(ctx context.Context, input CustomerInput, language *string) (*CustomerConnection, error)
	EmailTemplate(ctx context.Context, input EmailTemplateInput, language *string) (*EmailTemplateQueryPayload, error)
	EmailTemplates(ctx context.Context, language *string) (*EmailTemplatesQueryPayload, error)
	Employee(ctx context.Context, id string, language *string) (*prisma.Employee, error)
	Employees(ctx context.Context, input EmployeeInput, language *string) (*EmployeeConnection, error)
	Favorites(ctx context.Context, language *string) (*FavoritesPayload, error)
	OrderHistory(ctx context.Context, language *string) (*OrderHistoryPayload, error)
	IsValidPasswordToken(ctx context.Context, token string) (*IsValidPasswordTokenPayload, error)
	Product(ctx context.Context, id string, language *string) (*prisma.Product, error)
	Products(ctx context.Context, input ProductInput, language *string) (*ProductConnection, error)
	ProductCategory(ctx context.Context, id string) (*prisma.ProductCategory, error)
	ProductCategories(ctx context.Context) ([]*prisma.ProductCategory, error)
	ProductSubCategory(ctx context.Context, id string) (*prisma.ProductSubCategory, error)
	ProductSubCategories(ctx context.Context) ([]*prisma.ProductSubCategory, error)
	Reviews(ctx context.Context, input ReviewInput, language *string) (*ReviewConnection, error)
	Service(ctx context.Context, id string, language *string) (*prisma.Service, error)
	Services(ctx context.Context, input ServiceInput, language *string) (*ServiceConnection, error)
	ServiceCategory(ctx context.Context, id string) (*prisma.ServiceCategory, error)
	ServiceCategories(ctx context.Context) ([]*prisma.ServiceCategory, error)
	ServiceSubCategory(ctx context.Context, id string) (*prisma.ServiceSubCategory, error)
	ServiceSubCategories(ctx context.Context) ([]*prisma.ServiceSubCategory, error)
	StaffMember(ctx context.Context, id *string) (prisma.IStaff, error)
	StaffMembers(ctx context.Context, input StaffMemberInput) (*StaffMemberConnection, error)
	PublicStaffMembers(ctx context.Context, input StaffMemberInput) (*PublicStaffMemberConnection, error)
	AppointmentTimeslots(ctx context.Context, input TimeslotInput) (*Timeslots, error)
	Viewer(ctx context.Context) (prisma.IUser, error)
}
type ServiceResolver interface {
	ID(ctx context.Context, obj *prisma.Service) (string, error)

	Name(ctx context.Context, obj *prisma.Service) (string, error)
	Desc(ctx context.Context, obj *prisma.Service) (*string, error)
	GenderTarget(ctx context.Context, obj *prisma.Service) (*prisma.GenderTarget, error)
	Price(ctx context.Context, obj *prisma.Service) (*Price, error)
	Duration(ctx context.Context, obj *prisma.Service) (int, error)
	Image(ctx context.Context, obj *prisma.Service) (*Image, error)
	Attributes(ctx context.Context, obj *prisma.Service) ([]*prisma.ProductServiceAttribute, error)
	Category(ctx context.Context, obj *prisma.Service) (*prisma.ServiceCategory, error)
	SubCategory(ctx context.Context, obj *prisma.Service) (*prisma.ServiceSubCategory, error)

	Reviews(ctx context.Context, obj *prisma.Service) (*ServiceReviewConnection, error)
	ViewerReview(ctx context.Context, obj *prisma.Service) (*prisma.ServiceReview, error)
	ViewerCanReview(ctx context.Context, obj *prisma.Service) (*bool, error)
	ReviewAggregations(ctx context.Context, obj *prisma.Service) (*ReviewAggregations, error)
}
type ServiceCategoryResolver interface {
	Services(ctx context.Context, obj *prisma.ServiceCategory) ([]*prisma.Service, error)
	SubCategories(ctx context.Context, obj *prisma.ServiceCategory) ([]*prisma.ServiceSubCategory, error)
}
type ServiceReviewResolver interface {
	Customer(ctx context.Context, obj *prisma.ServiceReview) (*prisma.Customer, error)
	Service(ctx context.Context, obj *prisma.ServiceReview) (*prisma.Service, error)
}
type ServiceSubCategoryResolver interface {
	Category(ctx context.Context, obj *prisma.ServiceSubCategory) (*prisma.ServiceCategory, error)
	Services(ctx context.Context, obj *prisma.ServiceSubCategory) ([]*prisma.Service, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ActivateAccountPayload.status":
		if e.complexity.ActivateAccountPayload.Status == nil {
			break
		}

		return e.complexity.ActivateAccountPayload.Status(childComplexity), true

	case "Administrator.activated":
		if e.complexity.Administrator.Activated == nil {
			break
		}

		return e.complexity.Administrator.Activated(childComplexity), true

	case "Administrator.birthday":
		if e.complexity.Administrator.Birthday == nil {
			break
		}

		return e.complexity.Administrator.Birthday(childComplexity), true

	case "Administrator.city":
		if e.complexity.Administrator.City == nil {
			break
		}

		return e.complexity.Administrator.City(childComplexity), true

	case "Administrator.createdAt":
		if e.complexity.Administrator.CreatedAt == nil {
			break
		}

		return e.complexity.Administrator.CreatedAt(childComplexity), true

	case "Administrator.email":
		if e.complexity.Administrator.Email == nil {
			break
		}

		return e.complexity.Administrator.Email(childComplexity), true

	case "Administrator.firstName":
		if e.complexity.Administrator.FirstName == nil {
			break
		}

		return e.complexity.Administrator.FirstName(childComplexity), true

	case "Administrator.fullName":
		if e.complexity.Administrator.FullName == nil {
			break
		}

		return e.complexity.Administrator.FullName(childComplexity), true

	case "Administrator.gender":
		if e.complexity.Administrator.Gender == nil {
			break
		}

		return e.complexity.Administrator.Gender(childComplexity), true

	case "Administrator.id":
		if e.complexity.Administrator.ID == nil {
			break
		}

		return e.complexity.Administrator.ID(childComplexity), true

	case "Administrator.image":
		if e.complexity.Administrator.Image == nil {
			break
		}

		return e.complexity.Administrator.Image(childComplexity), true

	case "Administrator.lastName":
		if e.complexity.Administrator.LastName == nil {
			break
		}

		return e.complexity.Administrator.LastName(childComplexity), true

	case "Administrator.notificationToken":
		if e.complexity.Administrator.NotificationToken == nil {
			break
		}

		return e.complexity.Administrator.NotificationToken(childComplexity), true

	case "Administrator.phoneNumber":
		if e.complexity.Administrator.PhoneNumber == nil {
			break
		}

		return e.complexity.Administrator.PhoneNumber(childComplexity), true

	case "Administrator.street":
		if e.complexity.Administrator.Street == nil {
			break
		}

		return e.complexity.Administrator.Street(childComplexity), true

	case "Administrator.type":
		if e.complexity.Administrator.Type == nil {
			break
		}

		return e.complexity.Administrator.Type(childComplexity), true

	case "Administrator.updatedAt":
		if e.complexity.Administrator.UpdatedAt == nil {
			break
		}

		return e.complexity.Administrator.UpdatedAt(childComplexity), true

	case "Administrator.zipCode":
		if e.complexity.Administrator.ZipCode == nil {
			break
		}

		return e.complexity.Administrator.ZipCode(childComplexity), true

	case "AdministratorConnection.nodes":
		if e.complexity.AdministratorConnection.Nodes == nil {
			break
		}

		return e.complexity.AdministratorConnection.Nodes(childComplexity), true

	case "Appointment.afterImage":
		if e.complexity.Appointment.AfterImage == nil {
			break
		}

		return e.complexity.Appointment.AfterImage(childComplexity), true

	case "Appointment.beforeImage":
		if e.complexity.Appointment.BeforeImage == nil {
			break
		}

		return e.complexity.Appointment.BeforeImage(childComplexity), true

	case "Appointment.createdAt":
		if e.complexity.Appointment.CreatedAt == nil {
			break
		}

		return e.complexity.Appointment.CreatedAt(childComplexity), true

	case "Appointment.customer":
		if e.complexity.Appointment.Customer == nil {
			break
		}

		return e.complexity.Appointment.Customer(childComplexity), true

	case "Appointment.desc":
		if e.complexity.Appointment.Desc == nil {
			break
		}

		return e.complexity.Appointment.Desc(childComplexity), true

	case "Appointment.duration":
		if e.complexity.Appointment.Duration == nil {
			break
		}

		return e.complexity.Appointment.Duration(childComplexity), true

	case "Appointment.employee":
		if e.complexity.Appointment.Employee == nil {
			break
		}

		return e.complexity.Appointment.Employee(childComplexity), true

	case "Appointment.end":
		if e.complexity.Appointment.End == nil {
			break
		}

		return e.complexity.Appointment.End(childComplexity), true

	case "Appointment.id":
		if e.complexity.Appointment.ID == nil {
			break
		}

		return e.complexity.Appointment.ID(childComplexity), true

	case "Appointment.note":
		if e.complexity.Appointment.Note == nil {
			break
		}

		return e.complexity.Appointment.Note(childComplexity), true

	case "Appointment.price":
		if e.complexity.Appointment.Price == nil {
			break
		}

		return e.complexity.Appointment.Price(childComplexity), true

	case "Appointment.products":
		if e.complexity.Appointment.Products == nil {
			break
		}

		return e.complexity.Appointment.Products(childComplexity), true

	case "Appointment.review":
		if e.complexity.Appointment.Review == nil {
			break
		}

		return e.complexity.Appointment.Review(childComplexity), true

	case "Appointment.services":
		if e.complexity.Appointment.Services == nil {
			break
		}

		return e.complexity.Appointment.Services(childComplexity), true

	case "Appointment.start":
		if e.complexity.Appointment.Start == nil {
			break
		}

		return e.complexity.Appointment.Start(childComplexity), true

	case "Appointment.status":
		if e.complexity.Appointment.Status == nil {
			break
		}

		return e.complexity.Appointment.Status(childComplexity), true

	case "Appointment.updatedAt":
		if e.complexity.Appointment.UpdatedAt == nil {
			break
		}

		return e.complexity.Appointment.UpdatedAt(childComplexity), true

	case "Appointment.viewerCanReview":
		if e.complexity.Appointment.ViewerCanReview == nil {
			break
		}

		return e.complexity.Appointment.ViewerCanReview(childComplexity), true

	case "Appointment.viewerReview":
		if e.complexity.Appointment.ViewerReview == nil {
			break
		}

		return e.complexity.Appointment.ViewerReview(childComplexity), true

	case "AppointmentConnection.nodes":
		if e.complexity.AppointmentConnection.Nodes == nil {
			break
		}

		return e.complexity.AppointmentConnection.Nodes(childComplexity), true

	case "AppointmentProduct.count":
		if e.complexity.AppointmentProduct.Count == nil {
			break
		}

		return e.complexity.AppointmentProduct.Count(childComplexity), true

	case "AppointmentProduct.item":
		if e.complexity.AppointmentProduct.Item == nil {
			break
		}

		return e.complexity.AppointmentProduct.Item(childComplexity), true

	case "AppointmentReview.appointment":
		if e.complexity.AppointmentReview.Appointment == nil {
			break
		}

		return e.complexity.AppointmentReview.Appointment(childComplexity), true

	case "AppointmentReview.createdAt":
		if e.complexity.AppointmentReview.CreatedAt == nil {
			break
		}

		return e.complexity.AppointmentReview.CreatedAt(childComplexity), true

	case "AppointmentReview.customer":
		if e.complexity.AppointmentReview.Customer == nil {
			break
		}

		return e.complexity.AppointmentReview.Customer(childComplexity), true

	case "AppointmentReview.id":
		if e.complexity.AppointmentReview.ID == nil {
			break
		}

		return e.complexity.AppointmentReview.ID(childComplexity), true

	case "AppointmentReview.stars":
		if e.complexity.AppointmentReview.Stars == nil {
			break
		}

		return e.complexity.AppointmentReview.Stars(childComplexity), true

	case "AppointmentReview.status":
		if e.complexity.AppointmentReview.Status == nil {
			break
		}

		return e.complexity.AppointmentReview.Status(childComplexity), true

	case "AppointmentReview.text":
		if e.complexity.AppointmentReview.Text == nil {
			break
		}

		return e.complexity.AppointmentReview.Text(childComplexity), true

	case "AppointmentReview.title":
		if e.complexity.AppointmentReview.Title == nil {
			break
		}

		return e.complexity.AppointmentReview.Title(childComplexity), true

	case "AppointmentReview.type":
		if e.complexity.AppointmentReview.Type == nil {
			break
		}

		return e.complexity.AppointmentReview.Type(childComplexity), true

	case "AppointmentReview.updatedAt":
		if e.complexity.AppointmentReview.UpdatedAt == nil {
			break
		}

		return e.complexity.AppointmentReview.UpdatedAt(childComplexity), true

	case "AppointmentReviewConnection.nodes":
		if e.complexity.AppointmentReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.AppointmentReviewConnection.Nodes(childComplexity), true

	case "ApproveReviewPayload.review":
		if e.complexity.ApproveReviewPayload.Review == nil {
			break
		}

		return e.complexity.ApproveReviewPayload.Review(childComplexity), true

	case "Branch.address":
		if e.complexity.Branch.Address == nil {
			break
		}

		return e.complexity.Branch.Address(childComplexity), true

	case "Branch.appTheme":
		if e.complexity.Branch.AppTheme == nil {
			break
		}

		return e.complexity.Branch.AppTheme(childComplexity), true

	case "Branch.company":
		if e.complexity.Branch.Company == nil {
			break
		}

		return e.complexity.Branch.Company(childComplexity), true

	case "Branch.createdAt":
		if e.complexity.Branch.CreatedAt == nil {
			break
		}

		return e.complexity.Branch.CreatedAt(childComplexity), true

	case "Branch.facebookLink":
		if e.complexity.Branch.FacebookLink == nil {
			break
		}

		return e.complexity.Branch.FacebookLink(childComplexity), true

	case "Branch.fromEmail":
		if e.complexity.Branch.FromEmail == nil {
			break
		}

		return e.complexity.Branch.FromEmail(childComplexity), true

	case "Branch.id":
		if e.complexity.Branch.ID == nil {
			break
		}

		return e.complexity.Branch.ID(childComplexity), true

	case "Branch.images":
		if e.complexity.Branch.Images == nil {
			break
		}

		return e.complexity.Branch.Images(childComplexity), true

	case "Branch.imprint":
		if e.complexity.Branch.Imprint == nil {
			break
		}

		return e.complexity.Branch.Imprint(childComplexity), true

	case "Branch.instagramLink":
		if e.complexity.Branch.InstagramLink == nil {
			break
		}

		return e.complexity.Branch.InstagramLink(childComplexity), true

	case "Branch.logo":
		if e.complexity.Branch.Logo == nil {
			break
		}

		return e.complexity.Branch.Logo(childComplexity), true

	case "Branch.mailchimpApiKey":
		if e.complexity.Branch.MailchimpAPIKey == nil {
			break
		}

		return e.complexity.Branch.MailchimpAPIKey(childComplexity), true

	case "Branch.mailchimpCredentialsValid":
		if e.complexity.Branch.MailchimpCredentialsValid == nil {
			break
		}

		return e.complexity.Branch.MailchimpCredentialsValid(childComplexity), true

	case "Branch.mailchimpListId":
		if e.complexity.Branch.MailchimpListId == nil {
			break
		}

		return e.complexity.Branch.MailchimpListId(childComplexity), true

	case "Branch.name":
		if e.complexity.Branch.Name == nil {
			break
		}

		return e.complexity.Branch.Name(childComplexity), true

	case "Branch.navigationLink":
		if e.complexity.Branch.NavigationLink == nil {
			break
		}

		return e.complexity.Branch.NavigationLink(childComplexity), true

	case "Branch.news":
		if e.complexity.Branch.News == nil {
			break
		}

		return e.complexity.Branch.News(childComplexity), true

	case "Branch.openingHours":
		if e.complexity.Branch.OpeningHours == nil {
			break
		}

		return e.complexity.Branch.OpeningHours(childComplexity), true

	case "Branch.phoneNumber":
		if e.complexity.Branch.PhoneNumber == nil {
			break
		}

		return e.complexity.Branch.PhoneNumber(childComplexity), true

	case "Branch.reviewAggregations":
		if e.complexity.Branch.ReviewAggregations == nil {
			break
		}

		return e.complexity.Branch.ReviewAggregations(childComplexity), true

	case "Branch.reviews":
		if e.complexity.Branch.Reviews == nil {
			break
		}

		return e.complexity.Branch.Reviews(childComplexity), true

	case "Branch.smtpSendHost":
		if e.complexity.Branch.SMTPSendHost == nil {
			break
		}

		return e.complexity.Branch.SMTPSendHost(childComplexity), true

	case "Branch.smtpSendPort":
		if e.complexity.Branch.SMTPSendPort == nil {
			break
		}

		return e.complexity.Branch.SMTPSendPort(childComplexity), true

	case "Branch.smtpUsername":
		if e.complexity.Branch.SMTPUsername == nil {
			break
		}

		return e.complexity.Branch.SMTPUsername(childComplexity), true

	case "Branch.sharingRedirectUrl":
		if e.complexity.Branch.SharingRedirectUrl == nil {
			break
		}

		return e.complexity.Branch.SharingRedirectUrl(childComplexity), true

	case "Branch.slots":
		if e.complexity.Branch.Slots == nil {
			break
		}

		return e.complexity.Branch.Slots(childComplexity), true

	case "Branch.smtpPassword":
		if e.complexity.Branch.SmtpPassword == nil {
			break
		}

		return e.complexity.Branch.SmtpPassword(childComplexity), true

	case "Branch.tiktokLink":
		if e.complexity.Branch.TiktokLink == nil {
			break
		}

		return e.complexity.Branch.TiktokLink(childComplexity), true

	case "Branch.updatedAt":
		if e.complexity.Branch.UpdatedAt == nil {
			break
		}

		return e.complexity.Branch.UpdatedAt(childComplexity), true

	case "Branch.websiteUrl":
		if e.complexity.Branch.WebsiteUrl == nil {
			break
		}

		return e.complexity.Branch.WebsiteUrl(childComplexity), true

	case "Branch.welcomeMessage":
		if e.complexity.Branch.WelcomeMessage == nil {
			break
		}

		return e.complexity.Branch.WelcomeMessage(childComplexity), true

	case "BranchConnection.nodes":
		if e.complexity.BranchConnection.Nodes == nil {
			break
		}

		return e.complexity.BranchConnection.Nodes(childComplexity), true

	case "BranchImageSlot.branch":
		if e.complexity.BranchImageSlot.Branch == nil {
			break
		}

		return e.complexity.BranchImageSlot.Branch(childComplexity), true

	case "BranchImageSlot.createdAt":
		if e.complexity.BranchImageSlot.CreatedAt == nil {
			break
		}

		return e.complexity.BranchImageSlot.CreatedAt(childComplexity), true

	case "BranchImageSlot.id":
		if e.complexity.BranchImageSlot.ID == nil {
			break
		}

		return e.complexity.BranchImageSlot.ID(childComplexity), true

	case "BranchImageSlot.imageUrl":
		if e.complexity.BranchImageSlot.ImageURL == nil {
			break
		}

		return e.complexity.BranchImageSlot.ImageURL(childComplexity), true

	case "BranchImageSlot.slotNumber":
		if e.complexity.BranchImageSlot.SlotNumber == nil {
			break
		}

		return e.complexity.BranchImageSlot.SlotNumber(childComplexity), true

	case "BranchImageSlot.updatedAt":
		if e.complexity.BranchImageSlot.UpdatedAt == nil {
			break
		}

		return e.complexity.BranchImageSlot.UpdatedAt(childComplexity), true

	case "CancelAppointmentPayload.appointment":
		if e.complexity.CancelAppointmentPayload.Appointment == nil {
			break
		}

		return e.complexity.CancelAppointmentPayload.Appointment(childComplexity), true

	case "Company.aliases":
		if e.complexity.Company.Aliases == nil {
			break
		}

		return e.complexity.Company.Aliases(childComplexity), true

	case "Company.appTheme":
		if e.complexity.Company.AppTheme == nil {
			break
		}

		return e.complexity.Company.AppTheme(childComplexity), true

	case "Company.branches":
		if e.complexity.Company.Branches == nil {
			break
		}

		args, err := ec.field_Company_branches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Company.Branches(childComplexity, args["pagination"].(*PaginationInput)), true

	case "Company.createdAt":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true

	case "Company.customUrls":
		if e.complexity.Company.CustomUrls == nil {
			break
		}

		return e.complexity.Company.CustomUrls(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.logo":
		if e.complexity.Company.Logo == nil {
			break
		}

		return e.complexity.Company.Logo(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.pwaBackgroundColor":
		if e.complexity.Company.PwaBackgroundColor == nil {
			break
		}

		return e.complexity.Company.PwaBackgroundColor(childComplexity), true

	case "Company.pwaIcon":
		if e.complexity.Company.PwaIcon == nil {
			break
		}

		return e.complexity.Company.PwaIcon(childComplexity), true

	case "Company.pwaShortName":
		if e.complexity.Company.PwaShortName == nil {
			break
		}

		return e.complexity.Company.PwaShortName(childComplexity), true

	case "Company.pwaThemeColor":
		if e.complexity.Company.PwaThemeColor == nil {
			break
		}

		return e.complexity.Company.PwaThemeColor(childComplexity), true

	case "Company.sharingRedirectUrl":
		if e.complexity.Company.SharingRedirectUrl == nil {
			break
		}

		return e.complexity.Company.SharingRedirectUrl(childComplexity), true

	case "Company.updatedAt":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "CompanyConnection.nodes":
		if e.complexity.CompanyConnection.Nodes == nil {
			break
		}

		return e.complexity.CompanyConnection.Nodes(childComplexity), true

	case "CreateAdministratorPayload.administrator":
		if e.complexity.CreateAdministratorPayload.Administrator == nil {
			break
		}

		return e.complexity.CreateAdministratorPayload.Administrator(childComplexity), true

	case "CreateBranchPayload.branch":
		if e.complexity.CreateBranchPayload.Branch == nil {
			break
		}

		return e.complexity.CreateBranchPayload.Branch(childComplexity), true

	case "CreateCompanyPayload.company":
		if e.complexity.CreateCompanyPayload.Company == nil {
			break
		}

		return e.complexity.CreateCompanyPayload.Company(childComplexity), true

	case "CreateCustomerPayload.customer":
		if e.complexity.CreateCustomerPayload.Customer == nil {
			break
		}

		return e.complexity.CreateCustomerPayload.Customer(childComplexity), true

	case "CreateEmployeePayload.employee":
		if e.complexity.CreateEmployeePayload.Employee == nil {
			break
		}

		return e.complexity.CreateEmployeePayload.Employee(childComplexity), true

	case "CreateFavoritePayload.favorite":
		if e.complexity.CreateFavoritePayload.Favorite == nil {
			break
		}

		return e.complexity.CreateFavoritePayload.Favorite(childComplexity), true

	case "CreateManagerPayload.manager":
		if e.complexity.CreateManagerPayload.Manager == nil {
			break
		}

		return e.complexity.CreateManagerPayload.Manager(childComplexity), true

	case "CreateNewsPayload.news":
		if e.complexity.CreateNewsPayload.News == nil {
			break
		}

		return e.complexity.CreateNewsPayload.News(childComplexity), true

	case "CreateProductCategoryPayload.category":
		if e.complexity.CreateProductCategoryPayload.Category == nil {
			break
		}

		return e.complexity.CreateProductCategoryPayload.Category(childComplexity), true

	case "CreateProductPayload.product":
		if e.complexity.CreateProductPayload.Product == nil {
			break
		}

		return e.complexity.CreateProductPayload.Product(childComplexity), true

	case "CreateProductSubCategoryPayload.subCategory":
		if e.complexity.CreateProductSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.CreateProductSubCategoryPayload.SubCategory(childComplexity), true

	case "CreateServiceCategoryPayload.category":
		if e.complexity.CreateServiceCategoryPayload.Category == nil {
			break
		}

		return e.complexity.CreateServiceCategoryPayload.Category(childComplexity), true

	case "CreateServicePayload.service":
		if e.complexity.CreateServicePayload.Service == nil {
			break
		}

		return e.complexity.CreateServicePayload.Service(childComplexity), true

	case "CreateServiceSubCategoryPayload.subCategory":
		if e.complexity.CreateServiceSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.CreateServiceSubCategoryPayload.SubCategory(childComplexity), true

	case "Customer.activated":
		if e.complexity.Customer.Activated == nil {
			break
		}

		return e.complexity.Customer.Activated(childComplexity), true

	case "Customer.allowReviewSharing":
		if e.complexity.Customer.AllowReviewSharing == nil {
			break
		}

		return e.complexity.Customer.AllowReviewSharing(childComplexity), true

	case "Customer.appointments":
		if e.complexity.Customer.Appointments == nil {
			break
		}

		args, err := ec.field_Customer_appointments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Appointments(childComplexity, args["input"].(*AppointmentInput)), true

	case "Customer.birthday":
		if e.complexity.Customer.Birthday == nil {
			break
		}

		return e.complexity.Customer.Birthday(childComplexity), true

	case "Customer.city":
		if e.complexity.Customer.City == nil {
			break
		}

		return e.complexity.Customer.City(childComplexity), true

	case "Customer.createdAt":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.email":
		if e.complexity.Customer.Email == nil {
			break
		}

		return e.complexity.Customer.Email(childComplexity), true

	case "Customer.firstName":
		if e.complexity.Customer.FirstName == nil {
			break
		}

		return e.complexity.Customer.FirstName(childComplexity), true

	case "Customer.fullName":
		if e.complexity.Customer.FullName == nil {
			break
		}

		return e.complexity.Customer.FullName(childComplexity), true

	case "Customer.gender":
		if e.complexity.Customer.Gender == nil {
			break
		}

		return e.complexity.Customer.Gender(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.image":
		if e.complexity.Customer.Image == nil {
			break
		}

		return e.complexity.Customer.Image(childComplexity), true

	case "Customer.lastName":
		if e.complexity.Customer.LastName == nil {
			break
		}

		return e.complexity.Customer.LastName(childComplexity), true

	case "Customer.note":
		if e.complexity.Customer.Note == nil {
			break
		}

		return e.complexity.Customer.Note(childComplexity), true

	case "Customer.notificationToken":
		if e.complexity.Customer.NotificationToken == nil {
			break
		}

		return e.complexity.Customer.NotificationToken(childComplexity), true

	case "Customer.phoneNumber":
		if e.complexity.Customer.PhoneNumber == nil {
			break
		}

		return e.complexity.Customer.PhoneNumber(childComplexity), true

	case "Customer.reviews":
		if e.complexity.Customer.Reviews == nil {
			break
		}

		return e.complexity.Customer.Reviews(childComplexity), true

	case "Customer.street":
		if e.complexity.Customer.Street == nil {
			break
		}

		return e.complexity.Customer.Street(childComplexity), true

	case "Customer.type":
		if e.complexity.Customer.Type == nil {
			break
		}

		return e.complexity.Customer.Type(childComplexity), true

	case "Customer.updatedAt":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "Customer.zipCode":
		if e.complexity.Customer.ZipCode == nil {
			break
		}

		return e.complexity.Customer.ZipCode(childComplexity), true

	case "CustomerConnection.nodes":
		if e.complexity.CustomerConnection.Nodes == nil {
			break
		}

		return e.complexity.CustomerConnection.Nodes(childComplexity), true

	case "CustomerRequestAppointmentPayload.message":
		if e.complexity.CustomerRequestAppointmentPayload.Message == nil {
			break
		}

		return e.complexity.CustomerRequestAppointmentPayload.Message(childComplexity), true

	case "CustomerReviewConnection.nodes":
		if e.complexity.CustomerReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.CustomerReviewConnection.Nodes(childComplexity), true

	case "DeleteAdministratorPayload.administrator":
		if e.complexity.DeleteAdministratorPayload.Administrator == nil {
			break
		}

		return e.complexity.DeleteAdministratorPayload.Administrator(childComplexity), true

	case "DeleteBranchPayload.branch":
		if e.complexity.DeleteBranchPayload.Branch == nil {
			break
		}

		return e.complexity.DeleteBranchPayload.Branch(childComplexity), true

	case "DeleteCompanyPayload.company":
		if e.complexity.DeleteCompanyPayload.Company == nil {
			break
		}

		return e.complexity.DeleteCompanyPayload.Company(childComplexity), true

	case "DeleteCustomerPayload.customer":
		if e.complexity.DeleteCustomerPayload.Customer == nil {
			break
		}

		return e.complexity.DeleteCustomerPayload.Customer(childComplexity), true

	case "DeleteEmployeePayload.employee":
		if e.complexity.DeleteEmployeePayload.Employee == nil {
			break
		}

		return e.complexity.DeleteEmployeePayload.Employee(childComplexity), true

	case "DeleteFavoritePayload.favorite":
		if e.complexity.DeleteFavoritePayload.Favorite == nil {
			break
		}

		return e.complexity.DeleteFavoritePayload.Favorite(childComplexity), true

	case "DeleteManagerPayload.manager":
		if e.complexity.DeleteManagerPayload.Manager == nil {
			break
		}

		return e.complexity.DeleteManagerPayload.Manager(childComplexity), true

	case "DeleteNewsPayload.news":
		if e.complexity.DeleteNewsPayload.News == nil {
			break
		}

		return e.complexity.DeleteNewsPayload.News(childComplexity), true

	case "DeleteProductCategoryPayload.category":
		if e.complexity.DeleteProductCategoryPayload.Category == nil {
			break
		}

		return e.complexity.DeleteProductCategoryPayload.Category(childComplexity), true

	case "DeleteProductPayload.product":
		if e.complexity.DeleteProductPayload.Product == nil {
			break
		}

		return e.complexity.DeleteProductPayload.Product(childComplexity), true

	case "DeleteProductSubCategoryPayload.subCategory":
		if e.complexity.DeleteProductSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.DeleteProductSubCategoryPayload.SubCategory(childComplexity), true

	case "DeleteReviewPayload.review":
		if e.complexity.DeleteReviewPayload.Review == nil {
			break
		}

		return e.complexity.DeleteReviewPayload.Review(childComplexity), true

	case "DeleteServiceCategoryPayload.category":
		if e.complexity.DeleteServiceCategoryPayload.Category == nil {
			break
		}

		return e.complexity.DeleteServiceCategoryPayload.Category(childComplexity), true

	case "DeleteServicePayload.service":
		if e.complexity.DeleteServicePayload.Service == nil {
			break
		}

		return e.complexity.DeleteServicePayload.Service(childComplexity), true

	case "DeleteServiceSubCategoryPayload.subCategory":
		if e.complexity.DeleteServiceSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.DeleteServiceSubCategoryPayload.SubCategory(childComplexity), true

	case "EditEmployeeAvailabilityPayload.employee":
		if e.complexity.EditEmployeeAvailabilityPayload.Employee == nil {
			break
		}

		return e.complexity.EditEmployeeAvailabilityPayload.Employee(childComplexity), true

	case "EmailTemplate.content":
		if e.complexity.EmailTemplate.Content == nil {
			break
		}

		return e.complexity.EmailTemplate.Content(childComplexity), true

	case "EmailTemplate.createdAt":
		if e.complexity.EmailTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.EmailTemplate.CreatedAt(childComplexity), true

	case "EmailTemplate.id":
		if e.complexity.EmailTemplate.ID == nil {
			break
		}

		return e.complexity.EmailTemplate.ID(childComplexity), true

	case "EmailTemplate.name":
		if e.complexity.EmailTemplate.Name == nil {
			break
		}

		return e.complexity.EmailTemplate.Name(childComplexity), true

	case "EmailTemplate.title":
		if e.complexity.EmailTemplate.Title == nil {
			break
		}

		return e.complexity.EmailTemplate.Title(childComplexity), true

	case "EmailTemplate.updatedAt":
		if e.complexity.EmailTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.EmailTemplate.UpdatedAt(childComplexity), true

	case "EmailTemplateQueryPayload.template":
		if e.complexity.EmailTemplateQueryPayload.Template == nil {
			break
		}

		return e.complexity.EmailTemplateQueryPayload.Template(childComplexity), true

	case "EmailTemplatesQueryPayload.templates":
		if e.complexity.EmailTemplatesQueryPayload.Templates == nil {
			break
		}

		return e.complexity.EmailTemplatesQueryPayload.Templates(childComplexity), true

	case "Employee.activated":
		if e.complexity.Employee.Activated == nil {
			break
		}

		return e.complexity.Employee.Activated(childComplexity), true

	case "Employee.appointments":
		if e.complexity.Employee.Appointments == nil {
			break
		}

		args, err := ec.field_Employee_appointments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Employee.Appointments(childComplexity, args["input"].(*AppointmentInput)), true

	case "Employee.birthday":
		if e.complexity.Employee.Birthday == nil {
			break
		}

		return e.complexity.Employee.Birthday(childComplexity), true

	case "Employee.city":
		if e.complexity.Employee.City == nil {
			break
		}

		return e.complexity.Employee.City(childComplexity), true

	case "Employee.createdAt":
		if e.complexity.Employee.CreatedAt == nil {
			break
		}

		return e.complexity.Employee.CreatedAt(childComplexity), true

	case "Employee.email":
		if e.complexity.Employee.Email == nil {
			break
		}

		return e.complexity.Employee.Email(childComplexity), true

	case "Employee.firstName":
		if e.complexity.Employee.FirstName == nil {
			break
		}

		return e.complexity.Employee.FirstName(childComplexity), true

	case "Employee.fullName":
		if e.complexity.Employee.FullName == nil {
			break
		}

		return e.complexity.Employee.FullName(childComplexity), true

	case "Employee.gender":
		if e.complexity.Employee.Gender == nil {
			break
		}

		return e.complexity.Employee.Gender(childComplexity), true

	case "Employee.id":
		if e.complexity.Employee.ID == nil {
			break
		}

		return e.complexity.Employee.ID(childComplexity), true

	case "Employee.image":
		if e.complexity.Employee.Image == nil {
			break
		}

		return e.complexity.Employee.Image(childComplexity), true

	case "Employee.lastName":
		if e.complexity.Employee.LastName == nil {
			break
		}

		return e.complexity.Employee.LastName(childComplexity), true

	case "Employee.notificationToken":
		if e.complexity.Employee.NotificationToken == nil {
			break
		}

		return e.complexity.Employee.NotificationToken(childComplexity), true

	case "Employee.phoneNumber":
		if e.complexity.Employee.PhoneNumber == nil {
			break
		}

		return e.complexity.Employee.PhoneNumber(childComplexity), true

	case "Employee.street":
		if e.complexity.Employee.Street == nil {
			break
		}

		return e.complexity.Employee.Street(childComplexity), true

	case "Employee.type":
		if e.complexity.Employee.Type == nil {
			break
		}

		return e.complexity.Employee.Type(childComplexity), true

	case "Employee.updatedAt":
		if e.complexity.Employee.UpdatedAt == nil {
			break
		}

		return e.complexity.Employee.UpdatedAt(childComplexity), true

	case "Employee.workingHours":
		if e.complexity.Employee.WorkingHours == nil {
			break
		}

		return e.complexity.Employee.WorkingHours(childComplexity), true

	case "Employee.zipCode":
		if e.complexity.Employee.ZipCode == nil {
			break
		}

		return e.complexity.Employee.ZipCode(childComplexity), true

	case "EmployeeConnection.nodes":
		if e.complexity.EmployeeConnection.Nodes == nil {
			break
		}

		return e.complexity.EmployeeConnection.Nodes(childComplexity), true

	case "Favorite.id":
		if e.complexity.Favorite.ID == nil {
			break
		}

		return e.complexity.Favorite.ID(childComplexity), true

	case "Favorite.product":
		if e.complexity.Favorite.Product == nil {
			break
		}

		return e.complexity.Favorite.Product(childComplexity), true

	case "Favorite.service":
		if e.complexity.Favorite.Service == nil {
			break
		}

		return e.complexity.Favorite.Service(childComplexity), true

	case "Favorite.user":
		if e.complexity.Favorite.User == nil {
			break
		}

		return e.complexity.Favorite.User(childComplexity), true

	case "FavoritesPayload.products":
		if e.complexity.FavoritesPayload.Products == nil {
			break
		}

		return e.complexity.FavoritesPayload.Products(childComplexity), true

	case "FavoritesPayload.services":
		if e.complexity.FavoritesPayload.Services == nil {
			break
		}

		return e.complexity.FavoritesPayload.Services(childComplexity), true

	case "FormattedOpeningHour.break":
		if e.complexity.FormattedOpeningHour.Break == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.Break(childComplexity), true

	case "FormattedOpeningHour.closed":
		if e.complexity.FormattedOpeningHour.Closed == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.Closed(childComplexity), true

	case "FormattedOpeningHour.fullDay":
		if e.complexity.FormattedOpeningHour.FullDay == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.FullDay(childComplexity), true

	case "FormattedOpeningHour.key":
		if e.complexity.FormattedOpeningHour.Key == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.Key(childComplexity), true

	case "FormattedOpeningHour.shortDay":
		if e.complexity.FormattedOpeningHour.ShortDay == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.ShortDay(childComplexity), true

	case "FormattedOpeningHour.value":
		if e.complexity.FormattedOpeningHour.Value == nil {
			break
		}

		return e.complexity.FormattedOpeningHour.Value(childComplexity), true

	case "FormattedWorkingHours.break":
		if e.complexity.FormattedWorkingHours.Break == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.Break(childComplexity), true

	case "FormattedWorkingHours.fullDay":
		if e.complexity.FormattedWorkingHours.FullDay == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.FullDay(childComplexity), true

	case "FormattedWorkingHours.key":
		if e.complexity.FormattedWorkingHours.Key == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.Key(childComplexity), true

	case "FormattedWorkingHours.notWorking":
		if e.complexity.FormattedWorkingHours.NotWorking == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.NotWorking(childComplexity), true

	case "FormattedWorkingHours.shortDay":
		if e.complexity.FormattedWorkingHours.ShortDay == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.ShortDay(childComplexity), true

	case "FormattedWorkingHours.value":
		if e.complexity.FormattedWorkingHours.Value == nil {
			break
		}

		return e.complexity.FormattedWorkingHours.Value(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		return e.complexity.Image.URL(childComplexity), true

	case "IsValidPasswordTokenPayload.valid":
		if e.complexity.IsValidPasswordTokenPayload.Valid == nil {
			break
		}

		return e.complexity.IsValidPasswordTokenPayload.Valid(childComplexity), true

	case "LoginPayload.session":
		if e.complexity.LoginPayload.Session == nil {
			break
		}

		return e.complexity.LoginPayload.Session(childComplexity), true

	case "LoginPayload.user":
		if e.complexity.LoginPayload.User == nil {
			break
		}

		return e.complexity.LoginPayload.User(childComplexity), true

	case "LogoutPayload.session":
		if e.complexity.LogoutPayload.Session == nil {
			break
		}

		return e.complexity.LogoutPayload.Session(childComplexity), true

	case "Manager.activated":
		if e.complexity.Manager.Activated == nil {
			break
		}

		return e.complexity.Manager.Activated(childComplexity), true

	case "Manager.appointments":
		if e.complexity.Manager.Appointments == nil {
			break
		}

		args, err := ec.field_Manager_appointments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Manager.Appointments(childComplexity, args["input"].(*AppointmentInput)), true

	case "Manager.birthday":
		if e.complexity.Manager.Birthday == nil {
			break
		}

		return e.complexity.Manager.Birthday(childComplexity), true

	case "Manager.city":
		if e.complexity.Manager.City == nil {
			break
		}

		return e.complexity.Manager.City(childComplexity), true

	case "Manager.company":
		if e.complexity.Manager.Company == nil {
			break
		}

		return e.complexity.Manager.Company(childComplexity), true

	case "Manager.createdAt":
		if e.complexity.Manager.CreatedAt == nil {
			break
		}

		return e.complexity.Manager.CreatedAt(childComplexity), true

	case "Manager.email":
		if e.complexity.Manager.Email == nil {
			break
		}

		return e.complexity.Manager.Email(childComplexity), true

	case "Manager.firstName":
		if e.complexity.Manager.FirstName == nil {
			break
		}

		return e.complexity.Manager.FirstName(childComplexity), true

	case "Manager.fullName":
		if e.complexity.Manager.FullName == nil {
			break
		}

		return e.complexity.Manager.FullName(childComplexity), true

	case "Manager.gender":
		if e.complexity.Manager.Gender == nil {
			break
		}

		return e.complexity.Manager.Gender(childComplexity), true

	case "Manager.id":
		if e.complexity.Manager.ID == nil {
			break
		}

		return e.complexity.Manager.ID(childComplexity), true

	case "Manager.image":
		if e.complexity.Manager.Image == nil {
			break
		}

		return e.complexity.Manager.Image(childComplexity), true

	case "Manager.lastName":
		if e.complexity.Manager.LastName == nil {
			break
		}

		return e.complexity.Manager.LastName(childComplexity), true

	case "Manager.notificationToken":
		if e.complexity.Manager.NotificationToken == nil {
			break
		}

		return e.complexity.Manager.NotificationToken(childComplexity), true

	case "Manager.phoneNumber":
		if e.complexity.Manager.PhoneNumber == nil {
			break
		}

		return e.complexity.Manager.PhoneNumber(childComplexity), true

	case "Manager.street":
		if e.complexity.Manager.Street == nil {
			break
		}

		return e.complexity.Manager.Street(childComplexity), true

	case "Manager.type":
		if e.complexity.Manager.Type == nil {
			break
		}

		return e.complexity.Manager.Type(childComplexity), true

	case "Manager.updatedAt":
		if e.complexity.Manager.UpdatedAt == nil {
			break
		}

		return e.complexity.Manager.UpdatedAt(childComplexity), true

	case "Manager.workingHours":
		if e.complexity.Manager.WorkingHours == nil {
			break
		}

		return e.complexity.Manager.WorkingHours(childComplexity), true

	case "Manager.zipCode":
		if e.complexity.Manager.ZipCode == nil {
			break
		}

		return e.complexity.Manager.ZipCode(childComplexity), true

	case "ManagerConnection.nodes":
		if e.complexity.ManagerConnection.Nodes == nil {
			break
		}

		return e.complexity.ManagerConnection.Nodes(childComplexity), true

	case "Mutation.activateAccount":
		if e.complexity.Mutation.ActivateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_activateAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActivateAccount(childComplexity, args["input"].(ActivateAccountInput)), true

	case "Mutation.addImageSlot":
		if e.complexity.Mutation.AddImageSlot == nil {
			break
		}

		args, err := ec.field_Mutation_addImageSlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddImageSlot(childComplexity, args["input"].(BranchImageSlotInput)), true

	case "Mutation.approveReview":
		if e.complexity.Mutation.ApproveReview == nil {
			break
		}

		args, err := ec.field_Mutation_approveReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveReview(childComplexity, args["id"].(string), args["status"].(prisma.ReviewStatus)), true

	case "Mutation.cancelAppointment":
		if e.complexity.Mutation.CancelAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_cancelAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelAppointment(childComplexity, args["input"].(CancelAppointmentInput), args["language"].(*string)), true

	case "Mutation.createAdministrator":
		if e.complexity.Mutation.CreateAdministrator == nil {
			break
		}

		args, err := ec.field_Mutation_createAdministrator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdministrator(childComplexity, args["input"].(CreateAdministratorInput)), true

	case "Mutation.createBranch":
		if e.complexity.Mutation.CreateBranch == nil {
			break
		}

		args, err := ec.field_Mutation_createBranch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBranch(childComplexity, args["input"].(CreateBranchInput), args["language"].(*string)), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(CreateCompanyInput), args["language"].(*string)), true

	case "Mutation.createCustomer":
		if e.complexity.Mutation.CreateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomer(childComplexity, args["input"].(CreateCustomerInput)), true

	case "Mutation.createEmployee":
		if e.complexity.Mutation.CreateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_createEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmployee(childComplexity, args["input"].(CreateEmployeeInput)), true

	case "Mutation.createFavorite":
		if e.complexity.Mutation.CreateFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_createFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFavorite(childComplexity, args["input"].(CreateFavoriteInput)), true

	case "Mutation.createManager":
		if e.complexity.Mutation.CreateManager == nil {
			break
		}

		args, err := ec.field_Mutation_createManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateManager(childComplexity, args["input"].(CreateManagerInput)), true

	case "Mutation.createNews":
		if e.complexity.Mutation.CreateNews == nil {
			break
		}

		args, err := ec.field_Mutation_createNews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNews(childComplexity, args["input"].(CreateNewsInput), args["language"].(*string)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(CreateProductInput), args["language"].(*string)), true

	case "Mutation.createProductCategory":
		if e.complexity.Mutation.CreateProductCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createProductCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProductCategory(childComplexity, args["input"].(CreateProductCategoryInput)), true

	case "Mutation.createProductSubCategory":
		if e.complexity.Mutation.CreateProductSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createProductSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProductSubCategory(childComplexity, args["input"].(CreateProductSubCategoryInput)), true

	case "Mutation.createService":
		if e.complexity.Mutation.CreateService == nil {
			break
		}

		args, err := ec.field_Mutation_createService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateService(childComplexity, args["input"].(CreateServiceInput), args["language"].(*string)), true

	case "Mutation.createServiceCategory":
		if e.complexity.Mutation.CreateServiceCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createServiceCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceCategory(childComplexity, args["input"].(CreateServiceCategoryInput)), true

	case "Mutation.createServiceSubCategory":
		if e.complexity.Mutation.CreateServiceSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createServiceSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceSubCategory(childComplexity, args["input"].(CreateServiceSubCategoryInput)), true

	case "Mutation.customerRequestAppointment":
		if e.complexity.Mutation.CustomerRequestAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_customerRequestAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerRequestAppointment(childComplexity, args["input"].(CustomerRequestAppointmentInput), args["language"].(*string)), true

	case "Mutation.deleteAdministrator":
		if e.complexity.Mutation.DeleteAdministrator == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdministrator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdministrator(childComplexity, args["input"].(DeleteAdministratorInput)), true

	case "Mutation.deleteBranch":
		if e.complexity.Mutation.DeleteBranch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBranch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBranch(childComplexity, args["input"].(DeleteBranchInput), args["language"].(*string)), true

	case "Mutation.deleteBranchImage":
		if e.complexity.Mutation.DeleteBranchImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBranchImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBranchImage(childComplexity, args["input"].(DeleteBranchImageInput)), true

	case "Mutation.deleteCompany":
		if e.complexity.Mutation.DeleteCompany == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompany(childComplexity, args["input"].(DeleteCompanyInput), args["language"].(*string)), true

	case "Mutation.deleteCustomer":
		if e.complexity.Mutation.DeleteCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomer(childComplexity, args["input"].(DeleteCustomerInput)), true

	case "Mutation.deleteEmployee":
		if e.complexity.Mutation.DeleteEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmployee(childComplexity, args["input"].(DeleteEmployeeInput)), true

	case "Mutation.deleteFavorite":
		if e.complexity.Mutation.DeleteFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFavorite(childComplexity, args["input"].(DeleteFavoriteInput)), true

	case "Mutation.deleteManager":
		if e.complexity.Mutation.DeleteManager == nil {
			break
		}

		args, err := ec.field_Mutation_deleteManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteManager(childComplexity, args["input"].(DeleteManagerInput)), true

	case "Mutation.deleteNews":
		if e.complexity.Mutation.DeleteNews == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNews(childComplexity, args["input"].(DeleteNewsInput), args["language"].(*string)), true

	case "Mutation.deleteProduct":
		if e.complexity.Mutation.DeleteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProduct(childComplexity, args["input"].(DeleteProductInput), args["language"].(*string)), true

	case "Mutation.deleteProductCategory":
		if e.complexity.Mutation.DeleteProductCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProductCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProductCategory(childComplexity, args["input"].(DeleteProductCategoryInput)), true

	case "Mutation.deleteProductSubCategory":
		if e.complexity.Mutation.DeleteProductSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProductSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProductSubCategory(childComplexity, args["input"].(DeleteProductSubCategoryInput)), true

	case "Mutation.deleteReview":
		if e.complexity.Mutation.DeleteReview == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReview(childComplexity, args["id"].(string)), true

	case "Mutation.deleteService":
		if e.complexity.Mutation.DeleteService == nil {
			break
		}

		args, err := ec.field_Mutation_deleteService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteService(childComplexity, args["input"].(DeleteServiceInput), args["language"].(*string)), true

	case "Mutation.deleteServiceCategory":
		if e.complexity.Mutation.DeleteServiceCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteServiceCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceCategory(childComplexity, args["input"].(DeleteServiceCategoryInput)), true

	case "Mutation.deleteServiceSubCategory":
		if e.complexity.Mutation.DeleteServiceSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteServiceSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceSubCategory(childComplexity, args["input"].(DeleteServiceSubCategoryInput)), true

	case "Mutation.EditEmployeeAvailability":
		if e.complexity.Mutation.EditEmployeeAvailability == nil {
			break
		}

		args, err := ec.field_Mutation_EditEmployeeAvailability_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditEmployeeAvailability(childComplexity, args["input"].(EditEmployeeAvailabilityInput)), true

	case "Mutation.forceAppointmentNotification":
		if e.complexity.Mutation.ForceAppointmentNotification == nil {
			break
		}

		args, err := ec.field_Mutation_forceAppointmentNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ForceAppointmentNotification(childComplexity, args["input"].(*ForceAppointmentNotificationInput)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(LoginInput)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.newEmailTemplate":
		if e.complexity.Mutation.NewEmailTemplate == nil {
			break
		}

		return e.complexity.Mutation.NewEmailTemplate(childComplexity), true

	case "Mutation.notifyAllCustomers":
		if e.complexity.Mutation.NotifyAllCustomers == nil {
			break
		}

		args, err := ec.field_Mutation_notifyAllCustomers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotifyAllCustomers(childComplexity, args["input"].(NotifyAllCustomersInput)), true

	case "Mutation.register":
		if e.complexity.Mutation.Register == nil {
			break
		}

		args, err := ec.field_Mutation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Register(childComplexity, args["input"].(RegisterInput)), true

	case "Mutation.removeViewerProfilePicture":
		if e.complexity.Mutation.RemoveViewerProfilePicture == nil {
			break
		}

		return e.complexity.Mutation.RemoveViewerProfilePicture(childComplexity), true

	case "Mutation.replaceExistingProduct":
		if e.complexity.Mutation.ReplaceExistingProduct == nil {
			break
		}

		args, err := ec.field_Mutation_replaceExistingProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceExistingProduct(childComplexity, args["input"].(ReplaceExistingProductInput), args["language"].(*string)), true

	case "Mutation.replaceExistingService":
		if e.complexity.Mutation.ReplaceExistingService == nil {
			break
		}

		args, err := ec.field_Mutation_replaceExistingService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceExistingService(childComplexity, args["input"].(ReplaceExistingServiceInput), args["language"].(*string)), true

	case "Mutation.requestActivationLink":
		if e.complexity.Mutation.RequestActivationLink == nil {
			break
		}

		args, err := ec.field_Mutation_requestActivationLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestActivationLink(childComplexity, args["input"].(RequestActivationLinkInput)), true

	case "Mutation.requestPasswordReset":
		if e.complexity.Mutation.RequestPasswordReset == nil {
			break
		}

		args, err := ec.field_Mutation_requestPasswordReset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestPasswordReset(childComplexity, args["input"].(RequestPasswordResetInput)), true

	case "Mutation.rescheduleAppointment":
		if e.complexity.Mutation.RescheduleAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_rescheduleAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RescheduleAppointment(childComplexity, args["input"].(RescheduleAppointmentInput), args["language"].(*string)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["input"].(ResetPasswordInput)), true

	case "Mutation.sendInviteEmail":
		if e.complexity.Mutation.SendInviteEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendInviteEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendInviteEmail(childComplexity, args["input"].(SendInviteEmailInput), args["language"].(*string)), true

	case "Mutation.sendUserNotification":
		if e.complexity.Mutation.SendUserNotification == nil {
			break
		}

		args, err := ec.field_Mutation_sendUserNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendUserNotification(childComplexity, args["input"].(*SendUserNotificationInput)), true

	case "Mutation.setProductActive":
		if e.complexity.Mutation.SetProductActive == nil {
			break
		}

		args, err := ec.field_Mutation_setProductActive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetProductActive(childComplexity, args["input"].(SetProductActiveInput)), true

	case "Mutation.setServiceActive":
		if e.complexity.Mutation.SetServiceActive == nil {
			break
		}

		args, err := ec.field_Mutation_setServiceActive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetServiceActive(childComplexity, args["input"].(SetServiceActiveInput)), true

	case "Mutation.staffApproveAppointment":
		if e.complexity.Mutation.StaffApproveAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_staffApproveAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffApproveAppointment(childComplexity, args["input"].(StaffApproveAppointmentInput), args["language"].(*string)), true

	case "Mutation.staffCreateAppointment":
		if e.complexity.Mutation.StaffCreateAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_staffCreateAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffCreateAppointment(childComplexity, args["input"].(StaffCreateAppointmentInput), args["language"].(*string)), true

	case "Mutation.staffUpdateAppointment":
		if e.complexity.Mutation.StaffUpdateAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_staffUpdateAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffUpdateAppointment(childComplexity, args["input"].(StaffUpdateAppointmentInput), args["language"].(*string)), true

	case "Mutation.subscribeNewsletter":
		if e.complexity.Mutation.SubscribeNewsletter == nil {
			break
		}

		args, err := ec.field_Mutation_subscribeNewsletter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubscribeNewsletter(childComplexity, args["email"].(string), args["branchId"].(string)), true

	case "Mutation.triggerTestNotification":
		if e.complexity.Mutation.TriggerTestNotification == nil {
			break
		}

		return e.complexity.Mutation.TriggerTestNotification(childComplexity), true

	case "Mutation.updateAdministrator":
		if e.complexity.Mutation.UpdateAdministrator == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdministrator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdministrator(childComplexity, args["input"].(UpdateAdministratorInput)), true

	case "Mutation.updateAfterImage":
		if e.complexity.Mutation.UpdateAfterImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateAfterImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAfterImage(childComplexity, args["input"].(UpdateAppointmentImageInput), args["language"].(*string)), true

	case "Mutation.updateBeforeImage":
		if e.complexity.Mutation.UpdateBeforeImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateBeforeImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBeforeImage(childComplexity, args["input"].(UpdateAppointmentImageInput), args["language"].(*string)), true

	case "Mutation.updateBranch":
		if e.complexity.Mutation.UpdateBranch == nil {
			break
		}

		args, err := ec.field_Mutation_updateBranch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBranch(childComplexity, args["input"].(UpdateBranchInput), args["language"].(*string)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["input"].(UpdateCompanyInput), args["language"].(*string)), true

	case "Mutation.updateCustomer":
		if e.complexity.Mutation.UpdateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomer(childComplexity, args["input"].(UpdateCustomerInput)), true

	case "Mutation.updateEmailTemplate":
		if e.complexity.Mutation.UpdateEmailTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmailTemplate(childComplexity, args["input"].(UpdateEmailTemplateInput), args["language"].(*string)), true

	case "Mutation.updateEmployee":
		if e.complexity.Mutation.UpdateEmployee == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmployee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmployee(childComplexity, args["input"].(UpdateEmployeeInput)), true

	case "Mutation.updateManager":
		if e.complexity.Mutation.UpdateManager == nil {
			break
		}

		args, err := ec.field_Mutation_updateManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateManager(childComplexity, args["input"].(UpdateManagerInput)), true

	case "Mutation.updateNews":
		if e.complexity.Mutation.UpdateNews == nil {
			break
		}

		args, err := ec.field_Mutation_updateNews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNews(childComplexity, args["input"].(UpdateNewsInput), args["language"].(*string)), true

	case "Mutation.updateNotificationToken":
		if e.complexity.Mutation.UpdateNotificationToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateNotificationToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNotificationToken(childComplexity, args["input"].(UpdateNotificationTokenInput)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["input"].(UpdateProductInput), args["language"].(*string)), true

	case "Mutation.updateProductCategory":
		if e.complexity.Mutation.UpdateProductCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateProductCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProductCategory(childComplexity, args["input"].(UpdateProductCategoryInput)), true

	case "Mutation.updateProductSubCategory":
		if e.complexity.Mutation.UpdateProductSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateProductSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProductSubCategory(childComplexity, args["input"].(UpdateProductSubCategoryInput)), true

	case "Mutation.updateService":
		if e.complexity.Mutation.UpdateService == nil {
			break
		}

		args, err := ec.field_Mutation_updateService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateService(childComplexity, args["input"].(UpdateServiceInput), args["language"].(*string)), true

	case "Mutation.updateServiceCategory":
		if e.complexity.Mutation.UpdateServiceCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateServiceCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateServiceCategory(childComplexity, args["input"].(UpdateServiceCategoryInput)), true

	case "Mutation.updateServiceSubCategory":
		if e.complexity.Mutation.UpdateServiceSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateServiceSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateServiceSubCategory(childComplexity, args["input"].(UpdateServiceSubCategoryInput)), true

	case "Mutation.updateViewer":
		if e.complexity.Mutation.UpdateViewer == nil {
			break
		}

		args, err := ec.field_Mutation_updateViewer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateViewer(childComplexity, args["input"].(UpdateViewerInput)), true

	case "Mutation.uploadViewerProfilePicture":
		if e.complexity.Mutation.UploadViewerProfilePicture == nil {
			break
		}

		args, err := ec.field_Mutation_uploadViewerProfilePicture_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadViewerProfilePicture(childComplexity, args["upload"].(graphql.Upload)), true

	case "Mutation.upsertBranchOpeningHour":
		if e.complexity.Mutation.UpsertBranchOpeningHour == nil {
			break
		}

		args, err := ec.field_Mutation_upsertBranchOpeningHour_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertBranchOpeningHour(childComplexity, args["input"].(UpsertBranchOpeningHourInput)), true

	case "Mutation.upsertReview":
		if e.complexity.Mutation.UpsertReview == nil {
			break
		}

		args, err := ec.field_Mutation_upsertReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertReview(childComplexity, args["input"].(UpsertReviewInput)), true

	case "News.branch":
		if e.complexity.News.Branch == nil {
			break
		}

		return e.complexity.News.Branch(childComplexity), true

	case "News.createdAt":
		if e.complexity.News.CreatedAt == nil {
			break
		}

		return e.complexity.News.CreatedAt(childComplexity), true

	case "News.id":
		if e.complexity.News.ID == nil {
			break
		}

		return e.complexity.News.ID(childComplexity), true

	case "News.image":
		if e.complexity.News.Image == nil {
			break
		}

		return e.complexity.News.Image(childComplexity), true

	case "News.title":
		if e.complexity.News.Title == nil {
			break
		}

		return e.complexity.News.Title(childComplexity), true

	case "News.updatedAt":
		if e.complexity.News.UpdatedAt == nil {
			break
		}

		return e.complexity.News.UpdatedAt(childComplexity), true

	case "NewsConnection.nodes":
		if e.complexity.NewsConnection.Nodes == nil {
			break
		}

		return e.complexity.NewsConnection.Nodes(childComplexity), true

	case "NotificationPayload.result":
		if e.complexity.NotificationPayload.Result == nil {
			break
		}

		return e.complexity.NotificationPayload.Result(childComplexity), true

	case "NotificationPayload.userId":
		if e.complexity.NotificationPayload.UserID == nil {
			break
		}

		return e.complexity.NotificationPayload.UserID(childComplexity), true

	case "NotificationsPayload.payloads":
		if e.complexity.NotificationsPayload.Payloads == nil {
			break
		}

		return e.complexity.NotificationsPayload.Payloads(childComplexity), true

	case "OpeningHours.formatted":
		if e.complexity.OpeningHours.Formatted == nil {
			break
		}

		return e.complexity.OpeningHours.Formatted(childComplexity), true

	case "OpeningHours.raw":
		if e.complexity.OpeningHours.Raw == nil {
			break
		}

		return e.complexity.OpeningHours.Raw(childComplexity), true

	case "OrderHistoryPayload.products":
		if e.complexity.OrderHistoryPayload.Products == nil {
			break
		}

		return e.complexity.OrderHistoryPayload.Products(childComplexity), true

	case "OrderHistoryPayload.services":
		if e.complexity.OrderHistoryPayload.Services == nil {
			break
		}

		return e.complexity.OrderHistoryPayload.Services(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PhoneNumber.href":
		if e.complexity.PhoneNumber.Href == nil {
			break
		}

		return e.complexity.PhoneNumber.Href(childComplexity), true

	case "PhoneNumber.raw":
		if e.complexity.PhoneNumber.Raw == nil {
			break
		}

		return e.complexity.PhoneNumber.Raw(childComplexity), true

	case "Price.displayValue":
		if e.complexity.Price.DisplayValue == nil {
			break
		}

		return e.complexity.Price.DisplayValue(childComplexity), true

	case "Price.value":
		if e.complexity.Price.Value == nil {
			break
		}

		return e.complexity.Price.Value(childComplexity), true

	case "Product.active":
		if e.complexity.Product.Active == nil {
			break
		}

		return e.complexity.Product.Active(childComplexity), true

	case "Product.attributes":
		if e.complexity.Product.Attributes == nil {
			break
		}

		return e.complexity.Product.Attributes(childComplexity), true

	case "Product.capacity":
		if e.complexity.Product.Capacity == nil {
			break
		}

		return e.complexity.Product.Capacity(childComplexity), true

	case "Product.category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.createdAt":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.desc":
		if e.complexity.Product.Desc == nil {
			break
		}

		return e.complexity.Product.Desc(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.image":
		if e.complexity.Product.Image == nil {
			break
		}

		return e.complexity.Product.Image(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.price":
		if e.complexity.Product.Price == nil {
			break
		}

		return e.complexity.Product.Price(childComplexity), true

	case "Product.reviewAggregations":
		if e.complexity.Product.ReviewAggregations == nil {
			break
		}

		return e.complexity.Product.ReviewAggregations(childComplexity), true

	case "Product.reviews":
		if e.complexity.Product.Reviews == nil {
			break
		}

		return e.complexity.Product.Reviews(childComplexity), true

	case "Product.subCategory":
		if e.complexity.Product.SubCategory == nil {
			break
		}

		return e.complexity.Product.SubCategory(childComplexity), true

	case "Product.updatedAt":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "Product.viewerCanReview":
		if e.complexity.Product.ViewerCanReview == nil {
			break
		}

		return e.complexity.Product.ViewerCanReview(childComplexity), true

	case "Product.viewerReview":
		if e.complexity.Product.ViewerReview == nil {
			break
		}

		return e.complexity.Product.ViewerReview(childComplexity), true

	case "ProductCategory.createdAt":
		if e.complexity.ProductCategory.CreatedAt == nil {
			break
		}

		return e.complexity.ProductCategory.CreatedAt(childComplexity), true

	case "ProductCategory.id":
		if e.complexity.ProductCategory.ID == nil {
			break
		}

		return e.complexity.ProductCategory.ID(childComplexity), true

	case "ProductCategory.name":
		if e.complexity.ProductCategory.Name == nil {
			break
		}

		return e.complexity.ProductCategory.Name(childComplexity), true

	case "ProductCategory.products":
		if e.complexity.ProductCategory.Products == nil {
			break
		}

		return e.complexity.ProductCategory.Products(childComplexity), true

	case "ProductCategory.subCategories":
		if e.complexity.ProductCategory.SubCategories == nil {
			break
		}

		return e.complexity.ProductCategory.SubCategories(childComplexity), true

	case "ProductCategory.updatedAt":
		if e.complexity.ProductCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductCategory.UpdatedAt(childComplexity), true

	case "ProductConnection.nodes":
		if e.complexity.ProductConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductConnection.Nodes(childComplexity), true

	case "ProductReview.createdAt":
		if e.complexity.ProductReview.CreatedAt == nil {
			break
		}

		return e.complexity.ProductReview.CreatedAt(childComplexity), true

	case "ProductReview.customer":
		if e.complexity.ProductReview.Customer == nil {
			break
		}

		return e.complexity.ProductReview.Customer(childComplexity), true

	case "ProductReview.id":
		if e.complexity.ProductReview.ID == nil {
			break
		}

		return e.complexity.ProductReview.ID(childComplexity), true

	case "ProductReview.product":
		if e.complexity.ProductReview.Product == nil {
			break
		}

		return e.complexity.ProductReview.Product(childComplexity), true

	case "ProductReview.stars":
		if e.complexity.ProductReview.Stars == nil {
			break
		}

		return e.complexity.ProductReview.Stars(childComplexity), true

	case "ProductReview.status":
		if e.complexity.ProductReview.Status == nil {
			break
		}

		return e.complexity.ProductReview.Status(childComplexity), true

	case "ProductReview.text":
		if e.complexity.ProductReview.Text == nil {
			break
		}

		return e.complexity.ProductReview.Text(childComplexity), true

	case "ProductReview.title":
		if e.complexity.ProductReview.Title == nil {
			break
		}

		return e.complexity.ProductReview.Title(childComplexity), true

	case "ProductReview.type":
		if e.complexity.ProductReview.Type == nil {
			break
		}

		return e.complexity.ProductReview.Type(childComplexity), true

	case "ProductReview.updatedAt":
		if e.complexity.ProductReview.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductReview.UpdatedAt(childComplexity), true

	case "ProductReviewConnection.nodes":
		if e.complexity.ProductReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.ProductReviewConnection.Nodes(childComplexity), true

	case "ProductServiceAttribute.key":
		if e.complexity.ProductServiceAttribute.Key == nil {
			break
		}

		return e.complexity.ProductServiceAttribute.Key(childComplexity), true

	case "ProductServiceAttribute.name":
		if e.complexity.ProductServiceAttribute.Name == nil {
			break
		}

		return e.complexity.ProductServiceAttribute.Name(childComplexity), true

	case "ProductServiceAttribute.value":
		if e.complexity.ProductServiceAttribute.Value == nil {
			break
		}

		return e.complexity.ProductServiceAttribute.Value(childComplexity), true

	case "ProductSubCategory.category":
		if e.complexity.ProductSubCategory.Category == nil {
			break
		}

		return e.complexity.ProductSubCategory.Category(childComplexity), true

	case "ProductSubCategory.createdAt":
		if e.complexity.ProductSubCategory.CreatedAt == nil {
			break
		}

		return e.complexity.ProductSubCategory.CreatedAt(childComplexity), true

	case "ProductSubCategory.id":
		if e.complexity.ProductSubCategory.ID == nil {
			break
		}

		return e.complexity.ProductSubCategory.ID(childComplexity), true

	case "ProductSubCategory.name":
		if e.complexity.ProductSubCategory.Name == nil {
			break
		}

		return e.complexity.ProductSubCategory.Name(childComplexity), true

	case "ProductSubCategory.products":
		if e.complexity.ProductSubCategory.Products == nil {
			break
		}

		return e.complexity.ProductSubCategory.Products(childComplexity), true

	case "ProductSubCategory.updatedAt":
		if e.complexity.ProductSubCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductSubCategory.UpdatedAt(childComplexity), true

	case "PublicStaffMemberConnection.nodes":
		if e.complexity.PublicStaffMemberConnection.Nodes == nil {
			break
		}

		return e.complexity.PublicStaffMemberConnection.Nodes(childComplexity), true

	case "Query.appointment":
		if e.complexity.Query.Appointment == nil {
			break
		}

		args, err := ec.field_Query_appointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Appointment(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.appointmentTimeslots":
		if e.complexity.Query.AppointmentTimeslots == nil {
			break
		}

		args, err := ec.field_Query_appointmentTimeslots_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppointmentTimeslots(childComplexity, args["input"].(TimeslotInput)), true

	case "Query.branch":
		if e.complexity.Query.Branch == nil {
			break
		}

		args, err := ec.field_Query_branch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Branch(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.branches":
		if e.complexity.Query.Branches == nil {
			break
		}

		args, err := ec.field_Query_branches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Branches(childComplexity, args["input"].(BranchesInput), args["language"].(*string)), true

	case "Query.companies":
		if e.complexity.Query.Companies == nil {
			break
		}

		args, err := ec.field_Query_companies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Companies(childComplexity, args["language"].(*string)), true

	case "Query.company":
		if e.complexity.Query.Company == nil {
			break
		}

		args, err := ec.field_Query_company_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Company(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.currentCompany":
		if e.complexity.Query.CurrentCompany == nil {
			break
		}

		return e.complexity.Query.CurrentCompany(childComplexity), true

	case "Query.customer":
		if e.complexity.Query.Customer == nil {
			break
		}

		args, err := ec.field_Query_customer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customer(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.customers":
		if e.complexity.Query.Customers == nil {
			break
		}

		args, err := ec.field_Query_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customers(childComplexity, args["input"].(CustomerInput), args["language"].(*string)), true

	case "Query.emailTemplate":
		if e.complexity.Query.EmailTemplate == nil {
			break
		}

		args, err := ec.field_Query_emailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailTemplate(childComplexity, args["input"].(EmailTemplateInput), args["language"].(*string)), true

	case "Query.emailTemplates":
		if e.complexity.Query.EmailTemplates == nil {
			break
		}

		args, err := ec.field_Query_emailTemplates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailTemplates(childComplexity, args["language"].(*string)), true

	case "Query.employee":
		if e.complexity.Query.Employee == nil {
			break
		}

		args, err := ec.field_Query_employee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employee(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.employees":
		if e.complexity.Query.Employees == nil {
			break
		}

		args, err := ec.field_Query_employees_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Employees(childComplexity, args["input"].(EmployeeInput), args["language"].(*string)), true

	case "Query.favorites":
		if e.complexity.Query.Favorites == nil {
			break
		}

		args, err := ec.field_Query_favorites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Favorites(childComplexity, args["language"].(*string)), true

	case "Query.isValidPasswordToken":
		if e.complexity.Query.IsValidPasswordToken == nil {
			break
		}

		args, err := ec.field_Query_isValidPasswordToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IsValidPasswordToken(childComplexity, args["token"].(string)), true

	case "Query.orderHistory":
		if e.complexity.Query.OrderHistory == nil {
			break
		}

		args, err := ec.field_Query_orderHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrderHistory(childComplexity, args["language"].(*string)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.ProductCategories":
		if e.complexity.Query.ProductCategories == nil {
			break
		}

		return e.complexity.Query.ProductCategories(childComplexity), true

	case "Query.productCategory":
		if e.complexity.Query.ProductCategory == nil {
			break
		}

		args, err := ec.field_Query_productCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductCategory(childComplexity, args["id"].(string)), true

	case "Query.productSubCategories":
		if e.complexity.Query.ProductSubCategories == nil {
			break
		}

		return e.complexity.Query.ProductSubCategories(childComplexity), true

	case "Query.productSubCategory":
		if e.complexity.Query.ProductSubCategory == nil {
			break
		}

		args, err := ec.field_Query_productSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductSubCategory(childComplexity, args["id"].(string)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["input"].(ProductInput), args["language"].(*string)), true

	case "Query.publicStaffMembers":
		if e.complexity.Query.PublicStaffMembers == nil {
			break
		}

		args, err := ec.field_Query_publicStaffMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PublicStaffMembers(childComplexity, args["input"].(StaffMemberInput)), true

	case "Query.relatedCompanies":
		if e.complexity.Query.RelatedCompanies == nil {
			break
		}

		args, err := ec.field_Query_relatedCompanies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RelatedCompanies(childComplexity, args["email"].(string), args["password"].(string), args["language"].(*string)), true

	case "Query.reviews":
		if e.complexity.Query.Reviews == nil {
			break
		}

		args, err := ec.field_Query_reviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reviews(childComplexity, args["input"].(ReviewInput), args["language"].(*string)), true

	case "Query.service":
		if e.complexity.Query.Service == nil {
			break
		}

		args, err := ec.field_Query_service_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Service(childComplexity, args["id"].(string), args["language"].(*string)), true

	case "Query.serviceCategories":
		if e.complexity.Query.ServiceCategories == nil {
			break
		}

		return e.complexity.Query.ServiceCategories(childComplexity), true

	case "Query.serviceCategory":
		if e.complexity.Query.ServiceCategory == nil {
			break
		}

		args, err := ec.field_Query_serviceCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceCategory(childComplexity, args["id"].(string)), true

	case "Query.serviceSubCategories":
		if e.complexity.Query.ServiceSubCategories == nil {
			break
		}

		return e.complexity.Query.ServiceSubCategories(childComplexity), true

	case "Query.serviceSubCategory":
		if e.complexity.Query.ServiceSubCategory == nil {
			break
		}

		args, err := ec.field_Query_serviceSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceSubCategory(childComplexity, args["id"].(string)), true

	case "Query.services":
		if e.complexity.Query.Services == nil {
			break
		}

		args, err := ec.field_Query_services_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Services(childComplexity, args["input"].(ServiceInput), args["language"].(*string)), true

	case "Query.staffMember":
		if e.complexity.Query.StaffMember == nil {
			break
		}

		args, err := ec.field_Query_staffMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StaffMember(childComplexity, args["id"].(*string)), true

	case "Query.staffMembers":
		if e.complexity.Query.StaffMembers == nil {
			break
		}

		args, err := ec.field_Query_staffMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StaffMembers(childComplexity, args["input"].(StaffMemberInput)), true

	case "Query.viewer":
		if e.complexity.Query.Viewer == nil {
			break
		}

		return e.complexity.Query.Viewer(childComplexity), true

	case "RawOpeningHour.afternoon":
		if e.complexity.RawOpeningHour.Afternoon == nil {
			break
		}

		return e.complexity.RawOpeningHour.Afternoon(childComplexity), true

	case "RawOpeningHour.break":
		if e.complexity.RawOpeningHour.Break == nil {
			break
		}

		return e.complexity.RawOpeningHour.Break(childComplexity), true

	case "RawOpeningHour.closed":
		if e.complexity.RawOpeningHour.Closed == nil {
			break
		}

		return e.complexity.RawOpeningHour.Closed(childComplexity), true

	case "RawOpeningHour.day":
		if e.complexity.RawOpeningHour.Day == nil {
			break
		}

		return e.complexity.RawOpeningHour.Day(childComplexity), true

	case "RawOpeningHour.forenoon":
		if e.complexity.RawOpeningHour.Forenoon == nil {
			break
		}

		return e.complexity.RawOpeningHour.Forenoon(childComplexity), true

	case "RawOpeningHour.fullDay":
		if e.complexity.RawOpeningHour.FullDay == nil {
			break
		}

		return e.complexity.RawOpeningHour.FullDay(childComplexity), true

	case "RawOpeningHour.shortDay":
		if e.complexity.RawOpeningHour.ShortDay == nil {
			break
		}

		return e.complexity.RawOpeningHour.ShortDay(childComplexity), true

	case "RawWorkingHours.afternoon":
		if e.complexity.RawWorkingHours.Afternoon == nil {
			break
		}

		return e.complexity.RawWorkingHours.Afternoon(childComplexity), true

	case "RawWorkingHours.break":
		if e.complexity.RawWorkingHours.Break == nil {
			break
		}

		return e.complexity.RawWorkingHours.Break(childComplexity), true

	case "RawWorkingHours.day":
		if e.complexity.RawWorkingHours.Day == nil {
			break
		}

		return e.complexity.RawWorkingHours.Day(childComplexity), true

	case "RawWorkingHours.forenoon":
		if e.complexity.RawWorkingHours.Forenoon == nil {
			break
		}

		return e.complexity.RawWorkingHours.Forenoon(childComplexity), true

	case "RawWorkingHours.fullDay":
		if e.complexity.RawWorkingHours.FullDay == nil {
			break
		}

		return e.complexity.RawWorkingHours.FullDay(childComplexity), true

	case "RawWorkingHours.notWorking":
		if e.complexity.RawWorkingHours.NotWorking == nil {
			break
		}

		return e.complexity.RawWorkingHours.NotWorking(childComplexity), true

	case "RawWorkingHours.shortDay":
		if e.complexity.RawWorkingHours.ShortDay == nil {
			break
		}

		return e.complexity.RawWorkingHours.ShortDay(childComplexity), true

	case "RegisterPayload.status":
		if e.complexity.RegisterPayload.Status == nil {
			break
		}

		return e.complexity.RegisterPayload.Status(childComplexity), true

	case "RelatedCompanies.companies":
		if e.complexity.RelatedCompanies.Companies == nil {
			break
		}

		return e.complexity.RelatedCompanies.Companies(childComplexity), true

	case "RelatedCompanies.isAdmin":
		if e.complexity.RelatedCompanies.IsAdmin == nil {
			break
		}

		return e.complexity.RelatedCompanies.IsAdmin(childComplexity), true

	case "RemoveViewerProfilePicturePayload.image":
		if e.complexity.RemoveViewerProfilePicturePayload.Image == nil {
			break
		}

		return e.complexity.RemoveViewerProfilePicturePayload.Image(childComplexity), true

	case "RemoveViewerProfilePicturePayload.user":
		if e.complexity.RemoveViewerProfilePicturePayload.User == nil {
			break
		}

		return e.complexity.RemoveViewerProfilePicturePayload.User(childComplexity), true

	case "ReplaceExistingProductsPayload.productSubCategory":
		if e.complexity.ReplaceExistingProductsPayload.ProductSubCategory == nil {
			break
		}

		return e.complexity.ReplaceExistingProductsPayload.ProductSubCategory(childComplexity), true

	case "ReplaceExistingServicePayload.serviceSubCategory":
		if e.complexity.ReplaceExistingServicePayload.ServiceSubCategory == nil {
			break
		}

		return e.complexity.ReplaceExistingServicePayload.ServiceSubCategory(childComplexity), true

	case "RequestActivationLinkPayload.status":
		if e.complexity.RequestActivationLinkPayload.Status == nil {
			break
		}

		return e.complexity.RequestActivationLinkPayload.Status(childComplexity), true

	case "RequestPasswordResetPayload.status":
		if e.complexity.RequestPasswordResetPayload.Status == nil {
			break
		}

		return e.complexity.RequestPasswordResetPayload.Status(childComplexity), true

	case "RescheduleAppointmentPayload.appointment":
		if e.complexity.RescheduleAppointmentPayload.Appointment == nil {
			break
		}

		return e.complexity.RescheduleAppointmentPayload.Appointment(childComplexity), true

	case "ResetPasswordPayload.status":
		if e.complexity.ResetPasswordPayload.Status == nil {
			break
		}

		return e.complexity.ResetPasswordPayload.Status(childComplexity), true

	case "ReviewAggregations.averageRating":
		if e.complexity.ReviewAggregations.AverageRating == nil {
			break
		}

		return e.complexity.ReviewAggregations.AverageRating(childComplexity), true

	case "ReviewAggregations.countPerStar":
		if e.complexity.ReviewAggregations.CountPerStar == nil {
			break
		}

		return e.complexity.ReviewAggregations.CountPerStar(childComplexity), true

	case "ReviewAggregations.totalCount":
		if e.complexity.ReviewAggregations.TotalCount == nil {
			break
		}

		return e.complexity.ReviewAggregations.TotalCount(childComplexity), true

	case "ReviewConnection.nodes":
		if e.complexity.ReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.ReviewConnection.Nodes(childComplexity), true

	case "SendEmailPayload.status":
		if e.complexity.SendEmailPayload.Status == nil {
			break
		}

		return e.complexity.SendEmailPayload.Status(childComplexity), true

	case "Service.active":
		if e.complexity.Service.Active == nil {
			break
		}

		return e.complexity.Service.Active(childComplexity), true

	case "Service.attributes":
		if e.complexity.Service.Attributes == nil {
			break
		}

		return e.complexity.Service.Attributes(childComplexity), true

	case "Service.category":
		if e.complexity.Service.Category == nil {
			break
		}

		return e.complexity.Service.Category(childComplexity), true

	case "Service.createdAt":
		if e.complexity.Service.CreatedAt == nil {
			break
		}

		return e.complexity.Service.CreatedAt(childComplexity), true

	case "Service.desc":
		if e.complexity.Service.Desc == nil {
			break
		}

		return e.complexity.Service.Desc(childComplexity), true

	case "Service.duration":
		if e.complexity.Service.Duration == nil {
			break
		}

		return e.complexity.Service.Duration(childComplexity), true

	case "Service.genderTarget":
		if e.complexity.Service.GenderTarget == nil {
			break
		}

		return e.complexity.Service.GenderTarget(childComplexity), true

	case "Service.id":
		if e.complexity.Service.ID == nil {
			break
		}

		return e.complexity.Service.ID(childComplexity), true

	case "Service.image":
		if e.complexity.Service.Image == nil {
			break
		}

		return e.complexity.Service.Image(childComplexity), true

	case "Service.name":
		if e.complexity.Service.Name == nil {
			break
		}

		return e.complexity.Service.Name(childComplexity), true

	case "Service.price":
		if e.complexity.Service.Price == nil {
			break
		}

		return e.complexity.Service.Price(childComplexity), true

	case "Service.reviewAggregations":
		if e.complexity.Service.ReviewAggregations == nil {
			break
		}

		return e.complexity.Service.ReviewAggregations(childComplexity), true

	case "Service.reviews":
		if e.complexity.Service.Reviews == nil {
			break
		}

		return e.complexity.Service.Reviews(childComplexity), true

	case "Service.subCategory":
		if e.complexity.Service.SubCategory == nil {
			break
		}

		return e.complexity.Service.SubCategory(childComplexity), true

	case "Service.updatedAt":
		if e.complexity.Service.UpdatedAt == nil {
			break
		}

		return e.complexity.Service.UpdatedAt(childComplexity), true

	case "Service.viewerCanReview":
		if e.complexity.Service.ViewerCanReview == nil {
			break
		}

		return e.complexity.Service.ViewerCanReview(childComplexity), true

	case "Service.viewerReview":
		if e.complexity.Service.ViewerReview == nil {
			break
		}

		return e.complexity.Service.ViewerReview(childComplexity), true

	case "ServiceCategory.createdAt":
		if e.complexity.ServiceCategory.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceCategory.CreatedAt(childComplexity), true

	case "ServiceCategory.id":
		if e.complexity.ServiceCategory.ID == nil {
			break
		}

		return e.complexity.ServiceCategory.ID(childComplexity), true

	case "ServiceCategory.name":
		if e.complexity.ServiceCategory.Name == nil {
			break
		}

		return e.complexity.ServiceCategory.Name(childComplexity), true

	case "ServiceCategory.services":
		if e.complexity.ServiceCategory.Services == nil {
			break
		}

		return e.complexity.ServiceCategory.Services(childComplexity), true

	case "ServiceCategory.subCategories":
		if e.complexity.ServiceCategory.SubCategories == nil {
			break
		}

		return e.complexity.ServiceCategory.SubCategories(childComplexity), true

	case "ServiceCategory.updatedAt":
		if e.complexity.ServiceCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.ServiceCategory.UpdatedAt(childComplexity), true

	case "ServiceConnection.nodes":
		if e.complexity.ServiceConnection.Nodes == nil {
			break
		}

		return e.complexity.ServiceConnection.Nodes(childComplexity), true

	case "ServiceReview.createdAt":
		if e.complexity.ServiceReview.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceReview.CreatedAt(childComplexity), true

	case "ServiceReview.customer":
		if e.complexity.ServiceReview.Customer == nil {
			break
		}

		return e.complexity.ServiceReview.Customer(childComplexity), true

	case "ServiceReview.id":
		if e.complexity.ServiceReview.ID == nil {
			break
		}

		return e.complexity.ServiceReview.ID(childComplexity), true

	case "ServiceReview.service":
		if e.complexity.ServiceReview.Service == nil {
			break
		}

		return e.complexity.ServiceReview.Service(childComplexity), true

	case "ServiceReview.stars":
		if e.complexity.ServiceReview.Stars == nil {
			break
		}

		return e.complexity.ServiceReview.Stars(childComplexity), true

	case "ServiceReview.status":
		if e.complexity.ServiceReview.Status == nil {
			break
		}

		return e.complexity.ServiceReview.Status(childComplexity), true

	case "ServiceReview.text":
		if e.complexity.ServiceReview.Text == nil {
			break
		}

		return e.complexity.ServiceReview.Text(childComplexity), true

	case "ServiceReview.title":
		if e.complexity.ServiceReview.Title == nil {
			break
		}

		return e.complexity.ServiceReview.Title(childComplexity), true

	case "ServiceReview.type":
		if e.complexity.ServiceReview.Type == nil {
			break
		}

		return e.complexity.ServiceReview.Type(childComplexity), true

	case "ServiceReview.updatedAt":
		if e.complexity.ServiceReview.UpdatedAt == nil {
			break
		}

		return e.complexity.ServiceReview.UpdatedAt(childComplexity), true

	case "ServiceReviewConnection.nodes":
		if e.complexity.ServiceReviewConnection.Nodes == nil {
			break
		}

		return e.complexity.ServiceReviewConnection.Nodes(childComplexity), true

	case "ServiceSubCategory.category":
		if e.complexity.ServiceSubCategory.Category == nil {
			break
		}

		return e.complexity.ServiceSubCategory.Category(childComplexity), true

	case "ServiceSubCategory.createdAt":
		if e.complexity.ServiceSubCategory.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceSubCategory.CreatedAt(childComplexity), true

	case "ServiceSubCategory.id":
		if e.complexity.ServiceSubCategory.ID == nil {
			break
		}

		return e.complexity.ServiceSubCategory.ID(childComplexity), true

	case "ServiceSubCategory.name":
		if e.complexity.ServiceSubCategory.Name == nil {
			break
		}

		return e.complexity.ServiceSubCategory.Name(childComplexity), true

	case "ServiceSubCategory.services":
		if e.complexity.ServiceSubCategory.Services == nil {
			break
		}

		return e.complexity.ServiceSubCategory.Services(childComplexity), true

	case "ServiceSubCategory.updatedAt":
		if e.complexity.ServiceSubCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.ServiceSubCategory.UpdatedAt(childComplexity), true

	case "Session.id":
		if e.complexity.Session.ID == nil {
			break
		}

		return e.complexity.Session.ID(childComplexity), true

	case "Session.token":
		if e.complexity.Session.Token == nil {
			break
		}

		return e.complexity.Session.Token(childComplexity), true

	case "SetProductActivePayload.product":
		if e.complexity.SetProductActivePayload.Product == nil {
			break
		}

		return e.complexity.SetProductActivePayload.Product(childComplexity), true

	case "SetServiceActivePayload.service":
		if e.complexity.SetServiceActivePayload.Service == nil {
			break
		}

		return e.complexity.SetServiceActivePayload.Service(childComplexity), true

	case "StaffApproveAppointmentPayload.appointment":
		if e.complexity.StaffApproveAppointmentPayload.Appointment == nil {
			break
		}

		return e.complexity.StaffApproveAppointmentPayload.Appointment(childComplexity), true

	case "StaffCreateAppointmentPayload.appointment":
		if e.complexity.StaffCreateAppointmentPayload.Appointment == nil {
			break
		}

		return e.complexity.StaffCreateAppointmentPayload.Appointment(childComplexity), true

	case "StaffMemberConnection.nodes":
		if e.complexity.StaffMemberConnection.Nodes == nil {
			break
		}

		return e.complexity.StaffMemberConnection.Nodes(childComplexity), true

	case "StaffUpdateAppointmentPayload.appointment":
		if e.complexity.StaffUpdateAppointmentPayload.Appointment == nil {
			break
		}

		return e.complexity.StaffUpdateAppointmentPayload.Appointment(childComplexity), true

	case "SubscribeNewsletterPayload.id":
		if e.complexity.SubscribeNewsletterPayload.ID == nil {
			break
		}

		return e.complexity.SubscribeNewsletterPayload.ID(childComplexity), true

	case "SubscribeNewsletterPayload.uniqueEmailID":
		if e.complexity.SubscribeNewsletterPayload.UniqueEmailID == nil {
			break
		}

		return e.complexity.SubscribeNewsletterPayload.UniqueEmailID(childComplexity), true

	case "Timerange.end":
		if e.complexity.Timerange.End == nil {
			break
		}

		return e.complexity.Timerange.End(childComplexity), true

	case "Timerange.start":
		if e.complexity.Timerange.Start == nil {
			break
		}

		return e.complexity.Timerange.Start(childComplexity), true

	case "TimeslotRange.end":
		if e.complexity.TimeslotRange.End == nil {
			break
		}

		return e.complexity.TimeslotRange.End(childComplexity), true

	case "TimeslotRange.start":
		if e.complexity.TimeslotRange.Start == nil {
			break
		}

		return e.complexity.TimeslotRange.Start(childComplexity), true

	case "Timeslots.duration":
		if e.complexity.Timeslots.Duration == nil {
			break
		}

		return e.complexity.Timeslots.Duration(childComplexity), true

	case "Timeslots.price":
		if e.complexity.Timeslots.Price == nil {
			break
		}

		return e.complexity.Timeslots.Price(childComplexity), true

	case "Timeslots.ranges":
		if e.complexity.Timeslots.Ranges == nil {
			break
		}

		return e.complexity.Timeslots.Ranges(childComplexity), true

	case "UpdateAdministratorPayload.administrator":
		if e.complexity.UpdateAdministratorPayload.Administrator == nil {
			break
		}

		return e.complexity.UpdateAdministratorPayload.Administrator(childComplexity), true

	case "UpdateAppointmentImagePayload.appointment":
		if e.complexity.UpdateAppointmentImagePayload.Appointment == nil {
			break
		}

		return e.complexity.UpdateAppointmentImagePayload.Appointment(childComplexity), true

	case "UpdateBranchPayload.branch":
		if e.complexity.UpdateBranchPayload.Branch == nil {
			break
		}

		return e.complexity.UpdateBranchPayload.Branch(childComplexity), true

	case "UpdateCompanyPayload.company":
		if e.complexity.UpdateCompanyPayload.Company == nil {
			break
		}

		return e.complexity.UpdateCompanyPayload.Company(childComplexity), true

	case "UpdateCustomerPayload.customer":
		if e.complexity.UpdateCustomerPayload.Customer == nil {
			break
		}

		return e.complexity.UpdateCustomerPayload.Customer(childComplexity), true

	case "UpdateEmailTemplatePayload.template":
		if e.complexity.UpdateEmailTemplatePayload.Template == nil {
			break
		}

		return e.complexity.UpdateEmailTemplatePayload.Template(childComplexity), true

	case "UpdateEmployeePayload.employee":
		if e.complexity.UpdateEmployeePayload.Employee == nil {
			break
		}

		return e.complexity.UpdateEmployeePayload.Employee(childComplexity), true

	case "UpdateManagerPayload.manager":
		if e.complexity.UpdateManagerPayload.Manager == nil {
			break
		}

		return e.complexity.UpdateManagerPayload.Manager(childComplexity), true

	case "UpdateNewsPayload.news":
		if e.complexity.UpdateNewsPayload.News == nil {
			break
		}

		return e.complexity.UpdateNewsPayload.News(childComplexity), true

	case "UpdateProductCategoryPayload.category":
		if e.complexity.UpdateProductCategoryPayload.Category == nil {
			break
		}

		return e.complexity.UpdateProductCategoryPayload.Category(childComplexity), true

	case "UpdateProductPayload.product":
		if e.complexity.UpdateProductPayload.Product == nil {
			break
		}

		return e.complexity.UpdateProductPayload.Product(childComplexity), true

	case "UpdateProductSubCategoryPayload.subCategory":
		if e.complexity.UpdateProductSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.UpdateProductSubCategoryPayload.SubCategory(childComplexity), true

	case "UpdateServiceCategoryPayload.category":
		if e.complexity.UpdateServiceCategoryPayload.Category == nil {
			break
		}

		return e.complexity.UpdateServiceCategoryPayload.Category(childComplexity), true

	case "UpdateServicePayload.service":
		if e.complexity.UpdateServicePayload.Service == nil {
			break
		}

		return e.complexity.UpdateServicePayload.Service(childComplexity), true

	case "UpdateServiceSubCategoryPayload.subCategory":
		if e.complexity.UpdateServiceSubCategoryPayload.SubCategory == nil {
			break
		}

		return e.complexity.UpdateServiceSubCategoryPayload.SubCategory(childComplexity), true

	case "UpdateViewerPayload.user":
		if e.complexity.UpdateViewerPayload.User == nil {
			break
		}

		return e.complexity.UpdateViewerPayload.User(childComplexity), true

	case "UploadViewerProfilePicturePayload.image":
		if e.complexity.UploadViewerProfilePicturePayload.Image == nil {
			break
		}

		return e.complexity.UploadViewerProfilePicturePayload.Image(childComplexity), true

	case "UploadViewerProfilePicturePayload.user":
		if e.complexity.UploadViewerProfilePicturePayload.User == nil {
			break
		}

		return e.complexity.UploadViewerProfilePicturePayload.User(childComplexity), true

	case "UpsertBranchOpeningHourPayload.branch":
		if e.complexity.UpsertBranchOpeningHourPayload.Branch == nil {
			break
		}

		return e.complexity.UpsertBranchOpeningHourPayload.Branch(childComplexity), true

	case "UpsertReviewPayload.review":
		if e.complexity.UpsertReviewPayload.Review == nil {
			break
		}

		return e.complexity.UpsertReviewPayload.Review(childComplexity), true

	case "WorkingHours.formatted":
		if e.complexity.WorkingHours.Formatted == nil {
			break
		}

		return e.complexity.WorkingHours.Formatted(childComplexity), true

	case "WorkingHours.raw":
		if e.complexity.WorkingHours.Raw == nil {
			break
		}

		return e.complexity.WorkingHours.Raw(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "api/resolver/appointment/appointment.graphqls", Input: `type Appointment implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	desc: String
	start: String!
	end: String
	price: Price!

	"The appointment duration in minutes. Gets automatically calculated from the appointment's start and end time."
	duration: Int

	status: AppointmentStatus!

	"An internal note only accessable by staff."
	note: String
	beforeImage: Image
	afterImage: Image

	employee: Employee!
	customer: Customer!

	review: AppointmentReview
	viewerReview: AppointmentReview
	viewerCanReview: Boolean

	products: [AppointmentProduct!]!
	services: [Service!]!
}

type AppointmentProduct {
	item: Product!
	count: Int!
}

type AppointmentConnection {
	nodes: [Appointment!]!
}

input AppointmentInput {
	"Order by field and direction."
	order: AppointmentOrderByInput

	"Filter by status."
	status: [AppointmentStatus!]

	start: DateFilter
	end: DateFilter
}

input AppointmentOrderByInput {
	field: AppointmentOrderByFields!
	direction: OrderByDirectionInput!
}

enum AppointmentOrderByFields {
	createdAt
	updatedAt
	start
	price
	status
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/branch/branch-opening-hours.graphqls", Input: `"A wrapper for an opening hour."
type OpeningHours {
	formatted: [FormattedOpeningHour!]!
	raw: [RawOpeningHour!]!
}

"A human-formatted array to display opening hours. Equal days are summarized."
type FormattedOpeningHour implements OpeningHourBase {
	"The day key, e.g. ` + "`" + `MO` + "`" + ` or ` + "`" + `MO-FR` + "`" + `"
	key: String!

	closed: Boolean!
	break: Boolean!
	shortDay: String!
	fullDay: String!

	"A formatted value containing either the opening time for that day or a translated 'closed' message."
	value: String!
}

"A raw array to display opening hours by day."
type RawOpeningHour implements OpeningHourBase {
	day: DayOfWeek!

	closed: Boolean!
	break: Boolean!
	shortDay: String!
	fullDay: String!

	forenoon: Timerange
	afternoon: Timerange
}

type Timerange {
	start: Time!
	end: Time!
}

interface OpeningHourBase {
	"A formatted 2-digit day, e.g. ` + "`" + `Mo` + "`" + `"
	shortDay: String!

	"A formatted full day name, e.g. ` + "`" + `Monday` + "`" + `"
	fullDay: String!

	"Indicates whether the branch is completely closed on that day."
	closed: Boolean!

	"Indicates whether the branch has separate times for forenoon and afternoon."
	break: Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/branch/branch-slot.graphqls", Input: `type BranchImageSlot {
	id: ID!
	createdAt: String!
	updatedAt: String!

	slotNumber: Int!

	branch: Branch!

	imageUrl: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/branch/branch.graphqls", Input: `type Branch implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	name: String
	welcomeMessage: String
	phoneNumber: PhoneNumber
	address: String

	"TODO: multiple images - slot based (max 10 slots)"
	images: [Image]

	websiteUrl: String
	navigationLink: String
	sharingRedirectUrl: String
	imprint: String

	"TODO: Facebook, Tiktok, Instagram (Optional)"
	facebookLink: String,
	tiktokLink: String,
	instagramLink: String,

	company: Company!

	openingHours: OpeningHours!

	logo: Image
	appTheme: String

	news: [News!]!

	slots: [BranchImageSlot]

	smtpSendHost: String
	smtpSendPort: String
	smtpUsername: String
	smtpPassword: String
	fromEmail: String

	reviews: AppointmentReviewConnection!
	reviewAggregations: ReviewAggregations

	mailchimpApiKey: String
	mailchimpListId: String
	mailchimpCredentialsValid: Boolean
}

type BranchConnection {
	nodes: [Branch!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/company/company.graphqls", Input: `type Company implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	name: String
	aliases: [String!]
	customUrls: [String!]
	sharingRedirectUrl: String

	logo: Image
	appTheme: String
	pwaShortName: String!
	pwaIcon: Image
	pwaThemeColor: String!
	pwaBackgroundColor: String!

	branches(pagination: PaginationInput): BranchConnection!
}

type CompanyConnection {
	nodes: [Company!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/connections.graphqls", Input: `"PageInfo contains info about the current page."
type PageInfo {
	"Indicates whether a next page exists. Defaults to false if not navigating forward."
	hasNextPage: Boolean!
}

"PaginationInput is an input solely used for cursor-based, relay-like pagination."
input PaginationInput {
	"Only return results after specified cursor."
	after: Cursor
	"Limit the result to a given value. Value defaults to 10 and can be between 1 and 100."
	limit: Int = 10
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/email_template/email_template.graphqls", Input: `type EmailTemplate {
	id: ID!
	createdAt: String!
	updatedAt: String!

	name: String
	content: String
	title: String
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/favorite/favorite.graphqls", Input: `type Favorite implements Node {
	id: ID!

	user: IUser!
	product: Product
	service: Service
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/misc.graphqls", Input: `"An object with an ID."
interface Node {
	"The unique identifier for the node."
	id: ID!
}

"Order nodes by a given direction."
enum OrderByDirectionInput {
	"""
	Ascending.
	For example: ` + "`" + `1, 2, 3, 4` + "`" + `.
	Date example: ` + "`" + `yesterday, today, tomorrow` + "`" + `.
	"""
	ASC

	"""
	Descending.
	For example: ` + "`" + `4, 3, 2, 1` + "`" + `.
	Date example: ` + "`" + `today, yesterday, 2 days ago, 3 days ago` + "`" + `.
	"""
	DESC
}

input DateFilter {
	gt: Time
	gte: Time
	lt: Time
	lte: Time
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/appointment.graphqls", Input: `input CreateAppointmentData {
	start: Time!
	desc: String
	services: [ConnectAppointmentService]
	products: [ConnectAppointmentProduct]
	beforeImage: Upload
}

input ConnectAppointmentService {
	id: ID!
}

input ConnectAppointmentProduct {
	id: ID!
	count: Int!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/cancel.graphqls", Input: `extend type Mutation {
	"""
	Cancel an appointment. Customers and employees can cancel their own appointments and company managers can cancel
	all appointments in a branch.
	"""
	cancelAppointment(
		input: CancelAppointmentInput!
		language: String
	): CancelAppointmentPayload!
}

input CancelAppointmentInput {
	id: ID!
}

type CancelAppointmentPayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/customer-request.graphqls", Input: `extend type Mutation {
	"Request an appointment by a customer and the current viewer context. Before invoking this mutation, appointmentTimeslots should be queried first."
	customerRequestAppointment(
		input: CustomerRequestAppointmentInput!
		language: String
	): CustomerRequestAppointmentPayload!
}

input CustomerRequestAppointmentInput {
	"The branch."
	branch: ID!

	"The employee. When unspecified, the next best employee will be automatically choosen."
	employee: ID

	data: CreateAppointmentData!
}

type CustomerRequestAppointmentPayload {
	message: String

}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/force_appointment_notification.graphqls", Input: `extend type Mutation {
	forceAppointmentNotification(input: ForceAppointmentNotificationInput): NotificationPayload!
}

input ForceAppointmentNotificationInput {
	appointment: ID!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/reschedule-apointment.graphqls", Input: `extend type Mutation {
	"""
	Reschedule an appointment, customer can reschedule an appointment
	"""
	rescheduleAppointment(
		input: RescheduleAppointmentInput!
		language: String
	): RescheduleAppointmentPayload!
}

input RescheduleAppointmentInput {
	id: ID!
	newDate: Time!
	employeeID: ID
}

type RescheduleAppointmentPayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/staff-approve.graphqls", Input: `extend type Mutation {
	"Approve an appointment. Only invokable by staff. This will set the appointment status to APPROVED."
	staffApproveAppointment(
		input: StaffApproveAppointmentInput!
		language: String
	): StaffApproveAppointmentPayload!
}

input StaffApproveAppointmentInput {
	"The appointment ID."
	id: ID!

	patch: StaffApproveAppointmentPatch
}

input StaffApproveAppointmentPatch {
	"Optionally override the existing description."
	desc: String

	"Optionally set a note."
	note: String
}

type StaffApproveAppointmentPayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/staff-create.graphqls", Input: `extend type Mutation {
	"Create an appointment by a staff and the current viewer context. Before invoking this mutation, appointmentTimeslots should be queried first."
	staffCreateAppointment(
		input: StaffCreateAppointmentInput!
		language: String
	): StaffCreateAppointmentPayload!
}

input StaffCreateAppointmentInput {
	"The branch."
	branch: ID!

	"The customer."
	customer: ID!

	"The employee. When unspecified, defaults to the viewer."
	employee: ID

	data: CreateAppointmentData!
}

type StaffCreateAppointmentPayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/staff-update.graphqls", Input: `extend type Mutation {
	staffUpdateAppointment(
		input: StaffUpdateAppointmentInput!
		language: String
	): StaffUpdateAppointmentPayload!
}

input StaffUpdateAppointmentInput {
	"The appointment ID."
	id: ID!

	patch: StaffUpdateAppointmentPatch!
}

input StaffUpdateAppointmentPatch {
	note: String
	desc: String
}

type StaffUpdateAppointmentPayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/appointment/update-images.graphqls", Input: `extend type Mutation {
	updateBeforeImage(input: UpdateAppointmentImageInput!, language: String): UpdateAppointmentImagePayload!
	updateAfterImage(input: UpdateAppointmentImageInput!, language: String): UpdateAppointmentImagePayload!
}

input UpdateAppointmentImageInput {
	appointment: ID!
	image: Upload!
}

type UpdateAppointmentImagePayload {
	appointment: Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/activate-account.graphqls", Input: `extend type Mutation {
	activateAccount(input: ActivateAccountInput!): ActivateAccountPayload!
}

input ActivateAccountInput {
	token: String!
}

type ActivateAccountPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/auth.graphqls", Input: `interface AuthPayload {
	session: Session!
	user: IUser!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/login.graphqls", Input: `extend type Mutation {
	login(input: LoginInput!): LoginPayload!
}

input LoginInput {
	email: String!
	password: String!
	company: ID
}

type LoginPayload implements AuthPayload {
	session: Session!
	user: IUser!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/logout.graphqls", Input: `extend type Mutation {
	logout: LogoutPayload!
}

type LogoutPayload {
	"Session is always nil, this is useful for automatically clearing the session out of the GraphQL store."
	session: Session
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/register.graphqls", Input: `extend type Mutation {
	register(input: RegisterInput!): RegisterPayload!
}

input RegisterInput {
	email: String!
	password: String!
	firstName: String!
	lastName: String!
	phoneNumber: String!
	gender: Gender!
	birthday: String,
	company: ID
}

type RegisterPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/request-activation-link.graphqls", Input: `extend type Mutation {
	requestActivationLink(input: RequestActivationLinkInput!): RequestActivationLinkPayload!
}

input RequestActivationLinkInput {
	email: String!
	company: ID
}

type RequestActivationLinkPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/request-password-reset.graphqls", Input: `extend type Mutation {
	requestPasswordReset(input: RequestPasswordResetInput!): RequestPasswordResetPayload!
}

input RequestPasswordResetInput {
	email: String!
	company: ID
}

type RequestPasswordResetPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/auth/reset-password.graphqls", Input: `extend type Mutation {
	resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!
}

input ResetPasswordInput {
	token: String!
	password: String!
}

type ResetPasswordPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/branch/branch-input-slot.graphqls", Input: `input BranchImageSlotInput {
	slotNumber: Int
	slotID: ID
	branchID: ID!
	newImage: Upload!
	new: Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/branch/create.graphqls", Input: `extend type Mutation {
	"Creates a branch. Can only be invoked by a company manager."
	createBranch(
		input: CreateBranchInput!
		language: String
	): CreateBranchPayload!
}

input CreateBranchInput {
	company: ID!
	data: CreateBranchData!
}

input CreateBranchData {
	name: String!
	phoneNumber: String
	address: String
	welcomeMessage: String
	images: [Upload]
	imagesSlot: [BranchImageSlotInput]
	logo: Upload
	appTheme: String
	facebookLink: String,
	tiktokLink: String,
	instagramLink: String,
	smtpSendHost: String
	smtpSendPort: String
	smtpUsername: String
	smtpPassword: String
	fromEmail: String
	websiteUrl: String!
	navigationLink: String
	sharingRedirectUrl: String
	mailchimpApiKey: String
	mailchimpListId: String
	imprint: String!
}

type CreateBranchPayload {
	branch: Branch!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/branch/delete.graphqls", Input: `extend type Mutation {
	"Deletes a branch. Can only be invoked by a company manager."
	deleteBranch(input: DeleteBranchInput!, language: String): DeleteBranchPayload!
	deleteBranchImage(input: DeleteBranchImageInput!): DeleteBranchPayload!
}

input DeleteBranchInput {
	id: ID!
}

type DeleteBranchPayload {
	branch: Branch!
}

input DeleteBranchImageInput {
	slotID: ID!
	branchID: ID!
}

`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/branch/update.graphqls", Input: `extend type Mutation {
	"Updates a branch. Can only be invoked by a company manager."
	updateBranch(input: UpdateBranchInput!, language: String): UpdateBranchPayload!
	addImageSlot(input: BranchImageSlotInput!): UpdateBranchPayload!
}

input UpdateBranchInput {
	id: ID!
	patch: UpdateBranchPatch!
}

input UpdateBranchPatch {
	name: String
	phoneNumber: String
	address: String
	welcomeMessage: String
	images: [Upload]
	imagesSlot: [BranchImageSlotInput]
	logo: Upload
	appTheme: String
	facebookLink: String,
	tiktokLink: String,
	instagramLink: String,
	smtpSendHost: String
	smtpSendPort: String
	smtpUsername: String
	smtpPassword: String
	fromEmail: String
	websiteUrl: String
	navigationLink: String
	sharingRedirectUrl: String
	mailchimpApiKey: String
	mailchimpListId: String
	imprint: String
}

type UpdateBranchPayload {
	branch: Branch!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/branch/upsert-opening-hour.graphqls", Input: `extend type Mutation {
	"Upsert a branch opening hour. If nothing is set at the beginning, the day defaults to being closed."
	upsertBranchOpeningHour(input: UpsertBranchOpeningHourInput!): UpsertBranchOpeningHourPayload!
}

input UpsertBranchOpeningHourInput {
	"The branch which should be updated."
	branch: ID!

	patch: UpsertBranchOpeningHourPatch!
}

input UpsertBranchOpeningHourPatch {
	day: DayOfWeek!

	closed: Boolean! = false
	break: Boolean! = false

	forenoon: TimerangeInput
	afternoon: TimerangeInput
}

input TimerangeInput {
	start: Time!
	end: Time!
}

type UpsertBranchOpeningHourPayload {
	branch: Branch!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/company/create.graphqls", Input: `extend type Mutation {
	"Creates a company. Can only be invoked by an administrator."
	createCompany(
		input: CreateCompanyInput!
		language: String
	): CreateCompanyPayload!
}

input CreateCompanyInput {
	data: CreateCompanyData!
}

input CreateCompanyData {
	name: String
	aliases: [String!]
	customUrls: [String!]
	sharingRedirectUrl: String
	logo: Upload
	appTheme: String
	pwaShortName: String!
	pwaIcon: Upload
	pwaThemeColor: String!
	pwaBackgroundColor: String!
}

type CreateCompanyPayload {
	company: Company!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/company/delete.graphqls", Input: `extend type Mutation {
	"Deletes a company. Can only be invoked by an administrator."
	deleteCompany(input: DeleteCompanyInput!, language: String): DeleteCompanyPayload!
}

input DeleteCompanyInput {
	id: ID!
}

type DeleteCompanyPayload {
	company: Company!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/company/update.graphqls", Input: `extend type Mutation {
	"Updates a company. Can only be invoked by an administrator."
	updateCompany(
		input: UpdateCompanyInput!
		language: String
	): UpdateCompanyPayload!
}

input UpdateCompanyInput {
	id: ID!
	patch: UpdateCompanyData!
}

input UpdateCompanyData {
	name: String
	aliases: [String!]
	customUrls: [String!]
	sharingRedirectUrl: String
	logo: Upload
	appTheme: String
	pwaShortName: String
	pwaIcon: Upload
	pwaThemeColor: String
	pwaBackgroundColor: String
}

type UpdateCompanyPayload {
	company: Company!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/email_template/new_template.graphqls", Input: `extend type Mutation {
	"A free mutation for creating email templates"
	newEmailTemplate: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/email_template/send_invite_email.graphqls", Input: `extend type Mutation {
	"Sends an invite email to users. Can only be invoked by a company manager or employee."
	sendInviteEmail(input: SendInviteEmailInput!, language: String): SendEmailPayload!
}

input SendInviteEmailInput {
	email: String!
	name: String!
	gender: Gender!
	branch: ID!
}

type SendEmailPayload {
	status: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/email_template/update.graphqls", Input: `extend type Mutation {
	"Updates an email template. Can only be invoked by an administrator."
	updateEmailTemplate(input: UpdateEmailTemplateInput!, language: String): UpdateEmailTemplatePayload!
}

input UpdateEmailTemplateInput {
	id: ID!
	patch: UpdateEmailTemplatePatch!
}

input UpdateEmailTemplatePatch {
	title: String
	content: String
}

type UpdateEmailTemplatePayload {
	template: EmailTemplate!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/favorite/create.graphqls", Input: `extend type Mutation {
	"Mark a product or service as favorite for a user."
	createFavorite(
		input: CreateFavoriteInput!
	): CreateFavoritePayload!
}

input CreateFavoriteInput {
	data: CreateFavoriteData!
}

input CreateFavoriteData {
	product: ID
	service: ID
}

type CreateFavoritePayload {
	favorite: Favorite!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/favorite/delete.graphqls", Input: `extend type Mutation {
	"Unmark a product or service as favorite for a user."
	deleteFavorite(input: DeleteFavoriteInput!): DeleteFavoritePayload!
}

input DeleteFavoriteInput {
	id: ID!
}

type DeleteFavoritePayload {
	favorite: Favorite!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/mailchimp/subscribeNewsletter.graphqls", Input: `extend type Mutation {
	subscribeNewsletter(
		email: String!
		branchId: ID!
	): SubscribeNewsletterPayload!
}

type SubscribeNewsletterPayload {
	id: String
	uniqueEmailID: String
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/mutation.graphqls", Input: `type Mutation
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/news/create.graphqls", Input: `extend type Mutation {
	"Creates a news item. Can only be invoked by a company manager."
	createNews(
		input: CreateNewsInput!
		language: String
	): CreateNewsPayload!
}

input CreateNewsInput {
	branch: ID!
	data: CreateNewsData!
}

input CreateNewsData {
	title: String
	image: Upload
}

type CreateNewsPayload {
	news: News!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/news/delete.graphqls", Input: `extend type Mutation {
	"Deletes a news item. Can only be invoked by a company manager."
	deleteNews(input: DeleteNewsInput!, language: String): DeleteNewsPayload!
}

input DeleteNewsInput {
	id: ID!
}

type DeleteNewsPayload {
	news: News!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/news/update.graphqls", Input: `extend type Mutation {
	"Updates a news item. Can only be invoked by a company manager."
	updateNews(input: UpdateNewsInput!, language: String): UpdateNewsPayload!
}

input UpdateNewsInput {
	id: ID!
	patch: UpdateNewsPatch!
}

input UpdateNewsPatch {
	title: String
	image: Upload
}

type UpdateNewsPayload {
	news: News!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/notification/notification.graphqls", Input: `type NotificationPayload {
	userId: ID!
	result: String!
}

type NotificationsPayload {
	payloads: [NotificationPayload!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/notification/notify_all_customers.graphqls", Input: `extend type Mutation {
	notifyAllCustomers(input: NotifyAllCustomersInput!): NotificationsPayload
}

input NotifyAllCustomersInput {
	title: String!
	text: String!
	company: ID
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/notification/send_user_notification.graphqls", Input: `extend type Mutation {
	sendUserNotification(input: SendUserNotificationInput): NotificationsPayload
}

input SendUserNotificationInput {
	title: String!
	text: String!
	users: [ID!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/notification/trigger_test_notification.graphqls", Input: `extend type Mutation {
	triggerTestNotification: NotificationPayload!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product/create.graphqls", Input: `extend type Mutation {
	"Creates a product. Can only be invoked by a company manager."
	createProduct(
		input: CreateProductInput!
		language: String
	): CreateProductPayload!
}

input CreateProductInput {
	branch: ID!
	data: CreateProductData!
}

input CreateProductData {
	name: String!
	desc: String
	price: Float!
	capacity: String
	category: ID!
	subcategory: ID!
	image: Upload
	attributes: [ProductServiceAttributeInput!]
}

type CreateProductPayload {
	product: Product!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product/delete.graphqls", Input: `extend type Mutation {
	"Deletes a product. Can only be invoked by a company manager."
	deleteProduct(input: DeleteProductInput!, language: String): DeleteProductPayload!
}

input DeleteProductInput {
	id: ID!
}

type DeleteProductPayload {
	product: Product!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product/replace-existing-product.graphqls", Input: `extend type Mutation {

	replaceExistingProduct(input: ReplaceExistingProductInput!, language: String): ReplaceExistingProductsPayload!
}

input ReplaceExistingProductInput {
	categoryID: ID!
	subCategoryID: ID!
	products: [String!]!
}

type ReplaceExistingProductsPayload {
	productSubCategory: ProductSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product/set-product-inactive.graphqls", Input: `extend type Mutation {

	setProductActive(input: SetProductActiveInput!): SetProductActivePayload!
}

input SetProductActiveInput {
	active: Boolean!
	productID: ID!
}

type SetProductActivePayload {
	product: Product!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product/update.graphqls", Input: `extend type Mutation {
	"Updates a product. Can only be invoked by a company manager."
	updateProduct(input: UpdateProductInput!, language: String): UpdateProductPayload!
}

input UpdateProductInput {
	id: ID!
	patch: UpdateProductPatch!
}

input UpdateProductPatch {
	name: String
	desc: String
	price: Float
	capacity: String
	category: ID
	subCategory: ID
	image: Upload
	attributes: [ProductServiceAttributeInput!]
	removeAttributes: [String!]
}

type UpdateProductPayload {
	product: Product!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_category/create.graphqls", Input: `extend type Mutation {
	createProductCategory(
		input: CreateProductCategoryInput!
	): CreateProductCategoryPayload!
}

input CreateProductCategoryInput {
	data: CreateProductCategoryData!
}

input CreateProductCategoryData {
	name: String
}

type CreateProductCategoryPayload {
	category: ProductCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_category/delete.graphqls", Input: `extend type Mutation {
	deleteProductCategory(input: DeleteProductCategoryInput!): DeleteProductCategoryPayload!
}

input DeleteProductCategoryInput {
	id: ID!
}

type DeleteProductCategoryPayload {
	category: ProductCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_category/update.graphqls", Input: `extend type Mutation {
	updateProductCategory(
		input: UpdateProductCategoryInput!
	): UpdateProductCategoryPayload!
}

input UpdateProductCategoryInput {
	id: ID!
	patch: UpdateProductCategoryData!
}

input UpdateProductCategoryData {
	name: String
}

type UpdateProductCategoryPayload {
	category: ProductCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_sub_category/create.graphqls", Input: `extend type Mutation {
	createProductSubCategory(
		input: CreateProductSubCategoryInput!
	): CreateProductSubCategoryPayload!
}

input CreateProductSubCategoryInput {
	data: CreateProductSubCategoryData!
}

input CreateProductSubCategoryData {
	productCategoryId: ID!
	name: String
}

type CreateProductSubCategoryPayload {
	subCategory: ProductSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_sub_category/delete.graphqls", Input: `extend type Mutation {
	deleteProductSubCategory(input: DeleteProductSubCategoryInput!): DeleteProductSubCategoryPayload!
}

input DeleteProductSubCategoryInput {
	id: ID!
}

type DeleteProductSubCategoryPayload {
	subCategory: ProductSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/product_sub_category/update.graphqls", Input: `extend type Mutation {
	updateProductSubCategory(
		input: UpdateProductSubCategoryInput!
	): UpdateProductSubCategoryPayload!
}

input UpdateProductSubCategoryInput {
	id: ID!
	patch: UpdateProductSubCategoryData!
}

input UpdateProductSubCategoryData {
	name: String
}

type UpdateProductSubCategoryPayload {
	subCategory: ProductSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/review/review.graphqls", Input: `extend type Mutation {
	"Creates a review of the specified type. Can only be invoked by customers."
	upsertReview(
		input: UpsertReviewInput!
	): UpsertReviewPayload!
	approveReview(
		id: ID!
		status: ReviewStatus!
	): ApproveReviewPayload!
	deleteReview(
		id: ID!
	): DeleteReviewPayload!
}

input UpsertReviewInput {
	appointment: ID
	product: ID
	service: ID
	review: ID
	data: UpdateReviewPatch!
}

type UpsertReviewPayload {
	review: IReview!
}

type ApproveReviewPayload {
	review: IReview!
}

type DeleteReviewPayload {
	review: IReview!
}

input CreateReviewData {
	stars: Float!
	title: String!
	text: String!
}

input UpdateReviewPatch {
	stars: Float
	title: String
	text: String
	status: ReviewStatus
}

input CreateAppointmentReviewInput {
	appointment: ID!
	review: CreateReviewData!
}

input CreateProductReviewInput {
	product: ID!
	review: CreateReviewData!
}

input CreateServiceReviewInput {
	service: ID!
	review: CreateReviewData!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service/create.graphqls", Input: `extend type Mutation {
	"Creates a service. Can only be invoked by a company manager."
	createService(
		input: CreateServiceInput!
		language: String
	): CreateServicePayload!
}

input CreateServiceInput {
	branch: ID!
	data: CreateServiceData!
}

input CreateServiceData {
	name: String!
	desc: String
	price: Float!
	"The duration of this service in minutes."
	duration: Int!
	category: ID!
	subcategory: ID!
	genderTarget: GenderTarget!
	image: Upload
	attributes: [ProductServiceAttributeInput!]
}

type CreateServicePayload {
	service: Service!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service/delete.graphqls", Input: `extend type Mutation {
	"Deletes a service. Can only be invoked by a company manager."
	deleteService(input: DeleteServiceInput!, language: String): DeleteServicePayload!
}

input DeleteServiceInput {
	id: ID!
}

type DeleteServicePayload {
	service: Service!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service/replace-existing-service.graphqls", Input: `extend type Mutation {

	replaceExistingService(input: ReplaceExistingServiceInput!, language: String): ReplaceExistingServicePayload!
}

input ReplaceExistingServiceInput {
	categoryID: ID!
	subCategoryID: ID!
	services: [String!]!
}

type ReplaceExistingServicePayload {
	serviceSubCategory: ServiceSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service/set-service-inactive.graphqls", Input: `extend type Mutation {

	setServiceActive(input: SetServiceActiveInput!): SetServiceActivePayload!
}

input SetServiceActiveInput {
	active: Boolean!
	serviceID: ID!
}

type SetServiceActivePayload {
	service: Service!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service/update.graphqls", Input: `extend type Mutation {
	"Updates a service. Can only be invoked by a company manager."
	updateService(input: UpdateServiceInput!, language: String): UpdateServicePayload!
}

input UpdateServiceInput {
	id: ID!
	patch: UpdateServicePatch!
}

input UpdateServicePatch {
	name: String
	desc: String
	price: Float
	"The duration of this service in minutes."
	duration: Int
	genderTarget: GenderTarget
	category: ID
	subcategory: ID
	image: Upload
	attributes: [ProductServiceAttributeInput!]
	removeAttributes: [String!]
}

type UpdateServicePayload {
	service: Service!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_category/create.graphqls", Input: `extend type Mutation {
	createServiceCategory(
		input: CreateServiceCategoryInput!
	): CreateServiceCategoryPayload!
}

input CreateServiceCategoryInput {
	data: CreateServiceCategoryData!
}

input CreateServiceCategoryData {
	name: String
}

type CreateServiceCategoryPayload {
	category: ServiceCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_category/delete.graphqls", Input: `extend type Mutation {
	deleteServiceCategory(input: DeleteServiceCategoryInput!): DeleteServiceCategoryPayload!
}

input DeleteServiceCategoryInput {
	id: ID!
}

type DeleteServiceCategoryPayload {
	category: ServiceCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_category/update.graphqls", Input: `extend type Mutation {
	updateServiceCategory(
		input: UpdateServiceCategoryInput!
	): UpdateServiceCategoryPayload!
}

input UpdateServiceCategoryInput {
	id: ID!
	patch: UpdateServiceCategoryData!
}

input UpdateServiceCategoryData {
	name: String
}

type UpdateServiceCategoryPayload {
	category: ServiceCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_sub_category/create.graphqls", Input: `extend type Mutation {
	createServiceSubCategory(
		input: CreateServiceSubCategoryInput!
	): CreateServiceSubCategoryPayload!
}

input CreateServiceSubCategoryInput {
	data: CreateServiceSubCategoryData!
}

input CreateServiceSubCategoryData {
	categoryId: ID!
	name: String
}

type CreateServiceSubCategoryPayload {
	subCategory: ServiceSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_sub_category/delete.graphqls", Input: `extend type Mutation {
	deleteServiceSubCategory(input: DeleteServiceSubCategoryInput!): DeleteServiceSubCategoryPayload!
}

input DeleteServiceSubCategoryInput {
	id: ID!
}

type DeleteServiceSubCategoryPayload {
	subCategory: ServiceSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/service_sub_category/update.graphqls", Input: `extend type Mutation {
	updateServiceSubCategory(
		input: UpdateServiceSubCategoryInput!
	): UpdateServiceSubCategoryPayload!
}

input UpdateServiceSubCategoryInput {
	id: ID!
	patch: UpdateServiceSubCategoryData!
}

input UpdateServiceSubCategoryData {
	name: String
}

type UpdateServiceSubCategoryPayload {
	subCategory: ServiceSubCategory!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/administrator/create.graphqls", Input: `extend type Mutation {
	"Creates a administrator. Can only be invoked by an administrator."
	createAdministrator(
		input: CreateAdministratorInput!
	): CreateAdministratorPayload!
}

input CreateAdministratorInput {
	user: CreateUserData!
}

type CreateAdministratorPayload {
	administrator: Administrator!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/administrator/delete.graphqls", Input: `extend type Mutation {
	"Deletes a administrator. Can only be invoked by an administrator."
	deleteAdministrator(input: DeleteAdministratorInput!): DeleteAdministratorPayload!
}

input DeleteAdministratorInput {
	id: ID!
}

type DeleteAdministratorPayload {
	administrator: Administrator!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/administrator/update.graphqls", Input: `extend type Mutation {
	"Updates a administrator. Can only be invoked by an administrator."
	updateAdministrator(input: UpdateAdministratorInput!): UpdateAdministratorPayload!
}

input UpdateAdministratorInput {
	id: ID!
	patch: UpdateUserPatch!
}

type UpdateAdministratorPayload {
	administrator: Administrator!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/customer/create.graphqls", Input: `extend type Mutation {
	"Creates a customer. Can only be invoked by employees or company managers."
	createCustomer(
		input: CreateCustomerInput!
	): CreateCustomerPayload!
}

input CreateCustomerInput {
	company: ID!
	user: CreateUserData!
	customer: CreateCustomerData!
}

type CreateCustomerPayload {
	customer: Customer!
}

input CreateCustomerData {
	note: String
	allowReviewSharing: Boolean
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/customer/delete.graphqls", Input: `extend type Mutation {
	"Deletes a customer. Can only be invoked by employees or company managers."
	deleteCustomer(input: DeleteCustomerInput!): DeleteCustomerPayload!
}

input DeleteCustomerInput {
	id: ID!
}

type DeleteCustomerPayload {
	customer: Customer!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/customer/update.graphqls", Input: `extend type Mutation {
	"Updates a customer. Can only be invoked by employees or company managers."
	updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload!
}

input UpdateCustomerInput {
	id: ID!
	patchUser: UpdateUserPatch!
	patchCustomer: UpdateCustomerPatch!
}

type UpdateCustomerPayload {
	customer: Customer!
}

input UpdateCustomerPatch {
	note: String
	allowReviewSharing: Boolean
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/employee/create.graphqls", Input: `extend type Mutation {
	"Creates an employee. Can only be invoked by company managers."
	createEmployee(
		input: CreateEmployeeInput!
	): CreateEmployeePayload!
}

input CreateEmployeeInput {
	branch: ID!
	data: CreateUserData!
	employee: CreateEmployeeData!
}

input CreateEmployeeData {
	workingHours: [WorkingHoursInput!]
}

type CreateEmployeePayload {
	employee: Employee!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/employee/delete.graphqls", Input: `extend type Mutation {
	"Deletes an employee. Can only be invoked by company managers."
	deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload!
}

input DeleteEmployeeInput {
	id: ID!
}

type DeleteEmployeePayload {
	employee: Employee!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/employee/edit_availability.graphqls", Input: `extend type Mutation {
	"Edit employee availability"
	EditEmployeeAvailability(
		input: EditEmployeeAvailabilityInput!
	): EditEmployeeAvailabilityPayload!
}

input EditEmployeeAvailabilityInput {
#	branch: ID!
	startDate: Time!
	endDate: Time!
	employeeID: ID!
	status: AvailabilityStatus!
}


type EditEmployeeAvailabilityPayload {
	employee: Employee!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/employee/update.graphqls", Input: `extend type Mutation {
	"Updates an employee. Can only be invoked by company managers."
	updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload!
}

input UpdateEmployeeInput {
	id: ID!
	patch: UpdateUserPatch!
	patchEmployee: UpdateEmployeePatch!
}

input UpdateEmployeePatch {
	workingHours: [WorkingHoursInput!]
}

type UpdateEmployeePayload {
	employee: Employee!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/iuser/user.graphqls", Input: `input CreateUserData {
	email: String!
	firstName: String!
	lastName: String!
	gender: Gender!
	phoneNumber: String
	zipCode: String
	street: String
	city: String
	birthday: String
}

input UpdateUserPatch {
	email: String
	firstName: String
	lastName: String
	gender: Gender
	phoneNumber: String
	zipCode: String
	street: String
	city: String
	birthday: String
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/manager/create.graphqls", Input: `extend type Mutation {
	"Creates a manager. Can only be invoked by a manager of the same company or an administrator."
	createManager(
		input: CreateManagerInput!
	): CreateManagerPayload!
}

input CreateManagerInput {
	company: ID!
	user: CreateUserData!
	manager: CreateManagerData!
}

input CreateManagerData {
	workingHours: [WorkingHoursInput!]
}

type CreateManagerPayload {
	manager: Manager!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/manager/delete.graphqls", Input: `extend type Mutation {
	"Deletes a manager. Can only be invoked by a manager of the same company or an administrator."
	deleteManager(input: DeleteManagerInput!): DeleteManagerPayload!
}

input DeleteManagerInput {
	id: ID!
}

type DeleteManagerPayload {
	manager: Manager!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/manager/update.graphqls", Input: `extend type Mutation {
	"Updates a manager. Can only be invoked by a manager of the same company or an administrator."
	updateManager(input: UpdateManagerInput!): UpdateManagerPayload!
}

input UpdateManagerInput {
	id: ID!
	patch: UpdateUserPatch!
	patchManager: UpdateManagerPatch!
}

input UpdateManagerPatch {
	workingHours: [WorkingHoursInput!]
}

type UpdateManagerPayload {
	manager: Manager!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/viewer/picture.graphqls", Input: `extend type Mutation {
	uploadViewerProfilePicture(upload: Upload!): UploadViewerProfilePicturePayload!
	removeViewerProfilePicture: RemoveViewerProfilePicturePayload!
}

type UploadViewerProfilePicturePayload {
	image: Image!
	user: IUser!
}

type RemoveViewerProfilePicturePayload {
	image: Image
	user: IUser!
}

type Image {
	id: ID!
	url: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/viewer/update.graphqls", Input: `extend type Mutation {
	updateViewer(input: UpdateViewerInput!): UpdateViewerPayload!
	updateNotificationToken(input: UpdateNotificationTokenInput!): UpdateViewerPayload!
}

input UpdateViewerInput {
	patch: UpdateUserPatch!
	allowReviewSharing: Boolean
	password: String
}

input UpdateNotificationTokenInput {
	token: String!
}

type UpdateViewerPayload {
	user: IUser!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/mutation/user/working-hours.graphqls", Input: `input WorkingHoursInput {
	day: DayOfWeek!

	notWorking: Boolean! = false
	break: Boolean! = false

	forenoon: TimerangeInput
	afternoon: TimerangeInput
}


`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/news/news.graphqls", Input: `type News implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	title: String
	image: Image

	branch: Branch!
}

type NewsConnection {
	nodes: [News!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/phoneNumber.graphqls", Input: `"A phoneNumber object, providing fields for raw usage and for the a-tag for HTML usage."
type PhoneNumber {
	href: String!
	raw: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/price/price.graphqls", Input: `type Price {
	value: Float!
	displayValue: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/product/product.graphqls", Input: `type Product implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	name: String!
	desc: String
	price: Price!
	capacity: String
	category: ProductCategory!
	subCategory: ProductSubCategory!
	image: Image
	attributes: [ProductServiceAttribute!]!
	active: Boolean

	reviews: ProductReviewConnection!
	viewerReview: ProductReview
	viewerCanReview: Boolean
	reviewAggregations: ReviewAggregations
}

type ProductConnection {
	nodes: [Product!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/product_category/category.graphqls", Input: `type ProductCategory implements Node {
    id: ID!
    createdAt: String!
	  updatedAt: String!
	  name: String
	  products: [Product]
	  subCategories: [ProductSubCategory!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/product_service_attribute/product_service_attribute.graphqls", Input: `type ProductServiceAttribute {
	key: String!
	name: String
	value: String
}

input ProductServiceAttributeInput {
	key: String!
	name: String
	value: String
}`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/product_sub_category/subCategory.graphqls", Input: `type ProductSubCategory implements Node {
    id: ID!
    createdAt: String!
	updatedAt: String!

    name: String!

	category: ProductCategory!
	products: [Product!]
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/appointment/appointment.graphqls", Input: `extend type Query {
	appointment(id: ID!, language: String): Appointment!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/branch/branch.graphqls", Input: `extend type Query {
	branch(id: ID!, language: String): Branch!
	branches(input: BranchesInput!, language: String): BranchConnection!
}

input BranchesInput {
	"The company ID."
	company: ID
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/company/company.graphqls", Input: `extend type Query {
	company(id: ID!, language: String): Company!
	companies(language: String): CompanyConnection!
	relatedCompanies(email: String!, password: String!, language: String): RelatedCompanies!
}

type RelatedCompanies {
	companies: [Company!]!
	isAdmin: Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/context.graphqls", Input: `extend type Query {
	"""
	This context-based method returns the current company to simplify accessing it,
	because companies have their own subdomain or domain name.
	"""
	currentCompany: Company
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/customer/customer.graphqls", Input: `extend type Query {
	customer(id: ID!, language: String): Customer!
	customers(input: CustomerInput!, language: String): CustomerConnection!
}

input CustomerInput {
	"Returns all customers from a given branch."
	branch: ID

	"Returns all customers from a given company."
	company: ID
	
	order: CustomerOrderByInput
}

input CustomerOrderByInput {
	field: CustomerOrderByFields!
	direction: OrderByDirectionInput!
}

enum CustomerOrderByFields {
	createdAt
	updatedAt
	firstName
	lastName
	gender
	birthday
	city
	zipCode
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/email_template/email_template.graphqls", Input: `extend type Query {
	"Queries email template by id or name"
	emailTemplate(input: EmailTemplateInput!, language: String): EmailTemplateQueryPayload!
	emailTemplates(language: String): EmailTemplatesQueryPayload!
}

input EmailTemplateInput {
	id: ID
	name: String
}

type EmailTemplateQueryPayload {
	template: EmailTemplate!
}

type EmailTemplatesQueryPayload {
	templates: [EmailTemplate!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/employee/employee.graphqls", Input: `extend type Query {
	"Get an employee. Requires viewer to be a company manager."
	employee(id: ID!, language: String): Employee!

	"List employees. Requires viewer to be a company manager."
	employees(input: EmployeeInput!, language: String): EmployeeConnection!
}

input EmployeeInput {
	"Returns all employees from a given branch."
	branch: ID

	"Returns all employees from a given company."
	company: ID
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/favorite/favorite.graphqls", Input: `extend type Query {
	favorites(language: String): FavoritesPayload!
}

type FavoritesPayload {
	products: ProductConnection!
	services: ServiceConnection!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/order_history/order_history.graphqls", Input: `extend type Query {
	orderHistory(language: String): OrderHistoryPayload!
}

type OrderHistoryPayload {
	products: ProductConnection!
	services: ServiceConnection!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/password_token/password_token.graphqls", Input: `extend type Query {
	isValidPasswordToken(
		token: String!
	): IsValidPasswordTokenPayload!
}

type IsValidPasswordTokenPayload {
	valid: Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/product/product.graphqls", Input: `extend type Query {
	product(id: ID!, language: String): Product!
	products(input: ProductInput!, language: String): ProductConnection!
}

input ProductInput {
	"Returns all products from a given branch."
	branch: ID

	"Returns all products from a given company."
	company: ID

	"Order by field and direction."
	order: ProductOrderByInput
}

input ProductOrderByInput {
	field: ProductOrderByFields!
	direction: OrderByDirectionInput!
}

enum ProductOrderByFields {
	createdAt
	updatedAt
	name
	price
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/product_category/category.graphqls", Input: `extend type Query {
	productCategory(id: ID!): ProductCategory!
	ProductCategories: [ProductCategory]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/product_sub_category/subCategory.graphqls", Input: `extend type Query {
	productSubCategory(id: ID!): ProductSubCategory!
	productSubCategories: [ProductSubCategory]!
}`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/query.graphqls", Input: `type Query
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/review/review.graphqls", Input: `extend type Query {
	reviews(input: ReviewInput!, language: String): ReviewConnection!
}

input ReviewInput {
	"Returns all reviews from a given customer. By default returns reviews for viewer."
	customer: ID
	status: [ReviewStatus!]
	type: [ReviewType!]
	order: ReviewOrderByInput # similiar to AppointmentOrderByInput with fields createdAt, updatedAt
	company: ID
}

type ReviewConnection {
  nodes: [IReview!]!
}

input ReviewOrderByInput {
	field: ReviewOrderByFields!
	direction: OrderByDirectionInput!
}

enum ReviewOrderByFields {
	createdAt
	updatedAt
	stars
	title
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/service/service.graphqls", Input: `extend type Query {
	service(id: ID!, language: String): Service!
	services(input: ServiceInput!, language: String): ServiceConnection!
}

input ServiceInput {
	"Returns all services from a given branch."
	branch: ID

	"Returns all services from a given company."
	company: ID

	"Order by field and direction."
	order: ServiceOrderByInput

	"Only return services for a specific gender. If omitted, return any."
	genderTarget: GenderTarget
}

input ServiceOrderByInput {
	field: ServiceOrderByFields!
	direction: OrderByDirectionInput!
}

enum ServiceOrderByFields {
	createdAt
	updatedAt
	name
	genderTarget
	price
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/service_category/category.graphqls", Input: `extend type Query {
	serviceCategory(id: ID!): ServiceCategory!
	serviceCategories: [ServiceCategory]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/service_sub_category/subCategory.graphqls", Input: `extend type Query {
	serviceSubCategory(id: ID!): ServiceSubCategory!
	serviceSubCategories: [ServiceSubCategory]!
}`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/staff/staff.graphqls", Input: `extend type Query {
	"""
	Get a staff member by ID. When no ID is provided, it defaults to the viewer, but it must be a user of type employee or manager.
	Only company managers can provide an optional ID.
	"""
	staffMember(id: ID): IStaff!

	"""
	Get staff members. Can only be invoked by user type employee or manager.
	"""
	staffMembers(input: StaffMemberInput!): StaffMemberConnection!

	"""
	Get staff members visible to the public.
	"""
	publicStaffMembers(input: StaffMemberInput!): PublicStaffMemberConnection!
}

input StaffMemberInput {
	"Returns all staff members from a given branch."
	branch: ID

	"Returns all staff members from a given company."
	company: ID
}

type StaffMemberConnection {
	nodes: [IStaff!]!
}

type PublicStaffMemberConnection {
	nodes: [IPublicStaff!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/timeslots/timeslots.graphqls", Input: `extend type Query {
	appointmentTimeslots(
		input: TimeslotInput!
	): Timeslots!
}

input TimeslotInput {
	branch: ID!

	"If an employee is provided, time slots only show for the given employee."
	employee: ID

	"An optional start date which defaults to today. The time part is ignored."
	start: Time

	services: [ConnectAppointmentService!]!
	products: [ConnectAppointmentProduct!]
}

type Timeslots {
	"The calculated duration in minutes."
	duration: Int!

	"The calculated total price, including services and products."
	price: Price!

	"All timeslot ranges. Returns an empty array if none available."
	ranges: [TimeslotRange!]!
}

type TimeslotRange {
	start: Time!
	end: Time!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/query/viewer.graphqls", Input: `extend type Query {
	viewer: IUser!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/review/appointment_review/appointment_review.graphqls", Input: `interface IAppointmentReview {
	appointment: Appointment!
}

type AppointmentReview implements Node & IReview & IAppointmentReview {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: ReviewType!
	stars: Float!
	title: String!
	text: String!
	status: ReviewStatus!

	"""
	Each review has to be made by a customer
	"""
	customer: Customer!
	
	appointment: Appointment!
}

type AppointmentReviewConnection {
	nodes: [AppointmentReview!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/review/product_review/product_review.graphqls", Input: `interface IProductReview {
	product: Product!
}

type ProductReview implements Node & IReview & IProductReview {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: ReviewType!
	stars: Float!
	title: String!
	text: String!
	status: ReviewStatus!

	"""
	Each review has to be made by a customer
	"""
	customer: Customer!
	
	product: Product!
}

type ProductReviewConnection {
	nodes: [ProductReview!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/review/review.graphqls", Input: `interface IReview {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: ReviewType!
	stars: Float!
	title: String!
	text: String!
	status: ReviewStatus!

	"""
	Each review has to be made by a customer
	"""
	customer: Customer!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/review/service_review/service_review.graphqls", Input: `interface IServiceReview {
	service: Service!
}

type ServiceReview implements Node & IReview & IServiceReview {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: ReviewType!
	stars: Float!
	title: String!
	text: String!
	status: ReviewStatus!

	"""
	Each review has to be made by a customer
	"""
	customer: Customer!
	
	service: Service!
}

type ServiceReviewConnection {
	nodes: [ServiceReview!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/reviewAggregations.graphqls", Input: `"A reviewAggregations object, providing aggregated metrics for reviews."
type ReviewAggregations {
	totalCount: Int!
	averageRating: Float!
	countPerStar: [Int!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/schema.graphqls", Input: `schema {
	query: Query
	mutation: Mutation
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/service/service.graphqls", Input: `type Service implements Node {
	id: ID!
	createdAt: String!
	updatedAt: String!

	name: String!
	desc: String
	genderTarget: GenderTarget
	price: Price!

	"The duration of this service in minutes."
	duration: Int!

	image: Image
	attributes: [ProductServiceAttribute!]!

	category: ServiceCategory!
	subCategory: ServiceSubCategory!
	active: Boolean

	reviews: ServiceReviewConnection!
	viewerReview: ServiceReview
	viewerCanReview: Boolean
	reviewAggregations: ReviewAggregations
}

type ServiceConnection {
	nodes: [Service!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/service_category/category.graphqls", Input: `type ServiceCategory implements Node {
    id: ID!
    createdAt: String!
	  updatedAt: String!

    name: String
	services: [Service]
	subCategories: [ServiceSubCategory!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/service_sub_category/subCategory.graphqls", Input: `type ServiceSubCategory implements Node {
    id: ID!
    createdAt: String!
	updatedAt: String!

    name: String!

	category: ServiceCategory!

	services: [Service!]
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/session/session.graphqls", Input: `type Session implements Node {
	id: ID!
	token: String!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/administrator/administrator.graphqls", Input: `type Administrator implements Node & IUser {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	gender: Gender
	zipCode: String
	street: String
	city: String
	birthday: String

	image: Image
	phoneNumber: PhoneNumber
	notificationToken: String
	activated: Boolean
}

type AdministratorConnection {
	nodes: [Administrator!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/customer/customer.graphqls", Input: `interface ICustomer {
	appointments(input: AppointmentInput): AppointmentConnection!
	phoneNumber: PhoneNumber
	note: String
	reviews: CustomerReviewConnection!
}

type Customer implements Node & IUser & ICustomer {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	gender: Gender
	zipCode: String
	street: String
	city: String
	birthday: String

	image: Image
	phoneNumber: PhoneNumber
	note: String
	allowReviewSharing: Boolean

	appointments(input: AppointmentInput): AppointmentConnection!
	reviews: CustomerReviewConnection!
	notificationToken: String
	activated: Boolean
}

type CustomerConnection {
	nodes: [Customer!]!
}

type CustomerReviewConnection {
	nodes: [IReview!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/employee/employee.graphqls", Input: `interface IEmployee {
	appointments(input: AppointmentInput): AppointmentConnection!
	workingHours: WorkingHours!
}

type Employee implements Node & IStaff & IPublicStaff & IUser & IEmployee {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	gender: Gender
	zipCode: String
	street: String
	city: String
	birthday: String

	image: Image
	phoneNumber: PhoneNumber

	appointments(input: AppointmentInput): AppointmentConnection!
	workingHours: WorkingHours!
	notificationToken: String
	activated: Boolean
}

type EmployeeConnection {
	nodes: [Employee!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/manager/manager.graphqls", Input: `interface IManager {
	appointments(input: AppointmentInput): AppointmentConnection!
	company: Company!
	workingHours: WorkingHours!
}

type Manager implements Node & IStaff & IPublicStaff & IUser & IManager {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	image: Image
	gender: Gender
	phoneNumber: PhoneNumber
	zipCode: String
	street: String
	city: String
	birthday: String

	company: Company!

	appointments(input: AppointmentInput): AppointmentConnection!
	notificationToken: String
	workingHours: WorkingHours!
	activated: Boolean
}

type ManagerConnection {
	nodes: [Manager!]!
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/staff/staff.graphqls", Input: `"IStaff describes a user working at a company. This can be employees or company managers."
interface IStaff {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	gender: Gender
	zipCode: String
	street: String
	city: String
	birthday: String

	image: Image
	phoneNumber: PhoneNumber

	appointments(input: AppointmentInput): AppointmentConnection!
	workingHours: WorkingHours!
	activated: Boolean
}

"IPublicStaff describes a user working at a company and the fields which are accessible by the public."
interface IPublicStaff {
	id: ID!

	firstName: String
	lastName: String
	fullName: String

	image: Image
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/user.graphqls", Input: `interface IUser {
	id: ID!
	createdAt: String!
	updatedAt: String!

	type: UserType!
	email: String!

	firstName: String
	lastName: String
	fullName: String
	gender: Gender
	zipCode: String
	street: String
	city: String
	birthday: String

	image: Image
	phoneNumber: PhoneNumber
	notificationToken: String
	activated: Boolean
}
`, BuiltIn: false},
	&ast.Source{Name: "api/resolver/user/working-hours.graphqls", Input: `"A wrapper for working hours."
type WorkingHours {
	formatted: [FormattedWorkingHours!]!
	raw: [RawWorkingHours!]!
}

"A human-formatted array to display working hours. Equal days are summarized."
type FormattedWorkingHours implements WorkingHoursBase {
	"The day key, e.g. ` + "`" + `MO` + "`" + ` or ` + "`" + `MO-FR` + "`" + `"
	key: String!

	notWorking: Boolean!
	break: Boolean!
	shortDay: String!
	fullDay: String!

	"A formatted value containing either the working time for that day or a translated 'not working' message."
	value: String!
}

"A raw array to display working hours by day."
type RawWorkingHours implements WorkingHoursBase {
	day: DayOfWeek!

	notWorking: Boolean!
	break: Boolean!
	shortDay: String!
	fullDay: String!

	forenoon: Timerange
	afternoon: Timerange
}

interface WorkingHoursBase {
	"A formatted 2-digit day, e.g. ` + "`" + `Mo` + "`" + `"
	shortDay: String!

	"A formatted full day name, e.g. ` + "`" + `Monday` + "`" + `"
	fullDay: String!

	"Indicates whether the employee is not working on this day in general."
	notWorking: Boolean!

	"Indicates whether the employee has separate times for forenoon and afternoon."
	break: Boolean!
}
`, BuiltIn: false},
	&ast.Source{Name: "gqlgen/scalars.graphqls", Input: `scalar Cursor
scalar Time
scalar Upload
`, BuiltIn: false},
	&ast.Source{Name: "prisma/shared.graphqls", Input: `"The user type."
enum UserType {
	"The end-customer of a hairdresser."
	CUSTOMER

	"The employee of a company."
	EMPLOYEE

	"The manager of a company."
	MANAGER

	"The administrator of the system."
	ADMINISTRATOR
}

enum ReviewType {
	PRODUCT
	SERVICE
	APPOINTMENT
}

"The day of the week."
enum DayOfWeek {
	MO
	TU
	WE
	TH
	FR
	SA
	SU
}

"The status of an appointment."
enum AppointmentStatus {
	REQUESTED
	APPROVED
	CANCELED
}

"A gender. For neiher of the below options, use null."
enum Gender {
	MALE
	FEMALE
	DIVERSE
	DO_NOT_MENTION
}

enum GenderTarget {
	MALE
	FEMALE
	DIVERSE
	ANY
}

enum ReviewStatus {
	PENDING
	APPROVED
	REJECTED
}

"Sub Categories Are Dynamic"
enum CategoryEnum {
	MALE
	FEMALE
	CHILDREN
	ANY
}

enum AvailabilityStatus {
	AVAILABLE
	BOOKED
	BREAK
	HOLIDAY
	UNAVAILABLE
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Company_branches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalOPaginationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Customer_appointments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOAppointmentInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Employee_appointments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOAppointmentInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Manager_appointments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOAppointmentInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_EditEmployeeAvailability_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 EditEmployeeAvailabilityInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNEditEmployeeAvailabilityInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEditEmployeeAvailabilityInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_activateAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ActivateAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNActivateAccountInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐActivateAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addImageSlot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BranchImageSlotInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBranchImageSlotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_approveReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 prisma.ReviewStatus
	if tmp, ok := rawArgs["status"]; ok {
		arg1, err = ec.unmarshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CancelAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCancelAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCancelAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdministrator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateAdministratorInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAdministratorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBranch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateBranchInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateCustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateEmployeeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateFavoriteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateFavoriteInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateManagerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateNewsInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createProductCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateProductCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProductSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateProductSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createServiceCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateServiceCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createServiceSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateServiceSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateServiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_customerRequestAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CustomerRequestAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCustomerRequestAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerRequestAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdministrator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteAdministratorInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteAdministratorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBranchImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteBranchImageInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteBranchImageInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBranch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteBranchInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteCustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteEmployeeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteEmployeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteFavoriteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteFavoriteInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteFavoriteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteManagerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteManagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteNewsInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteNewsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProductCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteProductCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProductSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteProductSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteProductInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteServiceCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteServiceCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteServiceSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteServiceSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeleteServiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_forceAppointmentNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ForceAppointmentNotificationInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOForceAppointmentNotificationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐForceAppointmentNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LoginInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLoginInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLoginInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_notifyAllCustomers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 NotifyAllCustomersInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNNotifyAllCustomersInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotifyAllCustomersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RegisterInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRegisterInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRegisterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceExistingProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ReplaceExistingProductInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNReplaceExistingProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceExistingService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ReplaceExistingServiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNReplaceExistingServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingServiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_requestActivationLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RequestActivationLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRequestActivationLinkInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestActivationLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_requestPasswordReset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RequestPasswordResetInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRequestPasswordResetInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestPasswordResetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rescheduleAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RescheduleAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRescheduleAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRescheduleAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ResetPasswordInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNResetPasswordInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐResetPasswordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendInviteEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SendInviteEmailInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSendInviteEmailInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendInviteEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sendUserNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SendUserNotificationInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSendUserNotificationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendUserNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setProductActive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SetProductActiveInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSetProductActiveInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetProductActiveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setServiceActive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SetServiceActiveInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSetServiceActiveInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetServiceActiveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_staffApproveAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StaffApproveAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNStaffApproveAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_staffCreateAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StaffCreateAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNStaffCreateAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffCreateAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_staffUpdateAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StaffUpdateAppointmentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNStaffUpdateAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_subscribeNewsletter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["branchId"]; ok {
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branchId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdministrator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateAdministratorInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAdministratorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAfterImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateAppointmentImageInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateAppointmentImageInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBeforeImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateAppointmentImageInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateAppointmentImageInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBranch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateBranchInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateCustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateEmailTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateEmailTemplateInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmployee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateEmployeeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateManagerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateNewsInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNotificationToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateNotificationTokenInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateNotificationTokenInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNotificationTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProductCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateProductCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProductSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateProductSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateServiceCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateServiceCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateServiceSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateServiceSubCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateServiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateViewer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateViewerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateViewerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadViewerProfilePicture_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["upload"]; ok {
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["upload"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertBranchOpeningHour_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpsertBranchOpeningHourInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpsertBranchOpeningHourInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpsertReviewInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpsertReviewInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_appointmentTimeslots_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 TimeslotInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNTimeslotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_appointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_branch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_branches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BranchesInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBranchesInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_companies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_company_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_customer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CustomerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_emailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 EmailTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNEmailTemplateInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_emailTemplates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_employee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_employees_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 EmployeeInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmployeeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_favorites_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_isValidPasswordToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orderHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_productCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_productSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ProductInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_publicStaffMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StaffMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNStaffMemberInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_relatedCompanies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_reviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ReviewInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNReviewInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_serviceCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_serviceSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_service_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_services_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ServiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_staffMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_staffMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StaffMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNStaffMemberInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActivateAccountPayload_status(ctx context.Context, field graphql.CollectedField, obj *ActivateAccountPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ActivateAccountPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_type(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.UserType)
	fc.Result = res
	return ec.marshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_email(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().Email(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_firstName(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().FirstName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_lastName(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().LastName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_fullName(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().FullName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_gender(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().Gender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_zipCode(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().ZipCode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_street(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().Street(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_city(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().City(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_birthday(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().Birthday(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_notificationToken(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Administrator().NotificationToken(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Administrator_activated(ctx context.Context, field graphql.CollectedField, obj *prisma.Administrator) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Administrator",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdministratorConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *AdministratorConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdministratorConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Administrator)
	fc.Result = res
	return ec.marshalNAdministrator2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministratorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_desc(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Desc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_start(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_end(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_price(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Price(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Price)
	fc.Result = res
	return ec.marshalNPrice2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_duration(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Duration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_status(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.AppointmentStatus)
	fc.Result = res
	return ec.marshalNAppointmentStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_note(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Note(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_beforeImage(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().BeforeImage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_afterImage(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().AfterImage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_employee(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Employee(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_customer(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Customer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_review(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Review(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.AppointmentReview)
	fc.Result = res
	return ec.marshalOAppointmentReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_viewerReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().ViewerReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.AppointmentReview)
	fc.Result = res
	return ec.marshalOAppointmentReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_viewerCanReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().ViewerCanReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_products(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Products(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*AppointmentProduct)
	fc.Result = res
	return ec.marshalNAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_services(ctx context.Context, field graphql.CollectedField, obj *prisma.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Appointment().Services(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *AppointmentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentProduct_item(ctx context.Context, field graphql.CollectedField, obj *AppointmentProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentProduct",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentProduct_count(ctx context.Context, field graphql.CollectedField, obj *AppointmentProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentProduct",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_id(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_type(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewType)
	fc.Result = res
	return ec.marshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_stars(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stars, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_title(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_text(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_status(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewStatus)
	fc.Result = res
	return ec.marshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_customer(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AppointmentReview().Customer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReview_appointment(ctx context.Context, field graphql.CollectedField, obj *prisma.AppointmentReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AppointmentReview().Appointment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _AppointmentReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *AppointmentReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AppointmentReviewConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.AppointmentReview)
	fc.Result = res
	return ec.marshalNAppointmentReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ApproveReviewPayload_review(ctx context.Context, field graphql.CollectedField, obj *ApproveReviewPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ApproveReviewPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IReview)
	fc.Result = res
	return ec.marshalNIReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_name(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_welcomeMessage(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().WelcomeMessage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_address(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_images(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_websiteUrl(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebsiteUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_navigationLink(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NavigationLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_sharingRedirectUrl(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharingRedirectUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_imprint(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imprint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_facebookLink(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().FacebookLink(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_tiktokLink(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().TiktokLink(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_instagramLink(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().InstagramLink(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_company(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Company(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_openingHours(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().OpeningHours(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*OpeningHours)
	fc.Result = res
	return ec.marshalNOpeningHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOpeningHours(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_logo(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Logo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_appTheme(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppTheme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_news(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().News(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.News)
	fc.Result = res
	return ec.marshalNNews2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNewsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_slots(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Slots(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*BranchImageSlot)
	fc.Result = res
	return ec.marshalOBranchImageSlot2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlot(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_smtpSendHost(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().SMTPSendHost(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_smtpSendPort(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().SMTPSendPort(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_smtpUsername(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().SMTPUsername(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_smtpPassword(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmtpPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_fromEmail(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().FromEmail(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_reviews(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().Reviews(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AppointmentReviewConnection)
	fc.Result = res
	return ec.marshalNAppointmentReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_reviewAggregations(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().ReviewAggregations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ReviewAggregations)
	fc.Result = res
	return ec.marshalOReviewAggregations2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewAggregations(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_mailchimpApiKey(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().MailchimpAPIKey(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_mailchimpListId(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailchimpListId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_mailchimpCredentialsValid(ctx context.Context, field graphql.CollectedField, obj *prisma.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Branch",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Branch().MailchimpCredentialsValid(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *BranchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_id(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_createdAt(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_updatedAt(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_slotNumber(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlotNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_branch(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchImageSlot_imageUrl(ctx context.Context, field graphql.CollectedField, obj *BranchImageSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BranchImageSlot",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CancelAppointmentPayload_appointment(ctx context.Context, field graphql.CollectedField, obj *CancelAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CancelAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_aliases(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_customUrls(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().CustomUrls(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_sharingRedirectUrl(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharingRedirectUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_logo(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().Logo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_appTheme(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppTheme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_pwaShortName(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().PwaShortName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_pwaIcon(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().PwaIcon(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_pwaThemeColor(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PwaThemeColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_pwaBackgroundColor(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PwaBackgroundColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_branches(ctx context.Context, field graphql.CollectedField, obj *prisma.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Company_branches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Company().Branches(rctx, obj, args["pagination"].(*PaginationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *CompanyConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateAdministratorPayload_administrator(ctx context.Context, field graphql.CollectedField, obj *CreateAdministratorPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateAdministratorPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Administrator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Administrator)
	fc.Result = res
	return ec.marshalNAdministrator2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateBranchPayload_branch(ctx context.Context, field graphql.CollectedField, obj *CreateBranchPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateBranchPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateCompanyPayload_company(ctx context.Context, field graphql.CollectedField, obj *CreateCompanyPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateCompanyPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateCustomerPayload_customer(ctx context.Context, field graphql.CollectedField, obj *CreateCustomerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateCustomerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateEmployeePayload_employee(ctx context.Context, field graphql.CollectedField, obj *CreateEmployeePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateEmployeePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateFavoritePayload_favorite(ctx context.Context, field graphql.CollectedField, obj *CreateFavoritePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateFavoritePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Favorite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Favorite)
	fc.Result = res
	return ec.marshalNFavorite2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateManagerPayload_manager(ctx context.Context, field graphql.CollectedField, obj *CreateManagerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateManagerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Manager)
	fc.Result = res
	return ec.marshalNManager2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateNewsPayload_news(ctx context.Context, field graphql.CollectedField, obj *CreateNewsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateNewsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.News, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.News)
	fc.Result = res
	return ec.marshalNNews2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateProductCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *CreateProductCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateProductCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateProductPayload_product(ctx context.Context, field graphql.CollectedField, obj *CreateProductPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateProductPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateProductSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *CreateProductSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateProductSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateServiceCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *CreateServiceCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateServiceCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateServicePayload_service(ctx context.Context, field graphql.CollectedField, obj *CreateServicePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateServicePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateServiceSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *CreateServiceSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateServiceSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_type(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.UserType)
	fc.Result = res
	return ec.marshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_email(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Email(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_firstName(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().FirstName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_lastName(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().LastName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_fullName(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().FullName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_gender(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Gender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_zipCode(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().ZipCode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_street(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Street(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_city(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().City(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_birthday(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Birthday(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_note(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Note(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_allowReviewSharing(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowReviewSharing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_appointments(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Customer_appointments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Appointments(rctx, obj, args["input"].(*AppointmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AppointmentConnection)
	fc.Result = res
	return ec.marshalNAppointmentConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_reviews(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Reviews(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CustomerReviewConnection)
	fc.Result = res
	return ec.marshalNCustomerReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_notificationToken(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().NotificationToken(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_activated(ctx context.Context, field graphql.CollectedField, obj *prisma.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *CustomerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerRequestAppointmentPayload_message(ctx context.Context, field graphql.CollectedField, obj *CustomerRequestAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerRequestAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CustomerReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *CustomerReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CustomerReviewConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]prisma.IReview)
	fc.Result = res
	return ec.marshalNIReview2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteAdministratorPayload_administrator(ctx context.Context, field graphql.CollectedField, obj *DeleteAdministratorPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteAdministratorPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Administrator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Administrator)
	fc.Result = res
	return ec.marshalNAdministrator2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBranchPayload_branch(ctx context.Context, field graphql.CollectedField, obj *DeleteBranchPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteBranchPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCompanyPayload_company(ctx context.Context, field graphql.CollectedField, obj *DeleteCompanyPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteCompanyPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteCustomerPayload_customer(ctx context.Context, field graphql.CollectedField, obj *DeleteCustomerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteCustomerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteEmployeePayload_employee(ctx context.Context, field graphql.CollectedField, obj *DeleteEmployeePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteEmployeePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteFavoritePayload_favorite(ctx context.Context, field graphql.CollectedField, obj *DeleteFavoritePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteFavoritePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Favorite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Favorite)
	fc.Result = res
	return ec.marshalNFavorite2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteManagerPayload_manager(ctx context.Context, field graphql.CollectedField, obj *DeleteManagerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteManagerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Manager)
	fc.Result = res
	return ec.marshalNManager2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteNewsPayload_news(ctx context.Context, field graphql.CollectedField, obj *DeleteNewsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteNewsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.News, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.News)
	fc.Result = res
	return ec.marshalNNews2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProductCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *DeleteProductCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProductCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProductPayload_product(ctx context.Context, field graphql.CollectedField, obj *DeleteProductPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProductPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteProductSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *DeleteProductSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteProductSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteReviewPayload_review(ctx context.Context, field graphql.CollectedField, obj *DeleteReviewPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteReviewPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IReview)
	fc.Result = res
	return ec.marshalNIReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReview(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteServiceCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteServiceCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteServicePayload_service(ctx context.Context, field graphql.CollectedField, obj *DeleteServicePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteServicePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteServiceSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteServiceSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _EditEmployeeAvailabilityPayload_employee(ctx context.Context, field graphql.CollectedField, obj *EditEmployeeAvailabilityPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EditEmployeeAvailabilityPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_id(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_name(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_content(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EmailTemplate().Content(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_title(ctx context.Context, field graphql.CollectedField, obj *prisma.EmailTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EmailTemplate().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplateQueryPayload_template(ctx context.Context, field graphql.CollectedField, obj *EmailTemplateQueryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplateQueryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.EmailTemplate)
	fc.Result = res
	return ec.marshalNEmailTemplate2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplatesQueryPayload_templates(ctx context.Context, field graphql.CollectedField, obj *EmailTemplatesQueryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmailTemplatesQueryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.EmailTemplate)
	fc.Result = res
	return ec.marshalNEmailTemplate2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_type(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.UserType)
	fc.Result = res
	return ec.marshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_email(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Email(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_firstName(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().FirstName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_lastName(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().LastName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_fullName(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().FullName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_gender(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Gender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_zipCode(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().ZipCode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_street(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Street(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_city(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().City(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_birthday(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Birthday(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_appointments(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Employee_appointments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().Appointments(rctx, obj, args["input"].(*AppointmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AppointmentConnection)
	fc.Result = res
	return ec.marshalNAppointmentConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_workingHours(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().WorkingHours(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WorkingHours)
	fc.Result = res
	return ec.marshalNWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHours(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_notificationToken(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Employee().NotificationToken(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Employee_activated(ctx context.Context, field graphql.CollectedField, obj *prisma.Employee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Employee",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EmployeeConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *EmployeeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "EmployeeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Favorite_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Favorite) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Favorite",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Favorite_user(ctx context.Context, field graphql.CollectedField, obj *prisma.Favorite) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Favorite",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Favorite().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Favorite_product(ctx context.Context, field graphql.CollectedField, obj *prisma.Favorite) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Favorite",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Favorite().Product(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Favorite_service(ctx context.Context, field graphql.CollectedField, obj *prisma.Favorite) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Favorite",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Favorite().Service(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalOService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _FavoritesPayload_products(ctx context.Context, field graphql.CollectedField, obj *FavoritesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FavoritesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProductConnection)
	fc.Result = res
	return ec.marshalNProductConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _FavoritesPayload_services(ctx context.Context, field graphql.CollectedField, obj *FavoritesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FavoritesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ServiceConnection)
	fc.Result = res
	return ec.marshalNServiceConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_key(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_closed(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Closed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_break(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Break, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_shortDay(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_fullDay(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedOpeningHour_value(ctx context.Context, field graphql.CollectedField, obj *FormattedOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_key(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_notWorking(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotWorking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_break(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Break, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_shortDay(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_fullDay(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FormattedWorkingHours_value(ctx context.Context, field graphql.CollectedField, obj *FormattedWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FormattedWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_url(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IsValidPasswordTokenPayload_valid(ctx context.Context, field graphql.CollectedField, obj *IsValidPasswordTokenPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "IsValidPasswordTokenPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginPayload_session(ctx context.Context, field graphql.CollectedField, obj *LoginPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LoginPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginPayload_user(ctx context.Context, field graphql.CollectedField, obj *LoginPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LoginPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _LogoutPayload_session(ctx context.Context, field graphql.CollectedField, obj *LogoutPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LogoutPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Session)
	fc.Result = res
	return ec.marshalOSession2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_type(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.UserType)
	fc.Result = res
	return ec.marshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_email(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Email(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_firstName(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().FirstName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_lastName(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().LastName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_fullName(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().FullName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_gender(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Gender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_zipCode(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().ZipCode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_street(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Street(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_city(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().City(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_birthday(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Birthday(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_company(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Company(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_appointments(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Manager_appointments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().Appointments(rctx, obj, args["input"].(*AppointmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AppointmentConnection)
	fc.Result = res
	return ec.marshalNAppointmentConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_notificationToken(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().NotificationToken(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_workingHours(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Manager().WorkingHours(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*WorkingHours)
	fc.Result = res
	return ec.marshalNWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHours(ctx, field.Selections, res)
}

func (ec *executionContext) _Manager_activated(ctx context.Context, field graphql.CollectedField, obj *prisma.Manager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Manager",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ManagerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Manager)
	fc.Result = res
	return ec.marshalNManager2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManagerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelAppointment(rctx, args["input"].(CancelAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CancelAppointmentPayload)
	fc.Result = res
	return ec.marshalNCancelAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCancelAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_customerRequestAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_customerRequestAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerRequestAppointment(rctx, args["input"].(CustomerRequestAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CustomerRequestAppointmentPayload)
	fc.Result = res
	return ec.marshalNCustomerRequestAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerRequestAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_forceAppointmentNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_forceAppointmentNotification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ForceAppointmentNotification(rctx, args["input"].(*ForceAppointmentNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*NotificationPayload)
	fc.Result = res
	return ec.marshalNNotificationPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_rescheduleAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_rescheduleAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RescheduleAppointment(rctx, args["input"].(RescheduleAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RescheduleAppointmentPayload)
	fc.Result = res
	return ec.marshalNRescheduleAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRescheduleAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_staffApproveAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_staffApproveAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffApproveAppointment(rctx, args["input"].(StaffApproveAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StaffApproveAppointmentPayload)
	fc.Result = res
	return ec.marshalNStaffApproveAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_staffCreateAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_staffCreateAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffCreateAppointment(rctx, args["input"].(StaffCreateAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StaffCreateAppointmentPayload)
	fc.Result = res
	return ec.marshalNStaffCreateAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffCreateAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_staffUpdateAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_staffUpdateAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffUpdateAppointment(rctx, args["input"].(StaffUpdateAppointmentInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StaffUpdateAppointmentPayload)
	fc.Result = res
	return ec.marshalNStaffUpdateAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBeforeImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBeforeImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBeforeImage(rctx, args["input"].(UpdateAppointmentImageInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateAppointmentImagePayload)
	fc.Result = res
	return ec.marshalNUpdateAppointmentImagePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAfterImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAfterImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAfterImage(rctx, args["input"].(UpdateAppointmentImageInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateAppointmentImagePayload)
	fc.Result = res
	return ec.marshalNUpdateAppointmentImagePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_activateAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_activateAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ActivateAccount(rctx, args["input"].(ActivateAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ActivateAccountPayload)
	fc.Result = res
	return ec.marshalNActivateAccountPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐActivateAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["input"].(LoginInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LoginPayload)
	fc.Result = res
	return ec.marshalNLoginPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLoginPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LogoutPayload)
	fc.Result = res
	return ec.marshalNLogoutPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLogoutPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_register_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Register(rctx, args["input"].(RegisterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RegisterPayload)
	fc.Result = res
	return ec.marshalNRegisterPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRegisterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestActivationLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestActivationLink_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestActivationLink(rctx, args["input"].(RequestActivationLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RequestActivationLinkPayload)
	fc.Result = res
	return ec.marshalNRequestActivationLinkPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestActivationLinkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestPasswordReset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestPasswordReset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestPasswordReset(rctx, args["input"].(RequestPasswordResetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RequestPasswordResetPayload)
	fc.Result = res
	return ec.marshalNRequestPasswordResetPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestPasswordResetPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, args["input"].(ResetPasswordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ResetPasswordPayload)
	fc.Result = res
	return ec.marshalNResetPasswordPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐResetPasswordPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBranch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBranch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBranch(rctx, args["input"].(CreateBranchInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateBranchPayload)
	fc.Result = res
	return ec.marshalNCreateBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBranch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBranch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBranch(rctx, args["input"].(DeleteBranchInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteBranchPayload)
	fc.Result = res
	return ec.marshalNDeleteBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBranchImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBranchImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBranchImage(rctx, args["input"].(DeleteBranchImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteBranchPayload)
	fc.Result = res
	return ec.marshalNDeleteBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBranch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBranch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBranch(rctx, args["input"].(UpdateBranchInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateBranchPayload)
	fc.Result = res
	return ec.marshalNUpdateBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addImageSlot(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addImageSlot_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddImageSlot(rctx, args["input"].(BranchImageSlotInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateBranchPayload)
	fc.Result = res
	return ec.marshalNUpdateBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertBranchOpeningHour(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertBranchOpeningHour_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertBranchOpeningHour(rctx, args["input"].(UpsertBranchOpeningHourInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpsertBranchOpeningHourPayload)
	fc.Result = res
	return ec.marshalNUpsertBranchOpeningHourPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompany(rctx, args["input"].(CreateCompanyInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateCompanyPayload)
	fc.Result = res
	return ec.marshalNCreateCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompany(rctx, args["input"].(DeleteCompanyInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteCompanyPayload)
	fc.Result = res
	return ec.marshalNDeleteCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCompanyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, args["input"].(UpdateCompanyInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateCompanyPayload)
	fc.Result = res
	return ec.marshalNUpdateCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_newEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewEmailTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendInviteEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendInviteEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendInviteEmail(rctx, args["input"].(SendInviteEmailInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SendEmailPayload)
	fc.Result = res
	return ec.marshalNSendEmailPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendEmailPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEmailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmailTemplate(rctx, args["input"].(UpdateEmailTemplateInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateEmailTemplatePayload)
	fc.Result = res
	return ec.marshalNUpdateEmailTemplatePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFavorite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFavorite(rctx, args["input"].(CreateFavoriteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateFavoritePayload)
	fc.Result = res
	return ec.marshalNCreateFavoritePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFavorite_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFavorite(rctx, args["input"].(DeleteFavoriteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteFavoritePayload)
	fc.Result = res
	return ec.marshalNDeleteFavoritePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_subscribeNewsletter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_subscribeNewsletter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubscribeNewsletter(rctx, args["email"].(string), args["branchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SubscribeNewsletterPayload)
	fc.Result = res
	return ec.marshalNSubscribeNewsletterPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSubscribeNewsletterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNews(rctx, args["input"].(CreateNewsInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateNewsPayload)
	fc.Result = res
	return ec.marshalNCreateNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteNews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteNews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNews(rctx, args["input"].(DeleteNewsInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteNewsPayload)
	fc.Result = res
	return ec.marshalNDeleteNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteNewsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNews(rctx, args["input"].(UpdateNewsInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateNewsPayload)
	fc.Result = res
	return ec.marshalNUpdateNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_notifyAllCustomers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_notifyAllCustomers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NotifyAllCustomers(rctx, args["input"].(NotifyAllCustomersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*NotificationsPayload)
	fc.Result = res
	return ec.marshalONotificationsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendUserNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendUserNotification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendUserNotification(rctx, args["input"].(*SendUserNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*NotificationsPayload)
	fc.Result = res
	return ec.marshalONotificationsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_triggerTestNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TriggerTestNotification(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*NotificationPayload)
	fc.Result = res
	return ec.marshalNNotificationPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, args["input"].(CreateProductInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateProductPayload)
	fc.Result = res
	return ec.marshalNCreateProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProduct(rctx, args["input"].(DeleteProductInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteProductPayload)
	fc.Result = res
	return ec.marshalNDeleteProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replaceExistingProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replaceExistingProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceExistingProduct(rctx, args["input"].(ReplaceExistingProductInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ReplaceExistingProductsPayload)
	fc.Result = res
	return ec.marshalNReplaceExistingProductsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingProductsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setProductActive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setProductActive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetProductActive(rctx, args["input"].(SetProductActiveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SetProductActivePayload)
	fc.Result = res
	return ec.marshalNSetProductActivePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetProductActivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProduct_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, args["input"].(UpdateProductInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateProductPayload)
	fc.Result = res
	return ec.marshalNUpdateProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProductCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProductCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProductCategory(rctx, args["input"].(CreateProductCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateProductCategoryPayload)
	fc.Result = res
	return ec.marshalNCreateProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProductCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProductCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProductCategory(rctx, args["input"].(DeleteProductCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteProductCategoryPayload)
	fc.Result = res
	return ec.marshalNDeleteProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProductCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProductCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProductCategory(rctx, args["input"].(UpdateProductCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateProductCategoryPayload)
	fc.Result = res
	return ec.marshalNUpdateProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createProductSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createProductSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProductSubCategory(rctx, args["input"].(CreateProductSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateProductSubCategoryPayload)
	fc.Result = res
	return ec.marshalNCreateProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProductSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProductSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProductSubCategory(rctx, args["input"].(DeleteProductSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteProductSubCategoryPayload)
	fc.Result = res
	return ec.marshalNDeleteProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProductSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProductSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProductSubCategory(rctx, args["input"].(UpdateProductSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateProductSubCategoryPayload)
	fc.Result = res
	return ec.marshalNUpdateProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertReview(rctx, args["input"].(UpsertReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpsertReviewPayload)
	fc.Result = res
	return ec.marshalNUpsertReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertReviewPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_approveReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_approveReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveReview(rctx, args["id"].(string), args["status"].(prisma.ReviewStatus))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ApproveReviewPayload)
	fc.Result = res
	return ec.marshalNApproveReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐApproveReviewPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReview(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteReviewPayload)
	fc.Result = res
	return ec.marshalNDeleteReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteReviewPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateService(rctx, args["input"].(CreateServiceInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateServicePayload)
	fc.Result = res
	return ec.marshalNCreateServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServicePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteService(rctx, args["input"].(DeleteServiceInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteServicePayload)
	fc.Result = res
	return ec.marshalNDeleteServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServicePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_replaceExistingService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_replaceExistingService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceExistingService(rctx, args["input"].(ReplaceExistingServiceInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ReplaceExistingServicePayload)
	fc.Result = res
	return ec.marshalNReplaceExistingServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingServicePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setServiceActive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setServiceActive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetServiceActive(rctx, args["input"].(SetServiceActiveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SetServiceActivePayload)
	fc.Result = res
	return ec.marshalNSetServiceActivePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetServiceActivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateService(rctx, args["input"].(UpdateServiceInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateServicePayload)
	fc.Result = res
	return ec.marshalNUpdateServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createServiceCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createServiceCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateServiceCategory(rctx, args["input"].(CreateServiceCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateServiceCategoryPayload)
	fc.Result = res
	return ec.marshalNCreateServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteServiceCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteServiceCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteServiceCategory(rctx, args["input"].(DeleteServiceCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceCategoryPayload)
	fc.Result = res
	return ec.marshalNDeleteServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateServiceCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateServiceCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateServiceCategory(rctx, args["input"].(UpdateServiceCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateServiceCategoryPayload)
	fc.Result = res
	return ec.marshalNUpdateServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createServiceSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createServiceSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateServiceSubCategory(rctx, args["input"].(CreateServiceSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateServiceSubCategoryPayload)
	fc.Result = res
	return ec.marshalNCreateServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteServiceSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteServiceSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteServiceSubCategory(rctx, args["input"].(DeleteServiceSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceSubCategoryPayload)
	fc.Result = res
	return ec.marshalNDeleteServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateServiceSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateServiceSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateServiceSubCategory(rctx, args["input"].(UpdateServiceSubCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateServiceSubCategoryPayload)
	fc.Result = res
	return ec.marshalNUpdateServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdministrator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdministrator_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdministrator(rctx, args["input"].(CreateAdministratorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateAdministratorPayload)
	fc.Result = res
	return ec.marshalNCreateAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAdministratorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdministrator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdministrator_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAdministrator(rctx, args["input"].(DeleteAdministratorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteAdministratorPayload)
	fc.Result = res
	return ec.marshalNDeleteAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteAdministratorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdministrator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdministrator_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdministrator(rctx, args["input"].(UpdateAdministratorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateAdministratorPayload)
	fc.Result = res
	return ec.marshalNUpdateAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAdministratorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomer(rctx, args["input"].(CreateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateCustomerPayload)
	fc.Result = res
	return ec.marshalNCreateCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCustomer(rctx, args["input"].(DeleteCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteCustomerPayload)
	fc.Result = res
	return ec.marshalNDeleteCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCustomerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomer(rctx, args["input"].(UpdateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateCustomerPayload)
	fc.Result = res
	return ec.marshalNUpdateCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createEmployee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmployee(rctx, args["input"].(CreateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateEmployeePayload)
	fc.Result = res
	return ec.marshalNCreateEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteEmployee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmployee(rctx, args["input"].(DeleteEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteEmployeePayload)
	fc.Result = res
	return ec.marshalNDeleteEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteEmployeePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_EditEmployeeAvailability(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_EditEmployeeAvailability_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditEmployeeAvailability(rctx, args["input"].(EditEmployeeAvailabilityInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*EditEmployeeAvailabilityPayload)
	fc.Result = res
	return ec.marshalNEditEmployeeAvailabilityPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEditEmployeeAvailabilityPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEmployee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEmployee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmployee(rctx, args["input"].(UpdateEmployeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateEmployeePayload)
	fc.Result = res
	return ec.marshalNUpdateEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateManager(rctx, args["input"].(CreateManagerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CreateManagerPayload)
	fc.Result = res
	return ec.marshalNCreateManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteManager(rctx, args["input"].(DeleteManagerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeleteManagerPayload)
	fc.Result = res
	return ec.marshalNDeleteManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteManagerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateManager(rctx, args["input"].(UpdateManagerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateManagerPayload)
	fc.Result = res
	return ec.marshalNUpdateManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_uploadViewerProfilePicture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_uploadViewerProfilePicture_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadViewerProfilePicture(rctx, args["upload"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UploadViewerProfilePicturePayload)
	fc.Result = res
	return ec.marshalNUploadViewerProfilePicturePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUploadViewerProfilePicturePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeViewerProfilePicture(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveViewerProfilePicture(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RemoveViewerProfilePicturePayload)
	fc.Result = res
	return ec.marshalNRemoveViewerProfilePicturePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRemoveViewerProfilePicturePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateViewer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateViewer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateViewer(rctx, args["input"].(UpdateViewerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateViewerPayload)
	fc.Result = res
	return ec.marshalNUpdateViewerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateNotificationToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateNotificationToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNotificationToken(rctx, args["input"].(UpdateNotificationTokenInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UpdateViewerPayload)
	fc.Result = res
	return ec.marshalNUpdateViewerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _News_id(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _News_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _News_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _News_title(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.News().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _News_image(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.News().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _News_branch(ctx context.Context, field graphql.CollectedField, obj *prisma.News) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "News",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.News().Branch(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _NewsConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *NewsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NewsConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.News)
	fc.Result = res
	return ec.marshalNNews2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNewsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationPayload_userId(ctx context.Context, field graphql.CollectedField, obj *NotificationPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NotificationPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationPayload_result(ctx context.Context, field graphql.CollectedField, obj *NotificationPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NotificationPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationsPayload_payloads(ctx context.Context, field graphql.CollectedField, obj *NotificationsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "NotificationsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payloads, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*NotificationPayload)
	fc.Result = res
	return ec.marshalNNotificationPayload2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayloadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OpeningHours_formatted(ctx context.Context, field graphql.CollectedField, obj *OpeningHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OpeningHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*FormattedOpeningHour)
	fc.Result = res
	return ec.marshalNFormattedOpeningHour2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedOpeningHourᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OpeningHours_raw(ctx context.Context, field graphql.CollectedField, obj *OpeningHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OpeningHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*RawOpeningHour)
	fc.Result = res
	return ec.marshalNRawOpeningHour2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawOpeningHourᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderHistoryPayload_products(ctx context.Context, field graphql.CollectedField, obj *OrderHistoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrderHistoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProductConnection)
	fc.Result = res
	return ec.marshalNProductConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderHistoryPayload_services(ctx context.Context, field graphql.CollectedField, obj *OrderHistoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OrderHistoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ServiceConnection)
	fc.Result = res
	return ec.marshalNServiceConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_href(ctx context.Context, field graphql.CollectedField, obj *PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PhoneNumber",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Href, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_raw(ctx context.Context, field graphql.CollectedField, obj *PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PhoneNumber",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Price_value(ctx context.Context, field graphql.CollectedField, obj *Price) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Price",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Price_displayValue(ctx context.Context, field graphql.CollectedField, obj *Price) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Price",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_desc(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Desc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_price(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Price(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Price)
	fc.Result = res
	return ec.marshalNPrice2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_capacity(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Capacity(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_category(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_subCategory(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().SubCategory(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_attributes(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Attributes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductServiceAttribute)
	fc.Result = res
	return ec.marshalNProductServiceAttribute2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_active(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_reviews(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().Reviews(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProductReviewConnection)
	fc.Result = res
	return ec.marshalNProductReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_viewerReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().ViewerReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductReview)
	fc.Result = res
	return ec.marshalOProductReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_viewerCanReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().ViewerCanReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_reviewAggregations(ctx context.Context, field graphql.CollectedField, obj *prisma.Product) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Product",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().ReviewAggregations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ReviewAggregations)
	fc.Result = res
	return ec.marshalOReviewAggregations2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewAggregations(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_name(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_products(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductCategory().Products(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*prisma.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductCategory_subCategories(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductCategory().SubCategories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ProductConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_type(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewType)
	fc.Result = res
	return ec.marshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_stars(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stars, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_title(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_text(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_status(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewStatus)
	fc.Result = res
	return ec.marshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_customer(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductReview().Customer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReview_product(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductReview().Product(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ProductReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductReviewConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductReview)
	fc.Result = res
	return ec.marshalNProductReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductServiceAttribute_key(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductServiceAttribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductServiceAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductServiceAttribute_name(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductServiceAttribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductServiceAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductServiceAttribute().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductServiceAttribute_value(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductServiceAttribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductServiceAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductServiceAttribute().Value(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_name(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_category(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductSubCategory().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _ProductSubCategory_products(ctx context.Context, field graphql.CollectedField, obj *prisma.ProductSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ProductSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ProductSubCategory().Products(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*prisma.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PublicStaffMemberConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *PublicStaffMemberConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PublicStaffMemberConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]prisma.IPublicStaff)
	fc.Result = res
	return ec.marshalNIPublicStaff2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIPublicStaffᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Appointment(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_branch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_branch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Branch(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_branches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_branches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Branches(rctx, args["input"].(BranchesInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_company(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_company_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Company(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_companies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_companies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Companies(rctx, args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CompanyConnection)
	fc.Result = res
	return ec.marshalNCompanyConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCompanyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_relatedCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_relatedCompanies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RelatedCompanies(rctx, args["email"].(string), args["password"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RelatedCompanies)
	fc.Result = res
	return ec.marshalNRelatedCompanies2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRelatedCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_currentCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentCompany(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_customer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_customer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Customer(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_customers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_customers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Customers(rctx, args["input"].(CustomerInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CustomerConnection)
	fc.Result = res
	return ec.marshalNCustomerConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_emailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_emailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EmailTemplate(rctx, args["input"].(EmailTemplateInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*EmailTemplateQueryPayload)
	fc.Result = res
	return ec.marshalNEmailTemplateQueryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplateQueryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_emailTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_emailTemplates_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EmailTemplates(rctx, args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*EmailTemplatesQueryPayload)
	fc.Result = res
	return ec.marshalNEmailTemplatesQueryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplatesQueryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_employee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_employee_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employee(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_employees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_employees_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Employees(rctx, args["input"].(EmployeeInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*EmployeeConnection)
	fc.Result = res
	return ec.marshalNEmployeeConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmployeeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_favorites(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_favorites_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Favorites(rctx, args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FavoritesPayload)
	fc.Result = res
	return ec.marshalNFavoritesPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFavoritesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orderHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orderHistory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrderHistory(rctx, args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*OrderHistoryPayload)
	fc.Result = res
	return ec.marshalNOrderHistoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderHistoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_isValidPasswordToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_isValidPasswordToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IsValidPasswordToken(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*IsValidPasswordTokenPayload)
	fc.Result = res
	return ec.marshalNIsValidPasswordTokenPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐIsValidPasswordTokenPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_product_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Product(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_products_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, args["input"].(ProductInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ProductConnection)
	fc.Result = res
	return ec.marshalNProductConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_productCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_productCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductCategory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ProductCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_productSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_productSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductSubCategory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_productSubCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductSubCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_reviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_reviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Reviews(rctx, args["input"].(ReviewInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ReviewConnection)
	fc.Result = res
	return ec.marshalNReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_service_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Service(rctx, args["id"].(string), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_services(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_services_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Services(rctx, args["input"].(ServiceInput), args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ServiceConnection)
	fc.Result = res
	return ec.marshalNServiceConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serviceCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_serviceCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceCategory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serviceCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serviceSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_serviceSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceSubCategory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_serviceSubCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceSubCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_staffMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_staffMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StaffMember(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IStaff)
	fc.Result = res
	return ec.marshalNIStaff2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIStaff(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_staffMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_staffMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StaffMembers(rctx, args["input"].(StaffMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StaffMemberConnection)
	fc.Result = res
	return ec.marshalNStaffMemberConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_publicStaffMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_publicStaffMembers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PublicStaffMembers(rctx, args["input"].(StaffMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PublicStaffMemberConnection)
	fc.Result = res
	return ec.marshalNPublicStaffMemberConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPublicStaffMemberConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appointmentTimeslots(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appointmentTimeslots_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppointmentTimeslots(rctx, args["input"].(TimeslotInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Timeslots)
	fc.Result = res
	return ec.marshalNTimeslots2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslots(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_viewer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Viewer(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_day(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.DayOfWeek)
	fc.Result = res
	return ec.marshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_closed(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Closed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_break(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Break, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_shortDay(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_fullDay(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_forenoon(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Forenoon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Timerange)
	fc.Result = res
	return ec.marshalOTimerange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx, field.Selections, res)
}

func (ec *executionContext) _RawOpeningHour_afternoon(ctx context.Context, field graphql.CollectedField, obj *RawOpeningHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawOpeningHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Afternoon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Timerange)
	fc.Result = res
	return ec.marshalOTimerange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_day(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.DayOfWeek)
	fc.Result = res
	return ec.marshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_notWorking(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotWorking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_break(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Break, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_shortDay(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_fullDay(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_forenoon(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Forenoon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Timerange)
	fc.Result = res
	return ec.marshalOTimerange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx, field.Selections, res)
}

func (ec *executionContext) _RawWorkingHours_afternoon(ctx context.Context, field graphql.CollectedField, obj *RawWorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RawWorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Afternoon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Timerange)
	fc.Result = res
	return ec.marshalOTimerange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx, field.Selections, res)
}

func (ec *executionContext) _RegisterPayload_status(ctx context.Context, field graphql.CollectedField, obj *RegisterPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RegisterPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RelatedCompanies_companies(ctx context.Context, field graphql.CollectedField, obj *RelatedCompanies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelatedCompanies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RelatedCompanies_isAdmin(ctx context.Context, field graphql.CollectedField, obj *RelatedCompanies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RelatedCompanies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RemoveViewerProfilePicturePayload_image(ctx context.Context, field graphql.CollectedField, obj *RemoveViewerProfilePicturePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RemoveViewerProfilePicturePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _RemoveViewerProfilePicturePayload_user(ctx context.Context, field graphql.CollectedField, obj *RemoveViewerProfilePicturePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RemoveViewerProfilePicturePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplaceExistingProductsPayload_productSubCategory(ctx context.Context, field graphql.CollectedField, obj *ReplaceExistingProductsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplaceExistingProductsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductSubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _ReplaceExistingServicePayload_serviceSubCategory(ctx context.Context, field graphql.CollectedField, obj *ReplaceExistingServicePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReplaceExistingServicePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceSubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestActivationLinkPayload_status(ctx context.Context, field graphql.CollectedField, obj *RequestActivationLinkPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RequestActivationLinkPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestPasswordResetPayload_status(ctx context.Context, field graphql.CollectedField, obj *RequestPasswordResetPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RequestPasswordResetPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RescheduleAppointmentPayload_appointment(ctx context.Context, field graphql.CollectedField, obj *RescheduleAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RescheduleAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _ResetPasswordPayload_status(ctx context.Context, field graphql.CollectedField, obj *ResetPasswordPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ResetPasswordPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewAggregations_totalCount(ctx context.Context, field graphql.CollectedField, obj *ReviewAggregations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReviewAggregations",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewAggregations_averageRating(ctx context.Context, field graphql.CollectedField, obj *ReviewAggregations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReviewAggregations",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewAggregations_countPerStar(ctx context.Context, field graphql.CollectedField, obj *ReviewAggregations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReviewAggregations",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountPerStar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalNInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ReviewConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]prisma.IReview)
	fc.Result = res
	return ec.marshalNIReview2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SendEmailPayload_status(ctx context.Context, field graphql.CollectedField, obj *SendEmailPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SendEmailPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_name(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_desc(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Desc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_genderTarget(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().GenderTarget(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.GenderTarget)
	fc.Result = res
	return ec.marshalOGenderTarget2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_price(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Price(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Price)
	fc.Result = res
	return ec.marshalNPrice2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_duration(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Duration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_image(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_attributes(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Attributes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ProductServiceAttribute)
	fc.Result = res
	return ec.marshalNProductServiceAttribute2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_category(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_subCategory(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().SubCategory(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_active(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_reviews(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().Reviews(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ServiceReviewConnection)
	fc.Result = res
	return ec.marshalNServiceReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceReviewConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_viewerReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().ViewerReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceReview)
	fc.Result = res
	return ec.marshalOServiceReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_viewerCanReview(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().ViewerCanReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_reviewAggregations(ctx context.Context, field graphql.CollectedField, obj *prisma.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Service",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Service().ReviewAggregations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ReviewAggregations)
	fc.Result = res
	return ec.marshalOReviewAggregations2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewAggregations(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_name(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_services(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceCategory().Services(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*prisma.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceCategory_subCategories(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceCategory().SubCategories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ServiceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_type(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewType)
	fc.Result = res
	return ec.marshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_stars(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stars, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_title(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_text(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_status(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.ReviewStatus)
	fc.Result = res
	return ec.marshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_customer(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceReview().Customer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReview_service(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReview",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceReview().Service(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceReviewConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *ServiceReviewConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceReviewConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*prisma.ServiceReview)
	fc.Result = res
	return ec.marshalNServiceReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_id(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_createdAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_name(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_category(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceSubCategory().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceSubCategory_services(ctx context.Context, field graphql.CollectedField, obj *prisma.ServiceSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ServiceSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceSubCategory().Services(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*prisma.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_id(ctx context.Context, field graphql.CollectedField, obj *prisma.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_token(ctx context.Context, field graphql.CollectedField, obj *prisma.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SetProductActivePayload_product(ctx context.Context, field graphql.CollectedField, obj *SetProductActivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SetProductActivePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _SetServiceActivePayload_service(ctx context.Context, field graphql.CollectedField, obj *SetServiceActivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SetServiceActivePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffApproveAppointmentPayload_appointment(ctx context.Context, field graphql.CollectedField, obj *StaffApproveAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StaffApproveAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffCreateAppointmentPayload_appointment(ctx context.Context, field graphql.CollectedField, obj *StaffCreateAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StaffCreateAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffMemberConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *StaffMemberConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StaffMemberConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]prisma.IStaff)
	fc.Result = res
	return ec.marshalNIStaff2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIStaffᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _StaffUpdateAppointmentPayload_appointment(ctx context.Context, field graphql.CollectedField, obj *StaffUpdateAppointmentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "StaffUpdateAppointmentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _SubscribeNewsletterPayload_id(ctx context.Context, field graphql.CollectedField, obj *SubscribeNewsletterPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SubscribeNewsletterPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubscribeNewsletterPayload_uniqueEmailID(ctx context.Context, field graphql.CollectedField, obj *SubscribeNewsletterPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SubscribeNewsletterPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UniqueEmailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Timerange_start(ctx context.Context, field graphql.CollectedField, obj *Timerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Timerange",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Timerange_end(ctx context.Context, field graphql.CollectedField, obj *Timerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Timerange",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeslotRange_start(ctx context.Context, field graphql.CollectedField, obj *TimeslotRange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TimeslotRange",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimeslotRange_end(ctx context.Context, field graphql.CollectedField, obj *TimeslotRange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TimeslotRange",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Timeslots_duration(ctx context.Context, field graphql.CollectedField, obj *Timeslots) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Timeslots",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Timeslots_price(ctx context.Context, field graphql.CollectedField, obj *Timeslots) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Timeslots",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Price)
	fc.Result = res
	return ec.marshalNPrice2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Timeslots_ranges(ctx context.Context, field graphql.CollectedField, obj *Timeslots) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Timeslots",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ranges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*TimeslotRange)
	fc.Result = res
	return ec.marshalNTimeslotRange2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotRangeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAdministratorPayload_administrator(ctx context.Context, field graphql.CollectedField, obj *UpdateAdministratorPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateAdministratorPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Administrator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Administrator)
	fc.Result = res
	return ec.marshalNAdministrator2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppointmentImagePayload_appointment(ctx context.Context, field graphql.CollectedField, obj *UpdateAppointmentImagePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateAppointmentImagePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateBranchPayload_branch(ctx context.Context, field graphql.CollectedField, obj *UpdateBranchPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateBranchPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateCompanyPayload_company(ctx context.Context, field graphql.CollectedField, obj *UpdateCompanyPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateCompanyPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateCustomerPayload_customer(ctx context.Context, field graphql.CollectedField, obj *UpdateCustomerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateCustomerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateEmailTemplatePayload_template(ctx context.Context, field graphql.CollectedField, obj *UpdateEmailTemplatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateEmailTemplatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.EmailTemplate)
	fc.Result = res
	return ec.marshalNEmailTemplate2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateEmployeePayload_employee(ctx context.Context, field graphql.CollectedField, obj *UpdateEmployeePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateEmployeePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Employee)
	fc.Result = res
	return ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateManagerPayload_manager(ctx context.Context, field graphql.CollectedField, obj *UpdateManagerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateManagerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Manager)
	fc.Result = res
	return ec.marshalNManager2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateNewsPayload_news(ctx context.Context, field graphql.CollectedField, obj *UpdateNewsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateNewsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.News, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.News)
	fc.Result = res
	return ec.marshalNNews2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProductCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *UpdateProductCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateProductCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductCategory)
	fc.Result = res
	return ec.marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProductPayload_product(ctx context.Context, field graphql.CollectedField, obj *UpdateProductPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateProductPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateProductSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *UpdateProductSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateProductSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ProductSubCategory)
	fc.Result = res
	return ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateServiceCategoryPayload_category(ctx context.Context, field graphql.CollectedField, obj *UpdateServiceCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateServiceCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceCategory)
	fc.Result = res
	return ec.marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateServicePayload_service(ctx context.Context, field graphql.CollectedField, obj *UpdateServicePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateServicePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Service)
	fc.Result = res
	return ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateServiceSubCategoryPayload_subCategory(ctx context.Context, field graphql.CollectedField, obj *UpdateServiceSubCategoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateServiceSubCategoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.ServiceSubCategory)
	fc.Result = res
	return ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateViewerPayload_user(ctx context.Context, field graphql.CollectedField, obj *UpdateViewerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateViewerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadViewerProfilePicturePayload_image(ctx context.Context, field graphql.CollectedField, obj *UploadViewerProfilePicturePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadViewerProfilePicturePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _UploadViewerProfilePicturePayload_user(ctx context.Context, field graphql.CollectedField, obj *UploadViewerProfilePicturePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UploadViewerProfilePicturePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IUser)
	fc.Result = res
	return ec.marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UpsertBranchOpeningHourPayload_branch(ctx context.Context, field graphql.CollectedField, obj *UpsertBranchOpeningHourPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpsertBranchOpeningHourPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*prisma.Branch)
	fc.Result = res
	return ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _UpsertReviewPayload_review(ctx context.Context, field graphql.CollectedField, obj *UpsertReviewPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpsertReviewPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(prisma.IReview)
	fc.Result = res
	return ec.marshalNIReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReview(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkingHours_formatted(ctx context.Context, field graphql.CollectedField, obj *WorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Formatted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*FormattedWorkingHours)
	fc.Result = res
	return ec.marshalNFormattedWorkingHours2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedWorkingHoursᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkingHours_raw(ctx context.Context, field graphql.CollectedField, obj *WorkingHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "WorkingHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*RawWorkingHours)
	fc.Result = res
	return ec.marshalNRawWorkingHours2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawWorkingHoursᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActivateAccountInput(ctx context.Context, obj interface{}) (ActivateAccountInput, error) {
	var it ActivateAccountInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppointmentInput(ctx context.Context, obj interface{}) (AppointmentInput, error) {
	var it AppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "order":
			var err error
			it.Order, err = ec.unmarshalOAppointmentOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOAppointmentStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "start":
			var err error
			it.Start, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "end":
			var err error
			it.End, err = ec.unmarshalODateFilter2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDateFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAppointmentOrderByInput(ctx context.Context, obj interface{}) (AppointmentOrderByInput, error) {
	var it AppointmentOrderByInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error
			it.Field, err = ec.unmarshalNAppointmentOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByFields(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchImageSlotInput(ctx context.Context, obj interface{}) (BranchImageSlotInput, error) {
	var it BranchImageSlotInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "slotNumber":
			var err error
			it.SlotNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "slotID":
			var err error
			it.SlotID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchID":
			var err error
			it.BranchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newImage":
			var err error
			it.NewImage, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "new":
			var err error
			it.New, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchesInput(ctx context.Context, obj interface{}) (BranchesInput, error) {
	var it BranchesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCancelAppointmentInput(ctx context.Context, obj interface{}) (CancelAppointmentInput, error) {
	var it CancelAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectAppointmentProduct(ctx context.Context, obj interface{}) (ConnectAppointmentProduct, error) {
	var it ConnectAppointmentProduct
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error
			it.Count, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectAppointmentService(ctx context.Context, obj interface{}) (ConnectAppointmentService, error) {
	var it ConnectAppointmentService
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAdministratorInput(ctx context.Context, obj interface{}) (CreateAdministratorInput, error) {
	var it CreateAdministratorInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "user":
			var err error
			it.User, err = ec.unmarshalNCreateUserData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppointmentData(ctx context.Context, obj interface{}) (CreateAppointmentData, error) {
	var it CreateAppointmentData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "start":
			var err error
			it.Start, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "services":
			var err error
			it.Services, err = ec.unmarshalOConnectAppointmentService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx, v)
			if err != nil {
				return it, err
			}
		case "products":
			var err error
			it.Products, err = ec.unmarshalOConnectAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeImage":
			var err error
			it.BeforeImage, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppointmentReviewInput(ctx context.Context, obj interface{}) (CreateAppointmentReviewInput, error) {
	var it CreateAppointmentReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appointment":
			var err error
			it.Appointment, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error
			it.Review, err = ec.unmarshalNCreateReviewData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBranchData(ctx context.Context, obj interface{}) (CreateBranchData, error) {
	var it CreateBranchData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "welcomeMessage":
			var err error
			it.WelcomeMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "images":
			var err error
			it.Images, err = ec.unmarshalOUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "imagesSlot":
			var err error
			it.ImagesSlot, err = ec.unmarshalOBranchImageSlotInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "appTheme":
			var err error
			it.AppTheme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facebookLink":
			var err error
			it.FacebookLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tiktokLink":
			var err error
			it.TiktokLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagramLink":
			var err error
			it.InstagramLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpSendHost":
			var err error
			it.SMTPSendHost, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpSendPort":
			var err error
			it.SMTPSendPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpUsername":
			var err error
			it.SMTPUsername, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpPassword":
			var err error
			it.SMTPPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromEmail":
			var err error
			it.FromEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "websiteUrl":
			var err error
			it.WebsiteURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "navigationLink":
			var err error
			it.NavigationLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sharingRedirectUrl":
			var err error
			it.SharingRedirectURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailchimpApiKey":
			var err error
			it.MailchimpAPIKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailchimpListId":
			var err error
			it.MailchimpListID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imprint":
			var err error
			it.Imprint, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBranchInput(ctx context.Context, obj interface{}) (CreateBranchInput, error) {
	var it CreateBranchInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "company":
			var err error
			it.Company, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateBranchData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyData(ctx context.Context, obj interface{}) (CreateCompanyData, error) {
	var it CreateCompanyData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "customUrls":
			var err error
			it.CustomUrls, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sharingRedirectUrl":
			var err error
			it.SharingRedirectURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "appTheme":
			var err error
			it.AppTheme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaShortName":
			var err error
			it.PwaShortName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaIcon":
			var err error
			it.PwaIcon, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaThemeColor":
			var err error
			it.PwaThemeColor, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaBackgroundColor":
			var err error
			it.PwaBackgroundColor, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyInput(ctx context.Context, obj interface{}) (CreateCompanyInput, error) {
	var it CreateCompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateCompanyData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerData(ctx context.Context, obj interface{}) (CreateCustomerData, error) {
	var it CreateCustomerData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowReviewSharing":
			var err error
			it.AllowReviewSharing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerInput(ctx context.Context, obj interface{}) (CreateCustomerInput, error) {
	var it CreateCustomerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "company":
			var err error
			it.Company, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalNCreateUserData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer":
			var err error
			it.Customer, err = ec.unmarshalNCreateCustomerData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEmployeeData(ctx context.Context, obj interface{}) (CreateEmployeeData, error) {
	var it CreateEmployeeData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "workingHours":
			var err error
			it.WorkingHours, err = ec.unmarshalOWorkingHoursInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEmployeeInput(ctx context.Context, obj interface{}) (CreateEmployeeInput, error) {
	var it CreateEmployeeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateUserData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee":
			var err error
			it.Employee, err = ec.unmarshalNCreateEmployeeData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFavoriteData(ctx context.Context, obj interface{}) (CreateFavoriteData, error) {
	var it CreateFavoriteData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "product":
			var err error
			it.Product, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service":
			var err error
			it.Service, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFavoriteInput(ctx context.Context, obj interface{}) (CreateFavoriteInput, error) {
	var it CreateFavoriteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateFavoriteData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateManagerData(ctx context.Context, obj interface{}) (CreateManagerData, error) {
	var it CreateManagerData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "workingHours":
			var err error
			it.WorkingHours, err = ec.unmarshalOWorkingHoursInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateManagerInput(ctx context.Context, obj interface{}) (CreateManagerInput, error) {
	var it CreateManagerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "company":
			var err error
			it.Company, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalNCreateUserData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx, v)
			if err != nil {
				return it, err
			}
		case "manager":
			var err error
			it.Manager, err = ec.unmarshalNCreateManagerData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateNewsData(ctx context.Context, obj interface{}) (CreateNewsData, error) {
	var it CreateNewsData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateNewsInput(ctx context.Context, obj interface{}) (CreateNewsInput, error) {
	var it CreateNewsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateNewsData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductCategoryData(ctx context.Context, obj interface{}) (CreateProductCategoryData, error) {
	var it CreateProductCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductCategoryInput(ctx context.Context, obj interface{}) (CreateProductCategoryInput, error) {
	var it CreateProductCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateProductCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductData(ctx context.Context, obj interface{}) (CreateProductData, error) {
	var it CreateProductData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error
			it.Price, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacity":
			var err error
			it.Capacity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subcategory":
			var err error
			it.Subcategory, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			it.Attributes, err = ec.unmarshalOProductServiceAttributeInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductInput(ctx context.Context, obj interface{}) (CreateProductInput, error) {
	var it CreateProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateProductData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductReviewInput(ctx context.Context, obj interface{}) (CreateProductReviewInput, error) {
	var it CreateProductReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "product":
			var err error
			it.Product, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error
			it.Review, err = ec.unmarshalNCreateReviewData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductSubCategoryData(ctx context.Context, obj interface{}) (CreateProductSubCategoryData, error) {
	var it CreateProductSubCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "productCategoryId":
			var err error
			it.ProductCategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductSubCategoryInput(ctx context.Context, obj interface{}) (CreateProductSubCategoryInput, error) {
	var it CreateProductSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateProductSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateReviewData(ctx context.Context, obj interface{}) (CreateReviewData, error) {
	var it CreateReviewData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "stars":
			var err error
			it.Stars, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceCategoryData(ctx context.Context, obj interface{}) (CreateServiceCategoryData, error) {
	var it CreateServiceCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceCategoryInput(ctx context.Context, obj interface{}) (CreateServiceCategoryInput, error) {
	var it CreateServiceCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateServiceCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceData(ctx context.Context, obj interface{}) (CreateServiceData, error) {
	var it CreateServiceData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error
			it.Price, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error
			it.Duration, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subcategory":
			var err error
			it.Subcategory, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "genderTarget":
			var err error
			it.GenderTarget, err = ec.unmarshalNGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			it.Attributes, err = ec.unmarshalOProductServiceAttributeInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceInput(ctx context.Context, obj interface{}) (CreateServiceInput, error) {
	var it CreateServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateServiceData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceReviewInput(ctx context.Context, obj interface{}) (CreateServiceReviewInput, error) {
	var it CreateServiceReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "service":
			var err error
			it.Service, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error
			it.Review, err = ec.unmarshalNCreateReviewData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceSubCategoryData(ctx context.Context, obj interface{}) (CreateServiceSubCategoryData, error) {
	var it CreateServiceSubCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "categoryId":
			var err error
			it.CategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateServiceSubCategoryInput(ctx context.Context, obj interface{}) (CreateServiceSubCategoryInput, error) {
	var it CreateServiceSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateServiceSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserData(ctx context.Context, obj interface{}) (CreateUserData, error) {
	var it CreateUserData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error
			it.Street, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerInput(ctx context.Context, obj interface{}) (CustomerInput, error) {
	var it CustomerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error
			it.Order, err = ec.unmarshalOCustomerOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerOrderByInput(ctx context.Context, obj interface{}) (CustomerOrderByInput, error) {
	var it CustomerOrderByInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error
			it.Field, err = ec.unmarshalNCustomerOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByFields(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerRequestAppointmentInput(ctx context.Context, obj interface{}) (CustomerRequestAppointmentInput, error) {
	var it CustomerRequestAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee":
			var err error
			it.Employee, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateAppointmentData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAppointmentData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateFilter(ctx context.Context, obj interface{}) (DateFilter, error) {
	var it DateFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gt":
			var err error
			it.Gt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gte":
			var err error
			it.Gte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error
			it.Lt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lte":
			var err error
			it.Lte, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteAdministratorInput(ctx context.Context, obj interface{}) (DeleteAdministratorInput, error) {
	var it DeleteAdministratorInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteBranchImageInput(ctx context.Context, obj interface{}) (DeleteBranchImageInput, error) {
	var it DeleteBranchImageInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "slotID":
			var err error
			it.SlotID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchID":
			var err error
			it.BranchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteBranchInput(ctx context.Context, obj interface{}) (DeleteBranchInput, error) {
	var it DeleteBranchInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteCompanyInput(ctx context.Context, obj interface{}) (DeleteCompanyInput, error) {
	var it DeleteCompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteCustomerInput(ctx context.Context, obj interface{}) (DeleteCustomerInput, error) {
	var it DeleteCustomerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteEmployeeInput(ctx context.Context, obj interface{}) (DeleteEmployeeInput, error) {
	var it DeleteEmployeeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteFavoriteInput(ctx context.Context, obj interface{}) (DeleteFavoriteInput, error) {
	var it DeleteFavoriteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteManagerInput(ctx context.Context, obj interface{}) (DeleteManagerInput, error) {
	var it DeleteManagerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteNewsInput(ctx context.Context, obj interface{}) (DeleteNewsInput, error) {
	var it DeleteNewsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProductCategoryInput(ctx context.Context, obj interface{}) (DeleteProductCategoryInput, error) {
	var it DeleteProductCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProductInput(ctx context.Context, obj interface{}) (DeleteProductInput, error) {
	var it DeleteProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteProductSubCategoryInput(ctx context.Context, obj interface{}) (DeleteProductSubCategoryInput, error) {
	var it DeleteProductSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteServiceCategoryInput(ctx context.Context, obj interface{}) (DeleteServiceCategoryInput, error) {
	var it DeleteServiceCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteServiceInput(ctx context.Context, obj interface{}) (DeleteServiceInput, error) {
	var it DeleteServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteServiceSubCategoryInput(ctx context.Context, obj interface{}) (DeleteServiceSubCategoryInput, error) {
	var it DeleteServiceSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditEmployeeAvailabilityInput(ctx context.Context, obj interface{}) (EditEmployeeAvailabilityInput, error) {
	var it EditEmployeeAvailabilityInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "startDate":
			var err error
			it.StartDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error
			it.EndDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "employeeID":
			var err error
			it.EmployeeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNAvailabilityStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAvailabilityStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailTemplateInput(ctx context.Context, obj interface{}) (EmailTemplateInput, error) {
	var it EmailTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmployeeInput(ctx context.Context, obj interface{}) (EmployeeInput, error) {
	var it EmployeeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputForceAppointmentNotificationInput(ctx context.Context, obj interface{}) (ForceAppointmentNotificationInput, error) {
	var it ForceAppointmentNotificationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appointment":
			var err error
			it.Appointment, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj interface{}) (LoginInput, error) {
	var it LoginInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotifyAllCustomersInput(ctx context.Context, obj interface{}) (NotifyAllCustomersInput, error) {
	var it NotifyAllCustomersInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (PaginationInput, error) {
	var it PaginationInput
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["limit"]; !present {
		asMap["limit"] = 10
	}

	for k, v := range asMap {
		switch k {
		case "after":
			var err error
			it.After, err = ec.unmarshalOCursor2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductInput(ctx context.Context, obj interface{}) (ProductInput, error) {
	var it ProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error
			it.Order, err = ec.unmarshalOProductOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductOrderByInput(ctx context.Context, obj interface{}) (ProductOrderByInput, error) {
	var it ProductOrderByInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error
			it.Field, err = ec.unmarshalNProductOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByFields(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductServiceAttributeInput(ctx context.Context, obj interface{}) (ProductServiceAttributeInput, error) {
	var it ProductServiceAttributeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "key":
			var err error
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj interface{}) (RegisterInput, error) {
	var it RegisterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReplaceExistingProductInput(ctx context.Context, obj interface{}) (ReplaceExistingProductInput, error) {
	var it ReplaceExistingProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "categoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subCategoryID":
			var err error
			it.SubCategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "products":
			var err error
			it.Products, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReplaceExistingServiceInput(ctx context.Context, obj interface{}) (ReplaceExistingServiceInput, error) {
	var it ReplaceExistingServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "categoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subCategoryID":
			var err error
			it.SubCategoryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "services":
			var err error
			it.Services, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestActivationLinkInput(ctx context.Context, obj interface{}) (RequestActivationLinkInput, error) {
	var it RequestActivationLinkInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestPasswordResetInput(ctx context.Context, obj interface{}) (RequestPasswordResetInput, error) {
	var it RequestPasswordResetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRescheduleAppointmentInput(ctx context.Context, obj interface{}) (RescheduleAppointmentInput, error) {
	var it RescheduleAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newDate":
			var err error
			it.NewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "employeeID":
			var err error
			it.EmployeeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetPasswordInput(ctx context.Context, obj interface{}) (ResetPasswordInput, error) {
	var it ResetPasswordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewInput(ctx context.Context, obj interface{}) (ReviewInput, error) {
	var it ReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "customer":
			var err error
			it.Customer, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOReviewStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOReviewType2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error
			it.Order, err = ec.unmarshalOReviewOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReviewOrderByInput(ctx context.Context, obj interface{}) (ReviewOrderByInput, error) {
	var it ReviewOrderByInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error
			it.Field, err = ec.unmarshalNReviewOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByFields(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendInviteEmailInput(ctx context.Context, obj interface{}) (SendInviteEmailInput, error) {
	var it SendInviteEmailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendUserNotificationInput(ctx context.Context, obj interface{}) (SendUserNotificationInput, error) {
	var it SendUserNotificationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error
			it.Users, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceInput(ctx context.Context, obj interface{}) (ServiceInput, error) {
	var it ServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error
			it.Order, err = ec.unmarshalOServiceOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "genderTarget":
			var err error
			it.GenderTarget, err = ec.unmarshalOGenderTarget2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceOrderByInput(ctx context.Context, obj interface{}) (ServiceOrderByInput, error) {
	var it ServiceOrderByInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "field":
			var err error
			it.Field, err = ec.unmarshalNServiceOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByFields(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetProductActiveInput(ctx context.Context, obj interface{}) (SetProductActiveInput, error) {
	var it SetProductActiveInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "active":
			var err error
			it.Active, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "productID":
			var err error
			it.ProductID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetServiceActiveInput(ctx context.Context, obj interface{}) (SetServiceActiveInput, error) {
	var it SetServiceActiveInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "active":
			var err error
			it.Active, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "serviceID":
			var err error
			it.ServiceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffApproveAppointmentInput(ctx context.Context, obj interface{}) (StaffApproveAppointmentInput, error) {
	var it StaffApproveAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalOStaffApproveAppointmentPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffApproveAppointmentPatch(ctx context.Context, obj interface{}) (StaffApproveAppointmentPatch, error) {
	var it StaffApproveAppointmentPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffCreateAppointmentInput(ctx context.Context, obj interface{}) (StaffCreateAppointmentInput, error) {
	var it StaffCreateAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer":
			var err error
			it.Customer, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee":
			var err error
			it.Employee, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNCreateAppointmentData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAppointmentData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffMemberInput(ctx context.Context, obj interface{}) (StaffMemberInput, error) {
	var it StaffMemberInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffUpdateAppointmentInput(ctx context.Context, obj interface{}) (StaffUpdateAppointmentInput, error) {
	var it StaffUpdateAppointmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNStaffUpdateAppointmentPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffUpdateAppointmentPatch(ctx context.Context, obj interface{}) (StaffUpdateAppointmentPatch, error) {
	var it StaffUpdateAppointmentPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimerangeInput(ctx context.Context, obj interface{}) (TimerangeInput, error) {
	var it TimerangeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "start":
			var err error
			it.Start, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end":
			var err error
			it.End, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimeslotInput(ctx context.Context, obj interface{}) (TimeslotInput, error) {
	var it TimeslotInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee":
			var err error
			it.Employee, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start":
			var err error
			it.Start, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "services":
			var err error
			it.Services, err = ec.unmarshalNConnectAppointmentService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "products":
			var err error
			it.Products, err = ec.unmarshalOConnectAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProductᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAdministratorInput(ctx context.Context, obj interface{}) (UpdateAdministratorInput, error) {
	var it UpdateAdministratorInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAppointmentImageInput(ctx context.Context, obj interface{}) (UpdateAppointmentImageInput, error) {
	var it UpdateAppointmentImageInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appointment":
			var err error
			it.Appointment, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBranchInput(ctx context.Context, obj interface{}) (UpdateBranchInput, error) {
	var it UpdateBranchInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateBranchPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBranchPatch(ctx context.Context, obj interface{}) (UpdateBranchPatch, error) {
	var it UpdateBranchPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "welcomeMessage":
			var err error
			it.WelcomeMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "images":
			var err error
			it.Images, err = ec.unmarshalOUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "imagesSlot":
			var err error
			it.ImagesSlot, err = ec.unmarshalOBranchImageSlotInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "appTheme":
			var err error
			it.AppTheme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facebookLink":
			var err error
			it.FacebookLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tiktokLink":
			var err error
			it.TiktokLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagramLink":
			var err error
			it.InstagramLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpSendHost":
			var err error
			it.SMTPSendHost, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpSendPort":
			var err error
			it.SMTPSendPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpUsername":
			var err error
			it.SMTPUsername, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smtpPassword":
			var err error
			it.SMTPPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromEmail":
			var err error
			it.FromEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "websiteUrl":
			var err error
			it.WebsiteURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "navigationLink":
			var err error
			it.NavigationLink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sharingRedirectUrl":
			var err error
			it.SharingRedirectURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailchimpApiKey":
			var err error
			it.MailchimpAPIKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailchimpListId":
			var err error
			it.MailchimpListID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imprint":
			var err error
			it.Imprint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyData(ctx context.Context, obj interface{}) (UpdateCompanyData, error) {
	var it UpdateCompanyData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "customUrls":
			var err error
			it.CustomUrls, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sharingRedirectUrl":
			var err error
			it.SharingRedirectURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "appTheme":
			var err error
			it.AppTheme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaShortName":
			var err error
			it.PwaShortName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaIcon":
			var err error
			it.PwaIcon, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaThemeColor":
			var err error
			it.PwaThemeColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pwaBackgroundColor":
			var err error
			it.PwaBackgroundColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyInput(ctx context.Context, obj interface{}) (UpdateCompanyInput, error) {
	var it UpdateCompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateCompanyData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCustomerInput(ctx context.Context, obj interface{}) (UpdateCustomerInput, error) {
	var it UpdateCustomerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patchUser":
			var err error
			it.PatchUser, err = ec.unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "patchCustomer":
			var err error
			it.PatchCustomer, err = ec.unmarshalNUpdateCustomerPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCustomerPatch(ctx context.Context, obj interface{}) (UpdateCustomerPatch, error) {
	var it UpdateCustomerPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowReviewSharing":
			var err error
			it.AllowReviewSharing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmailTemplateInput(ctx context.Context, obj interface{}) (UpdateEmailTemplateInput, error) {
	var it UpdateEmailTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateEmailTemplatePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmailTemplatePatch(ctx context.Context, obj interface{}) (UpdateEmailTemplatePatch, error) {
	var it UpdateEmailTemplatePatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmployeeInput(ctx context.Context, obj interface{}) (UpdateEmployeeInput, error) {
	var it UpdateEmployeeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "patchEmployee":
			var err error
			it.PatchEmployee, err = ec.unmarshalNUpdateEmployeePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmployeePatch(ctx context.Context, obj interface{}) (UpdateEmployeePatch, error) {
	var it UpdateEmployeePatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "workingHours":
			var err error
			it.WorkingHours, err = ec.unmarshalOWorkingHoursInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateManagerInput(ctx context.Context, obj interface{}) (UpdateManagerInput, error) {
	var it UpdateManagerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "patchManager":
			var err error
			it.PatchManager, err = ec.unmarshalNUpdateManagerPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateManagerPatch(ctx context.Context, obj interface{}) (UpdateManagerPatch, error) {
	var it UpdateManagerPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "workingHours":
			var err error
			it.WorkingHours, err = ec.unmarshalOWorkingHoursInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNewsInput(ctx context.Context, obj interface{}) (UpdateNewsInput, error) {
	var it UpdateNewsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateNewsPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNewsPatch(ctx context.Context, obj interface{}) (UpdateNewsPatch, error) {
	var it UpdateNewsPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNotificationTokenInput(ctx context.Context, obj interface{}) (UpdateNotificationTokenInput, error) {
	var it UpdateNotificationTokenInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductCategoryData(ctx context.Context, obj interface{}) (UpdateProductCategoryData, error) {
	var it UpdateProductCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductCategoryInput(ctx context.Context, obj interface{}) (UpdateProductCategoryInput, error) {
	var it UpdateProductCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateProductCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductInput(ctx context.Context, obj interface{}) (UpdateProductInput, error) {
	var it UpdateProductInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateProductPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductPatch(ctx context.Context, obj interface{}) (UpdateProductPatch, error) {
	var it UpdateProductPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error
			it.Price, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacity":
			var err error
			it.Capacity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subCategory":
			var err error
			it.SubCategory, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			it.Attributes, err = ec.unmarshalOProductServiceAttributeInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "removeAttributes":
			var err error
			it.RemoveAttributes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductSubCategoryData(ctx context.Context, obj interface{}) (UpdateProductSubCategoryData, error) {
	var it UpdateProductSubCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductSubCategoryInput(ctx context.Context, obj interface{}) (UpdateProductSubCategoryInput, error) {
	var it UpdateProductSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateProductSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateReviewPatch(ctx context.Context, obj interface{}) (UpdateReviewPatch, error) {
	var it UpdateReviewPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "stars":
			var err error
			it.Stars, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error
			it.Text, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOReviewStatus2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServiceCategoryData(ctx context.Context, obj interface{}) (UpdateServiceCategoryData, error) {
	var it UpdateServiceCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServiceCategoryInput(ctx context.Context, obj interface{}) (UpdateServiceCategoryInput, error) {
	var it UpdateServiceCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateServiceCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServiceInput(ctx context.Context, obj interface{}) (UpdateServiceInput, error) {
	var it UpdateServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateServicePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServicePatch(ctx context.Context, obj interface{}) (UpdateServicePatch, error) {
	var it UpdateServicePatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "desc":
			var err error
			it.Desc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error
			it.Price, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "genderTarget":
			var err error
			it.GenderTarget, err = ec.unmarshalOGenderTarget2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subcategory":
			var err error
			it.Subcategory, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			it.Attributes, err = ec.unmarshalOProductServiceAttributeInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "removeAttributes":
			var err error
			it.RemoveAttributes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServiceSubCategoryData(ctx context.Context, obj interface{}) (UpdateServiceSubCategoryData, error) {
	var it UpdateServiceSubCategoryData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateServiceSubCategoryInput(ctx context.Context, obj interface{}) (UpdateServiceSubCategoryInput, error) {
	var it UpdateServiceSubCategoryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateServiceSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryData(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserPatch(ctx context.Context, obj interface{}) (UpdateUserPatch, error) {
	var it UpdateUserPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error
			it.Gender, err = ec.unmarshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error
			it.Street, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateViewerInput(ctx context.Context, obj interface{}) (UpdateViewerInput, error) {
	var it UpdateViewerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowReviewSharing":
			var err error
			it.AllowReviewSharing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertBranchOpeningHourInput(ctx context.Context, obj interface{}) (UpsertBranchOpeningHourInput, error) {
	var it UpsertBranchOpeningHourInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "branch":
			var err error
			it.Branch, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patch":
			var err error
			it.Patch, err = ec.unmarshalNUpsertBranchOpeningHourPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertBranchOpeningHourPatch(ctx context.Context, obj interface{}) (UpsertBranchOpeningHourPatch, error) {
	var it UpsertBranchOpeningHourPatch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error
			it.Day, err = ec.unmarshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx, v)
			if err != nil {
				return it, err
			}
		case "closed":
			var err error
			it.Closed, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "break":
			var err error
			it.Break, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "forenoon":
			var err error
			it.Forenoon, err = ec.unmarshalOTimerangeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "afternoon":
			var err error
			it.Afternoon, err = ec.unmarshalOTimerangeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpsertReviewInput(ctx context.Context, obj interface{}) (UpsertReviewInput, error) {
	var it UpsertReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appointment":
			var err error
			it.Appointment, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "product":
			var err error
			it.Product, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service":
			var err error
			it.Service, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error
			it.Review, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error
			it.Data, err = ec.unmarshalNUpdateReviewPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateReviewPatch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkingHoursInput(ctx context.Context, obj interface{}) (WorkingHoursInput, error) {
	var it WorkingHoursInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error
			it.Day, err = ec.unmarshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx, v)
			if err != nil {
				return it, err
			}
		case "notWorking":
			var err error
			it.NotWorking, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "break":
			var err error
			it.Break, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "forenoon":
			var err error
			it.Forenoon, err = ec.unmarshalOTimerangeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "afternoon":
			var err error
			it.Afternoon, err = ec.unmarshalOTimerangeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _AuthPayload(ctx context.Context, sel ast.SelectionSet, obj AuthPayload) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case LoginPayload:
		return ec._LoginPayload(ctx, sel, &obj)
	case *LoginPayload:
		if obj == nil {
			return graphql.Null
		}
		return ec._LoginPayload(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IAppointmentReview(ctx context.Context, sel ast.SelectionSet, obj IAppointmentReview) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.AppointmentReview:
		return ec._AppointmentReview(ctx, sel, &obj)
	case *prisma.AppointmentReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._AppointmentReview(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ICustomer(ctx context.Context, sel ast.SelectionSet, obj ICustomer) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Customer:
		return ec._Customer(ctx, sel, &obj)
	case *prisma.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IEmployee(ctx context.Context, sel ast.SelectionSet, obj IEmployee) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *prisma.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IManager(ctx context.Context, sel ast.SelectionSet, obj IManager) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *prisma.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IProductReview(ctx context.Context, sel ast.SelectionSet, obj IProductReview) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.ProductReview:
		return ec._ProductReview(ctx, sel, &obj)
	case *prisma.ProductReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductReview(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IPublicStaff(ctx context.Context, sel ast.SelectionSet, obj prisma.IPublicStaff) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *prisma.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case prisma.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *prisma.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IReview(ctx context.Context, sel ast.SelectionSet, obj prisma.IReview) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.AppointmentReview:
		return ec._AppointmentReview(ctx, sel, &obj)
	case *prisma.AppointmentReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._AppointmentReview(ctx, sel, obj)
	case prisma.ProductReview:
		return ec._ProductReview(ctx, sel, &obj)
	case *prisma.ProductReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductReview(ctx, sel, obj)
	case prisma.ServiceReview:
		return ec._ServiceReview(ctx, sel, &obj)
	case *prisma.ServiceReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceReview(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IServiceReview(ctx context.Context, sel ast.SelectionSet, obj IServiceReview) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.ServiceReview:
		return ec._ServiceReview(ctx, sel, &obj)
	case *prisma.ServiceReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceReview(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IStaff(ctx context.Context, sel ast.SelectionSet, obj prisma.IStaff) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *prisma.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case prisma.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *prisma.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IUser(ctx context.Context, sel ast.SelectionSet, obj prisma.IUser) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Administrator:
		return ec._Administrator(ctx, sel, &obj)
	case *prisma.Administrator:
		if obj == nil {
			return graphql.Null
		}
		return ec._Administrator(ctx, sel, obj)
	case prisma.Customer:
		return ec._Customer(ctx, sel, &obj)
	case *prisma.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	case prisma.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *prisma.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case prisma.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *prisma.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case prisma.Appointment:
		return ec._Appointment(ctx, sel, &obj)
	case *prisma.Appointment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Appointment(ctx, sel, obj)
	case prisma.Branch:
		return ec._Branch(ctx, sel, &obj)
	case *prisma.Branch:
		if obj == nil {
			return graphql.Null
		}
		return ec._Branch(ctx, sel, obj)
	case prisma.Company:
		return ec._Company(ctx, sel, &obj)
	case *prisma.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case prisma.Favorite:
		return ec._Favorite(ctx, sel, &obj)
	case *prisma.Favorite:
		if obj == nil {
			return graphql.Null
		}
		return ec._Favorite(ctx, sel, obj)
	case prisma.News:
		return ec._News(ctx, sel, &obj)
	case *prisma.News:
		if obj == nil {
			return graphql.Null
		}
		return ec._News(ctx, sel, obj)
	case prisma.Product:
		return ec._Product(ctx, sel, &obj)
	case *prisma.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case prisma.ProductCategory:
		return ec._ProductCategory(ctx, sel, &obj)
	case *prisma.ProductCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductCategory(ctx, sel, obj)
	case prisma.ProductSubCategory:
		return ec._ProductSubCategory(ctx, sel, &obj)
	case *prisma.ProductSubCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductSubCategory(ctx, sel, obj)
	case prisma.AppointmentReview:
		return ec._AppointmentReview(ctx, sel, &obj)
	case *prisma.AppointmentReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._AppointmentReview(ctx, sel, obj)
	case prisma.ProductReview:
		return ec._ProductReview(ctx, sel, &obj)
	case *prisma.ProductReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProductReview(ctx, sel, obj)
	case prisma.ServiceReview:
		return ec._ServiceReview(ctx, sel, &obj)
	case *prisma.ServiceReview:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceReview(ctx, sel, obj)
	case prisma.Service:
		return ec._Service(ctx, sel, &obj)
	case *prisma.Service:
		if obj == nil {
			return graphql.Null
		}
		return ec._Service(ctx, sel, obj)
	case prisma.ServiceCategory:
		return ec._ServiceCategory(ctx, sel, &obj)
	case *prisma.ServiceCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceCategory(ctx, sel, obj)
	case prisma.ServiceSubCategory:
		return ec._ServiceSubCategory(ctx, sel, &obj)
	case *prisma.ServiceSubCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceSubCategory(ctx, sel, obj)
	case prisma.Session:
		return ec._Session(ctx, sel, &obj)
	case *prisma.Session:
		if obj == nil {
			return graphql.Null
		}
		return ec._Session(ctx, sel, obj)
	case prisma.Administrator:
		return ec._Administrator(ctx, sel, &obj)
	case *prisma.Administrator:
		if obj == nil {
			return graphql.Null
		}
		return ec._Administrator(ctx, sel, obj)
	case prisma.Customer:
		return ec._Customer(ctx, sel, &obj)
	case *prisma.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	case prisma.Employee:
		return ec._Employee(ctx, sel, &obj)
	case *prisma.Employee:
		if obj == nil {
			return graphql.Null
		}
		return ec._Employee(ctx, sel, obj)
	case prisma.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *prisma.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _OpeningHourBase(ctx context.Context, sel ast.SelectionSet, obj OpeningHourBase) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case FormattedOpeningHour:
		return ec._FormattedOpeningHour(ctx, sel, &obj)
	case *FormattedOpeningHour:
		if obj == nil {
			return graphql.Null
		}
		return ec._FormattedOpeningHour(ctx, sel, obj)
	case RawOpeningHour:
		return ec._RawOpeningHour(ctx, sel, &obj)
	case *RawOpeningHour:
		if obj == nil {
			return graphql.Null
		}
		return ec._RawOpeningHour(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _WorkingHoursBase(ctx context.Context, sel ast.SelectionSet, obj WorkingHoursBase) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case FormattedWorkingHours:
		return ec._FormattedWorkingHours(ctx, sel, &obj)
	case *FormattedWorkingHours:
		if obj == nil {
			return graphql.Null
		}
		return ec._FormattedWorkingHours(ctx, sel, obj)
	case RawWorkingHours:
		return ec._RawWorkingHours(ctx, sel, &obj)
	case *RawWorkingHours:
		if obj == nil {
			return graphql.Null
		}
		return ec._RawWorkingHours(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activateAccountPayloadImplementors = []string{"ActivateAccountPayload"}

func (ec *executionContext) _ActivateAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *ActivateAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activateAccountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivateAccountPayload")
		case "status":
			out.Values[i] = ec._ActivateAccountPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var administratorImplementors = []string{"Administrator", "Node", "IUser"}

func (ec *executionContext) _Administrator(ctx context.Context, sel ast.SelectionSet, obj *prisma.Administrator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, administratorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Administrator")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Administrator_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Administrator_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Administrator_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_email(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_firstName(ctx, field, obj)
				return res
			})
		case "lastName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_lastName(ctx, field, obj)
				return res
			})
		case "fullName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_fullName(ctx, field, obj)
				return res
			})
		case "gender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_gender(ctx, field, obj)
				return res
			})
		case "zipCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_zipCode(ctx, field, obj)
				return res
			})
		case "street":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_street(ctx, field, obj)
				return res
			})
		case "city":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_city(ctx, field, obj)
				return res
			})
		case "birthday":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_birthday(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_image(ctx, field, obj)
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_phoneNumber(ctx, field, obj)
				return res
			})
		case "notificationToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Administrator_notificationToken(ctx, field, obj)
				return res
			})
		case "activated":
			out.Values[i] = ec._Administrator_activated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var administratorConnectionImplementors = []string{"AdministratorConnection"}

func (ec *executionContext) _AdministratorConnection(ctx context.Context, sel ast.SelectionSet, obj *AdministratorConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, administratorConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdministratorConnection")
		case "nodes":
			out.Values[i] = ec._AdministratorConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentImplementors = []string{"Appointment", "Node"}

func (ec *executionContext) _Appointment(ctx context.Context, sel ast.SelectionSet, obj *prisma.Appointment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Appointment")
		case "id":
			out.Values[i] = ec._Appointment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Appointment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Appointment_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "desc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_desc(ctx, field, obj)
				return res
			})
		case "start":
			out.Values[i] = ec._Appointment_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "end":
			out.Values[i] = ec._Appointment_end(ctx, field, obj)
		case "price":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_price(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "duration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_duration(ctx, field, obj)
				return res
			})
		case "status":
			out.Values[i] = ec._Appointment_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_note(ctx, field, obj)
				return res
			})
		case "beforeImage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_beforeImage(ctx, field, obj)
				return res
			})
		case "afterImage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_afterImage(ctx, field, obj)
				return res
			})
		case "employee":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_employee(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_customer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "review":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_review(ctx, field, obj)
				return res
			})
		case "viewerReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_viewerReview(ctx, field, obj)
				return res
			})
		case "viewerCanReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_viewerCanReview(ctx, field, obj)
				return res
			})
		case "products":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_products(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "services":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Appointment_services(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentConnectionImplementors = []string{"AppointmentConnection"}

func (ec *executionContext) _AppointmentConnection(ctx context.Context, sel ast.SelectionSet, obj *AppointmentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppointmentConnection")
		case "nodes":
			out.Values[i] = ec._AppointmentConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentProductImplementors = []string{"AppointmentProduct"}

func (ec *executionContext) _AppointmentProduct(ctx context.Context, sel ast.SelectionSet, obj *AppointmentProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppointmentProduct")
		case "item":
			out.Values[i] = ec._AppointmentProduct_item(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._AppointmentProduct_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentReviewImplementors = []string{"AppointmentReview", "Node", "IReview", "IAppointmentReview"}

func (ec *executionContext) _AppointmentReview(ctx context.Context, sel ast.SelectionSet, obj *prisma.AppointmentReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppointmentReview")
		case "id":
			out.Values[i] = ec._AppointmentReview_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._AppointmentReview_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._AppointmentReview_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._AppointmentReview_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stars":
			out.Values[i] = ec._AppointmentReview_stars(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			out.Values[i] = ec._AppointmentReview_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "text":
			out.Values[i] = ec._AppointmentReview_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._AppointmentReview_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AppointmentReview_customer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "appointment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AppointmentReview_appointment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentReviewConnectionImplementors = []string{"AppointmentReviewConnection"}

func (ec *executionContext) _AppointmentReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *AppointmentReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentReviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppointmentReviewConnection")
		case "nodes":
			out.Values[i] = ec._AppointmentReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var approveReviewPayloadImplementors = []string{"ApproveReviewPayload"}

func (ec *executionContext) _ApproveReviewPayload(ctx context.Context, sel ast.SelectionSet, obj *ApproveReviewPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, approveReviewPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApproveReviewPayload")
		case "review":
			out.Values[i] = ec._ApproveReviewPayload_review(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchImplementors = []string{"Branch", "Node"}

func (ec *executionContext) _Branch(ctx context.Context, sel ast.SelectionSet, obj *prisma.Branch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Branch")
		case "id":
			out.Values[i] = ec._Branch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Branch_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Branch_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_name(ctx, field, obj)
				return res
			})
		case "welcomeMessage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_welcomeMessage(ctx, field, obj)
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_phoneNumber(ctx, field, obj)
				return res
			})
		case "address":
			out.Values[i] = ec._Branch_address(ctx, field, obj)
		case "images":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_images(ctx, field, obj)
				return res
			})
		case "websiteUrl":
			out.Values[i] = ec._Branch_websiteUrl(ctx, field, obj)
		case "navigationLink":
			out.Values[i] = ec._Branch_navigationLink(ctx, field, obj)
		case "sharingRedirectUrl":
			out.Values[i] = ec._Branch_sharingRedirectUrl(ctx, field, obj)
		case "imprint":
			out.Values[i] = ec._Branch_imprint(ctx, field, obj)
		case "facebookLink":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_facebookLink(ctx, field, obj)
				return res
			})
		case "tiktokLink":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_tiktokLink(ctx, field, obj)
				return res
			})
		case "instagramLink":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_instagramLink(ctx, field, obj)
				return res
			})
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "openingHours":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_openingHours(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "logo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_logo(ctx, field, obj)
				return res
			})
		case "appTheme":
			out.Values[i] = ec._Branch_appTheme(ctx, field, obj)
		case "news":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_news(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "slots":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_slots(ctx, field, obj)
				return res
			})
		case "smtpSendHost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_smtpSendHost(ctx, field, obj)
				return res
			})
		case "smtpSendPort":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_smtpSendPort(ctx, field, obj)
				return res
			})
		case "smtpUsername":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_smtpUsername(ctx, field, obj)
				return res
			})
		case "smtpPassword":
			out.Values[i] = ec._Branch_smtpPassword(ctx, field, obj)
		case "fromEmail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_fromEmail(ctx, field, obj)
				return res
			})
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_reviews(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "reviewAggregations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_reviewAggregations(ctx, field, obj)
				return res
			})
		case "mailchimpApiKey":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_mailchimpApiKey(ctx, field, obj)
				return res
			})
		case "mailchimpListId":
			out.Values[i] = ec._Branch_mailchimpListId(ctx, field, obj)
		case "mailchimpCredentialsValid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Branch_mailchimpCredentialsValid(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchConnectionImplementors = []string{"BranchConnection"}

func (ec *executionContext) _BranchConnection(ctx context.Context, sel ast.SelectionSet, obj *BranchConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchConnection")
		case "nodes":
			out.Values[i] = ec._BranchConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchImageSlotImplementors = []string{"BranchImageSlot"}

func (ec *executionContext) _BranchImageSlot(ctx context.Context, sel ast.SelectionSet, obj *BranchImageSlot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchImageSlotImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchImageSlot")
		case "id":
			out.Values[i] = ec._BranchImageSlot_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._BranchImageSlot_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._BranchImageSlot_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slotNumber":
			out.Values[i] = ec._BranchImageSlot_slotNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branch":
			out.Values[i] = ec._BranchImageSlot_branch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageUrl":
			out.Values[i] = ec._BranchImageSlot_imageUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cancelAppointmentPayloadImplementors = []string{"CancelAppointmentPayload"}

func (ec *executionContext) _CancelAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *CancelAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancelAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancelAppointmentPayload")
		case "appointment":
			out.Values[i] = ec._CancelAppointmentPayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyImplementors = []string{"Company", "Node"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *prisma.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Company_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Company_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_name(ctx, field, obj)
				return res
			})
		case "aliases":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_aliases(ctx, field, obj)
				return res
			})
		case "customUrls":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_customUrls(ctx, field, obj)
				return res
			})
		case "sharingRedirectUrl":
			out.Values[i] = ec._Company_sharingRedirectUrl(ctx, field, obj)
		case "logo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_logo(ctx, field, obj)
				return res
			})
		case "appTheme":
			out.Values[i] = ec._Company_appTheme(ctx, field, obj)
		case "pwaShortName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_pwaShortName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pwaIcon":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_pwaIcon(ctx, field, obj)
				return res
			})
		case "pwaThemeColor":
			out.Values[i] = ec._Company_pwaThemeColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pwaBackgroundColor":
			out.Values[i] = ec._Company_pwaBackgroundColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "branches":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_branches(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyConnectionImplementors = []string{"CompanyConnection"}

func (ec *executionContext) _CompanyConnection(ctx context.Context, sel ast.SelectionSet, obj *CompanyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyConnection")
		case "nodes":
			out.Values[i] = ec._CompanyConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createAdministratorPayloadImplementors = []string{"CreateAdministratorPayload"}

func (ec *executionContext) _CreateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateAdministratorPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createAdministratorPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateAdministratorPayload")
		case "administrator":
			out.Values[i] = ec._CreateAdministratorPayload_administrator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBranchPayloadImplementors = []string{"CreateBranchPayload"}

func (ec *executionContext) _CreateBranchPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateBranchPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBranchPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBranchPayload")
		case "branch":
			out.Values[i] = ec._CreateBranchPayload_branch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCompanyPayloadImplementors = []string{"CreateCompanyPayload"}

func (ec *executionContext) _CreateCompanyPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateCompanyPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCompanyPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCompanyPayload")
		case "company":
			out.Values[i] = ec._CreateCompanyPayload_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCustomerPayloadImplementors = []string{"CreateCustomerPayload"}

func (ec *executionContext) _CreateCustomerPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateCustomerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCustomerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCustomerPayload")
		case "customer":
			out.Values[i] = ec._CreateCustomerPayload_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createEmployeePayloadImplementors = []string{"CreateEmployeePayload"}

func (ec *executionContext) _CreateEmployeePayload(ctx context.Context, sel ast.SelectionSet, obj *CreateEmployeePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createEmployeePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateEmployeePayload")
		case "employee":
			out.Values[i] = ec._CreateEmployeePayload_employee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createFavoritePayloadImplementors = []string{"CreateFavoritePayload"}

func (ec *executionContext) _CreateFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *CreateFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateFavoritePayload")
		case "favorite":
			out.Values[i] = ec._CreateFavoritePayload_favorite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createManagerPayloadImplementors = []string{"CreateManagerPayload"}

func (ec *executionContext) _CreateManagerPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateManagerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createManagerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateManagerPayload")
		case "manager":
			out.Values[i] = ec._CreateManagerPayload_manager(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createNewsPayloadImplementors = []string{"CreateNewsPayload"}

func (ec *executionContext) _CreateNewsPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateNewsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createNewsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateNewsPayload")
		case "news":
			out.Values[i] = ec._CreateNewsPayload_news(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createProductCategoryPayloadImplementors = []string{"CreateProductCategoryPayload"}

func (ec *executionContext) _CreateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateProductCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductCategoryPayload")
		case "category":
			out.Values[i] = ec._CreateProductCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createProductPayloadImplementors = []string{"CreateProductPayload"}

func (ec *executionContext) _CreateProductPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateProductPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductPayload")
		case "product":
			out.Values[i] = ec._CreateProductPayload_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createProductSubCategoryPayloadImplementors = []string{"CreateProductSubCategoryPayload"}

func (ec *executionContext) _CreateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateProductSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._CreateProductSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createServiceCategoryPayloadImplementors = []string{"CreateServiceCategoryPayload"}

func (ec *executionContext) _CreateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateServiceCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createServiceCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateServiceCategoryPayload")
		case "category":
			out.Values[i] = ec._CreateServiceCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createServicePayloadImplementors = []string{"CreateServicePayload"}

func (ec *executionContext) _CreateServicePayload(ctx context.Context, sel ast.SelectionSet, obj *CreateServicePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createServicePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateServicePayload")
		case "service":
			out.Values[i] = ec._CreateServicePayload_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createServiceSubCategoryPayloadImplementors = []string{"CreateServiceSubCategoryPayload"}

func (ec *executionContext) _CreateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *CreateServiceSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createServiceSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateServiceSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._CreateServiceSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerImplementors = []string{"Customer", "Node", "IUser", "ICustomer"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *prisma.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Customer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Customer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Customer_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_email(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_firstName(ctx, field, obj)
				return res
			})
		case "lastName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_lastName(ctx, field, obj)
				return res
			})
		case "fullName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_fullName(ctx, field, obj)
				return res
			})
		case "gender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_gender(ctx, field, obj)
				return res
			})
		case "zipCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_zipCode(ctx, field, obj)
				return res
			})
		case "street":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_street(ctx, field, obj)
				return res
			})
		case "city":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_city(ctx, field, obj)
				return res
			})
		case "birthday":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_birthday(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_image(ctx, field, obj)
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_phoneNumber(ctx, field, obj)
				return res
			})
		case "note":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_note(ctx, field, obj)
				return res
			})
		case "allowReviewSharing":
			out.Values[i] = ec._Customer_allowReviewSharing(ctx, field, obj)
		case "appointments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_appointments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_reviews(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "notificationToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_notificationToken(ctx, field, obj)
				return res
			})
		case "activated":
			out.Values[i] = ec._Customer_activated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerConnectionImplementors = []string{"CustomerConnection"}

func (ec *executionContext) _CustomerConnection(ctx context.Context, sel ast.SelectionSet, obj *CustomerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerConnection")
		case "nodes":
			out.Values[i] = ec._CustomerConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerRequestAppointmentPayloadImplementors = []string{"CustomerRequestAppointmentPayload"}

func (ec *executionContext) _CustomerRequestAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *CustomerRequestAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerRequestAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerRequestAppointmentPayload")
		case "message":
			out.Values[i] = ec._CustomerRequestAppointmentPayload_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerReviewConnectionImplementors = []string{"CustomerReviewConnection"}

func (ec *executionContext) _CustomerReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *CustomerReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerReviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerReviewConnection")
		case "nodes":
			out.Values[i] = ec._CustomerReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteAdministratorPayloadImplementors = []string{"DeleteAdministratorPayload"}

func (ec *executionContext) _DeleteAdministratorPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteAdministratorPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteAdministratorPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteAdministratorPayload")
		case "administrator":
			out.Values[i] = ec._DeleteAdministratorPayload_administrator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBranchPayloadImplementors = []string{"DeleteBranchPayload"}

func (ec *executionContext) _DeleteBranchPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteBranchPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBranchPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteBranchPayload")
		case "branch":
			out.Values[i] = ec._DeleteBranchPayload_branch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCompanyPayloadImplementors = []string{"DeleteCompanyPayload"}

func (ec *executionContext) _DeleteCompanyPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteCompanyPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCompanyPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCompanyPayload")
		case "company":
			out.Values[i] = ec._DeleteCompanyPayload_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCustomerPayloadImplementors = []string{"DeleteCustomerPayload"}

func (ec *executionContext) _DeleteCustomerPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteCustomerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCustomerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCustomerPayload")
		case "customer":
			out.Values[i] = ec._DeleteCustomerPayload_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteEmployeePayloadImplementors = []string{"DeleteEmployeePayload"}

func (ec *executionContext) _DeleteEmployeePayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteEmployeePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteEmployeePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteEmployeePayload")
		case "employee":
			out.Values[i] = ec._DeleteEmployeePayload_employee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteFavoritePayloadImplementors = []string{"DeleteFavoritePayload"}

func (ec *executionContext) _DeleteFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteFavoritePayload")
		case "favorite":
			out.Values[i] = ec._DeleteFavoritePayload_favorite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteManagerPayloadImplementors = []string{"DeleteManagerPayload"}

func (ec *executionContext) _DeleteManagerPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteManagerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteManagerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteManagerPayload")
		case "manager":
			out.Values[i] = ec._DeleteManagerPayload_manager(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteNewsPayloadImplementors = []string{"DeleteNewsPayload"}

func (ec *executionContext) _DeleteNewsPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteNewsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteNewsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteNewsPayload")
		case "news":
			out.Values[i] = ec._DeleteNewsPayload_news(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProductCategoryPayloadImplementors = []string{"DeleteProductCategoryPayload"}

func (ec *executionContext) _DeleteProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteProductCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductCategoryPayload")
		case "category":
			out.Values[i] = ec._DeleteProductCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProductPayloadImplementors = []string{"DeleteProductPayload"}

func (ec *executionContext) _DeleteProductPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteProductPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductPayload")
		case "product":
			out.Values[i] = ec._DeleteProductPayload_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteProductSubCategoryPayloadImplementors = []string{"DeleteProductSubCategoryPayload"}

func (ec *executionContext) _DeleteProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteProductSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._DeleteProductSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteReviewPayloadImplementors = []string{"DeleteReviewPayload"}

func (ec *executionContext) _DeleteReviewPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteReviewPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteReviewPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteReviewPayload")
		case "review":
			out.Values[i] = ec._DeleteReviewPayload_review(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteServiceCategoryPayloadImplementors = []string{"DeleteServiceCategoryPayload"}

func (ec *executionContext) _DeleteServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteServiceCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteServiceCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceCategoryPayload")
		case "category":
			out.Values[i] = ec._DeleteServiceCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteServicePayloadImplementors = []string{"DeleteServicePayload"}

func (ec *executionContext) _DeleteServicePayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteServicePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteServicePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServicePayload")
		case "service":
			out.Values[i] = ec._DeleteServicePayload_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteServiceSubCategoryPayloadImplementors = []string{"DeleteServiceSubCategoryPayload"}

func (ec *executionContext) _DeleteServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *DeleteServiceSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteServiceSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._DeleteServiceSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var editEmployeeAvailabilityPayloadImplementors = []string{"EditEmployeeAvailabilityPayload"}

func (ec *executionContext) _EditEmployeeAvailabilityPayload(ctx context.Context, sel ast.SelectionSet, obj *EditEmployeeAvailabilityPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, editEmployeeAvailabilityPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EditEmployeeAvailabilityPayload")
		case "employee":
			out.Values[i] = ec._EditEmployeeAvailabilityPayload_employee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailTemplateImplementors = []string{"EmailTemplate"}

func (ec *executionContext) _EmailTemplate(ctx context.Context, sel ast.SelectionSet, obj *prisma.EmailTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailTemplate")
		case "id":
			out.Values[i] = ec._EmailTemplate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._EmailTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._EmailTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._EmailTemplate_name(ctx, field, obj)
		case "content":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmailTemplate_content(ctx, field, obj)
				return res
			})
		case "title":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmailTemplate_title(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailTemplateQueryPayloadImplementors = []string{"EmailTemplateQueryPayload"}

func (ec *executionContext) _EmailTemplateQueryPayload(ctx context.Context, sel ast.SelectionSet, obj *EmailTemplateQueryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailTemplateQueryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailTemplateQueryPayload")
		case "template":
			out.Values[i] = ec._EmailTemplateQueryPayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailTemplatesQueryPayloadImplementors = []string{"EmailTemplatesQueryPayload"}

func (ec *executionContext) _EmailTemplatesQueryPayload(ctx context.Context, sel ast.SelectionSet, obj *EmailTemplatesQueryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailTemplatesQueryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailTemplatesQueryPayload")
		case "templates":
			out.Values[i] = ec._EmailTemplatesQueryPayload_templates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var employeeImplementors = []string{"Employee", "Node", "IStaff", "IPublicStaff", "IUser", "IEmployee"}

func (ec *executionContext) _Employee(ctx context.Context, sel ast.SelectionSet, obj *prisma.Employee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Employee")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Employee_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Employee_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Employee_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_email(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_firstName(ctx, field, obj)
				return res
			})
		case "lastName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_lastName(ctx, field, obj)
				return res
			})
		case "fullName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_fullName(ctx, field, obj)
				return res
			})
		case "gender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_gender(ctx, field, obj)
				return res
			})
		case "zipCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_zipCode(ctx, field, obj)
				return res
			})
		case "street":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_street(ctx, field, obj)
				return res
			})
		case "city":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_city(ctx, field, obj)
				return res
			})
		case "birthday":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_birthday(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_image(ctx, field, obj)
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_phoneNumber(ctx, field, obj)
				return res
			})
		case "appointments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_appointments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "workingHours":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_workingHours(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "notificationToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Employee_notificationToken(ctx, field, obj)
				return res
			})
		case "activated":
			out.Values[i] = ec._Employee_activated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var employeeConnectionImplementors = []string{"EmployeeConnection"}

func (ec *executionContext) _EmployeeConnection(ctx context.Context, sel ast.SelectionSet, obj *EmployeeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, employeeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmployeeConnection")
		case "nodes":
			out.Values[i] = ec._EmployeeConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var favoriteImplementors = []string{"Favorite", "Node"}

func (ec *executionContext) _Favorite(ctx context.Context, sel ast.SelectionSet, obj *prisma.Favorite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, favoriteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Favorite")
		case "id":
			out.Values[i] = ec._Favorite_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Favorite_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Favorite_product(ctx, field, obj)
				return res
			})
		case "service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Favorite_service(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var favoritesPayloadImplementors = []string{"FavoritesPayload"}

func (ec *executionContext) _FavoritesPayload(ctx context.Context, sel ast.SelectionSet, obj *FavoritesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, favoritesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FavoritesPayload")
		case "products":
			out.Values[i] = ec._FavoritesPayload_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "services":
			out.Values[i] = ec._FavoritesPayload_services(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var formattedOpeningHourImplementors = []string{"FormattedOpeningHour", "OpeningHourBase"}

func (ec *executionContext) _FormattedOpeningHour(ctx context.Context, sel ast.SelectionSet, obj *FormattedOpeningHour) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, formattedOpeningHourImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FormattedOpeningHour")
		case "key":
			out.Values[i] = ec._FormattedOpeningHour_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closed":
			out.Values[i] = ec._FormattedOpeningHour_closed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "break":
			out.Values[i] = ec._FormattedOpeningHour_break(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDay":
			out.Values[i] = ec._FormattedOpeningHour_shortDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullDay":
			out.Values[i] = ec._FormattedOpeningHour_fullDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._FormattedOpeningHour_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var formattedWorkingHoursImplementors = []string{"FormattedWorkingHours", "WorkingHoursBase"}

func (ec *executionContext) _FormattedWorkingHours(ctx context.Context, sel ast.SelectionSet, obj *FormattedWorkingHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, formattedWorkingHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FormattedWorkingHours")
		case "key":
			out.Values[i] = ec._FormattedWorkingHours_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notWorking":
			out.Values[i] = ec._FormattedWorkingHours_notWorking(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "break":
			out.Values[i] = ec._FormattedWorkingHours_break(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDay":
			out.Values[i] = ec._FormattedWorkingHours_shortDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullDay":
			out.Values[i] = ec._FormattedWorkingHours_fullDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._FormattedWorkingHours_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Image_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var isValidPasswordTokenPayloadImplementors = []string{"IsValidPasswordTokenPayload"}

func (ec *executionContext) _IsValidPasswordTokenPayload(ctx context.Context, sel ast.SelectionSet, obj *IsValidPasswordTokenPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, isValidPasswordTokenPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IsValidPasswordTokenPayload")
		case "valid":
			out.Values[i] = ec._IsValidPasswordTokenPayload_valid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginPayloadImplementors = []string{"LoginPayload", "AuthPayload"}

func (ec *executionContext) _LoginPayload(ctx context.Context, sel ast.SelectionSet, obj *LoginPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginPayload")
		case "session":
			out.Values[i] = ec._LoginPayload_session(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._LoginPayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logoutPayloadImplementors = []string{"LogoutPayload"}

func (ec *executionContext) _LogoutPayload(ctx context.Context, sel ast.SelectionSet, obj *LogoutPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logoutPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogoutPayload")
		case "session":
			out.Values[i] = ec._LogoutPayload_session(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managerImplementors = []string{"Manager", "Node", "IStaff", "IPublicStaff", "IUser", "IManager"}

func (ec *executionContext) _Manager(ctx context.Context, sel ast.SelectionSet, obj *prisma.Manager) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Manager")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Manager_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Manager_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Manager_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_email(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "firstName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_firstName(ctx, field, obj)
				return res
			})
		case "lastName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_lastName(ctx, field, obj)
				return res
			})
		case "fullName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_fullName(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_image(ctx, field, obj)
				return res
			})
		case "gender":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_gender(ctx, field, obj)
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_phoneNumber(ctx, field, obj)
				return res
			})
		case "zipCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_zipCode(ctx, field, obj)
				return res
			})
		case "street":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_street(ctx, field, obj)
				return res
			})
		case "city":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_city(ctx, field, obj)
				return res
			})
		case "birthday":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_birthday(ctx, field, obj)
				return res
			})
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_company(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "appointments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_appointments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "notificationToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_notificationToken(ctx, field, obj)
				return res
			})
		case "workingHours":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Manager_workingHours(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "activated":
			out.Values[i] = ec._Manager_activated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managerConnectionImplementors = []string{"ManagerConnection"}

func (ec *executionContext) _ManagerConnection(ctx context.Context, sel ast.SelectionSet, obj *ManagerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagerConnection")
		case "nodes":
			out.Values[i] = ec._ManagerConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "cancelAppointment":
			out.Values[i] = ec._Mutation_cancelAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerRequestAppointment":
			out.Values[i] = ec._Mutation_customerRequestAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forceAppointmentNotification":
			out.Values[i] = ec._Mutation_forceAppointmentNotification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rescheduleAppointment":
			out.Values[i] = ec._Mutation_rescheduleAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffApproveAppointment":
			out.Values[i] = ec._Mutation_staffApproveAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffCreateAppointment":
			out.Values[i] = ec._Mutation_staffCreateAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffUpdateAppointment":
			out.Values[i] = ec._Mutation_staffUpdateAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBeforeImage":
			out.Values[i] = ec._Mutation_updateBeforeImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAfterImage":
			out.Values[i] = ec._Mutation_updateAfterImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activateAccount":
			out.Values[i] = ec._Mutation_activateAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logout":
			out.Values[i] = ec._Mutation_logout(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "register":
			out.Values[i] = ec._Mutation_register(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestActivationLink":
			out.Values[i] = ec._Mutation_requestActivationLink(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestPasswordReset":
			out.Values[i] = ec._Mutation_requestPasswordReset(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPassword":
			out.Values[i] = ec._Mutation_resetPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBranch":
			out.Values[i] = ec._Mutation_createBranch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBranch":
			out.Values[i] = ec._Mutation_deleteBranch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBranchImage":
			out.Values[i] = ec._Mutation_deleteBranchImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBranch":
			out.Values[i] = ec._Mutation_updateBranch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addImageSlot":
			out.Values[i] = ec._Mutation_addImageSlot(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertBranchOpeningHour":
			out.Values[i] = ec._Mutation_upsertBranchOpeningHour(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompany":
			out.Values[i] = ec._Mutation_createCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompany":
			out.Values[i] = ec._Mutation_deleteCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCompany":
			out.Values[i] = ec._Mutation_updateCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newEmailTemplate":
			out.Values[i] = ec._Mutation_newEmailTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendInviteEmail":
			out.Values[i] = ec._Mutation_sendInviteEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmailTemplate":
			out.Values[i] = ec._Mutation_updateEmailTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFavorite":
			out.Values[i] = ec._Mutation_createFavorite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFavorite":
			out.Values[i] = ec._Mutation_deleteFavorite(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscribeNewsletter":
			out.Values[i] = ec._Mutation_subscribeNewsletter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createNews":
			out.Values[i] = ec._Mutation_createNews(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteNews":
			out.Values[i] = ec._Mutation_deleteNews(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateNews":
			out.Values[i] = ec._Mutation_updateNews(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notifyAllCustomers":
			out.Values[i] = ec._Mutation_notifyAllCustomers(ctx, field)
		case "sendUserNotification":
			out.Values[i] = ec._Mutation_sendUserNotification(ctx, field)
		case "triggerTestNotification":
			out.Values[i] = ec._Mutation_triggerTestNotification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProduct":
			out.Values[i] = ec._Mutation_createProduct(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProduct":
			out.Values[i] = ec._Mutation_deleteProduct(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replaceExistingProduct":
			out.Values[i] = ec._Mutation_replaceExistingProduct(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setProductActive":
			out.Values[i] = ec._Mutation_setProductActive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProduct":
			out.Values[i] = ec._Mutation_updateProduct(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProductCategory":
			out.Values[i] = ec._Mutation_createProductCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProductCategory":
			out.Values[i] = ec._Mutation_deleteProductCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProductCategory":
			out.Values[i] = ec._Mutation_updateProductCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createProductSubCategory":
			out.Values[i] = ec._Mutation_createProductSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProductSubCategory":
			out.Values[i] = ec._Mutation_deleteProductSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProductSubCategory":
			out.Values[i] = ec._Mutation_updateProductSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upsertReview":
			out.Values[i] = ec._Mutation_upsertReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approveReview":
			out.Values[i] = ec._Mutation_approveReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReview":
			out.Values[i] = ec._Mutation_deleteReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createService":
			out.Values[i] = ec._Mutation_createService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteService":
			out.Values[i] = ec._Mutation_deleteService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replaceExistingService":
			out.Values[i] = ec._Mutation_replaceExistingService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setServiceActive":
			out.Values[i] = ec._Mutation_setServiceActive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateService":
			out.Values[i] = ec._Mutation_updateService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createServiceCategory":
			out.Values[i] = ec._Mutation_createServiceCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteServiceCategory":
			out.Values[i] = ec._Mutation_deleteServiceCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateServiceCategory":
			out.Values[i] = ec._Mutation_updateServiceCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createServiceSubCategory":
			out.Values[i] = ec._Mutation_createServiceSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteServiceSubCategory":
			out.Values[i] = ec._Mutation_deleteServiceSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateServiceSubCategory":
			out.Values[i] = ec._Mutation_updateServiceSubCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAdministrator":
			out.Values[i] = ec._Mutation_createAdministrator(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdministrator":
			out.Values[i] = ec._Mutation_deleteAdministrator(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdministrator":
			out.Values[i] = ec._Mutation_updateAdministrator(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCustomer":
			out.Values[i] = ec._Mutation_createCustomer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCustomer":
			out.Values[i] = ec._Mutation_deleteCustomer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCustomer":
			out.Values[i] = ec._Mutation_updateCustomer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEmployee":
			out.Values[i] = ec._Mutation_createEmployee(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEmployee":
			out.Values[i] = ec._Mutation_deleteEmployee(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "EditEmployeeAvailability":
			out.Values[i] = ec._Mutation_EditEmployeeAvailability(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmployee":
			out.Values[i] = ec._Mutation_updateEmployee(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createManager":
			out.Values[i] = ec._Mutation_createManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteManager":
			out.Values[i] = ec._Mutation_deleteManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateManager":
			out.Values[i] = ec._Mutation_updateManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadViewerProfilePicture":
			out.Values[i] = ec._Mutation_uploadViewerProfilePicture(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeViewerProfilePicture":
			out.Values[i] = ec._Mutation_removeViewerProfilePicture(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateViewer":
			out.Values[i] = ec._Mutation_updateViewer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateNotificationToken":
			out.Values[i] = ec._Mutation_updateNotificationToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newsImplementors = []string{"News", "Node"}

func (ec *executionContext) _News(ctx context.Context, sel ast.SelectionSet, obj *prisma.News) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("News")
		case "id":
			out.Values[i] = ec._News_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._News_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._News_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._News_title(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._News_image(ctx, field, obj)
				return res
			})
		case "branch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._News_branch(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newsConnectionImplementors = []string{"NewsConnection"}

func (ec *executionContext) _NewsConnection(ctx context.Context, sel ast.SelectionSet, obj *NewsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewsConnection")
		case "nodes":
			out.Values[i] = ec._NewsConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationPayloadImplementors = []string{"NotificationPayload"}

func (ec *executionContext) _NotificationPayload(ctx context.Context, sel ast.SelectionSet, obj *NotificationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationPayload")
		case "userId":
			out.Values[i] = ec._NotificationPayload_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "result":
			out.Values[i] = ec._NotificationPayload_result(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationsPayloadImplementors = []string{"NotificationsPayload"}

func (ec *executionContext) _NotificationsPayload(ctx context.Context, sel ast.SelectionSet, obj *NotificationsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationsPayload")
		case "payloads":
			out.Values[i] = ec._NotificationsPayload_payloads(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var openingHoursImplementors = []string{"OpeningHours"}

func (ec *executionContext) _OpeningHours(ctx context.Context, sel ast.SelectionSet, obj *OpeningHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openingHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpeningHours")
		case "formatted":
			out.Values[i] = ec._OpeningHours_formatted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "raw":
			out.Values[i] = ec._OpeningHours_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderHistoryPayloadImplementors = []string{"OrderHistoryPayload"}

func (ec *executionContext) _OrderHistoryPayload(ctx context.Context, sel ast.SelectionSet, obj *OrderHistoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderHistoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderHistoryPayload")
		case "products":
			out.Values[i] = ec._OrderHistoryPayload_products(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "services":
			out.Values[i] = ec._OrderHistoryPayload_services(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneNumberImplementors = []string{"PhoneNumber"}

func (ec *executionContext) _PhoneNumber(ctx context.Context, sel ast.SelectionSet, obj *PhoneNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneNumberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneNumber")
		case "href":
			out.Values[i] = ec._PhoneNumber_href(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "raw":
			out.Values[i] = ec._PhoneNumber_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceImplementors = []string{"Price"}

func (ec *executionContext) _Price(ctx context.Context, sel ast.SelectionSet, obj *Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Price")
		case "value":
			out.Values[i] = ec._Price_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayValue":
			out.Values[i] = ec._Price_displayValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productImplementors = []string{"Product", "Node"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *prisma.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Product_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Product_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "desc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_desc(ctx, field, obj)
				return res
			})
		case "price":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_price(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "capacity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_capacity(ctx, field, obj)
				return res
			})
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_subCategory(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_image(ctx, field, obj)
				return res
			})
		case "attributes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_attributes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "active":
			out.Values[i] = ec._Product_active(ctx, field, obj)
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_reviews(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "viewerReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_viewerReview(ctx, field, obj)
				return res
			})
		case "viewerCanReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_viewerCanReview(ctx, field, obj)
				return res
			})
		case "reviewAggregations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_reviewAggregations(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productCategoryImplementors = []string{"ProductCategory", "Node"}

func (ec *executionContext) _ProductCategory(ctx context.Context, sel ast.SelectionSet, obj *prisma.ProductCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductCategory")
		case "id":
			out.Values[i] = ec._ProductCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ProductCategory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ProductCategory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ProductCategory_name(ctx, field, obj)
		case "products":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductCategory_products(ctx, field, obj)
				return res
			})
		case "subCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductCategory_subCategories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productConnectionImplementors = []string{"ProductConnection"}

func (ec *executionContext) _ProductConnection(ctx context.Context, sel ast.SelectionSet, obj *ProductConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductConnection")
		case "nodes":
			out.Values[i] = ec._ProductConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productReviewImplementors = []string{"ProductReview", "Node", "IReview", "IProductReview"}

func (ec *executionContext) _ProductReview(ctx context.Context, sel ast.SelectionSet, obj *prisma.ProductReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductReview")
		case "id":
			out.Values[i] = ec._ProductReview_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ProductReview_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ProductReview_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ProductReview_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stars":
			out.Values[i] = ec._ProductReview_stars(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			out.Values[i] = ec._ProductReview_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "text":
			out.Values[i] = ec._ProductReview_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ProductReview_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductReview_customer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductReview_product(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productReviewConnectionImplementors = []string{"ProductReviewConnection"}

func (ec *executionContext) _ProductReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *ProductReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productReviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductReviewConnection")
		case "nodes":
			out.Values[i] = ec._ProductReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productServiceAttributeImplementors = []string{"ProductServiceAttribute"}

func (ec *executionContext) _ProductServiceAttribute(ctx context.Context, sel ast.SelectionSet, obj *prisma.ProductServiceAttribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productServiceAttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductServiceAttribute")
		case "key":
			out.Values[i] = ec._ProductServiceAttribute_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductServiceAttribute_name(ctx, field, obj)
				return res
			})
		case "value":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductServiceAttribute_value(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productSubCategoryImplementors = []string{"ProductSubCategory", "Node"}

func (ec *executionContext) _ProductSubCategory(ctx context.Context, sel ast.SelectionSet, obj *prisma.ProductSubCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productSubCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductSubCategory")
		case "id":
			out.Values[i] = ec._ProductSubCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ProductSubCategory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ProductSubCategory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ProductSubCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductSubCategory_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "products":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProductSubCategory_products(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var publicStaffMemberConnectionImplementors = []string{"PublicStaffMemberConnection"}

func (ec *executionContext) _PublicStaffMemberConnection(ctx context.Context, sel ast.SelectionSet, obj *PublicStaffMemberConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, publicStaffMemberConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PublicStaffMemberConnection")
		case "nodes":
			out.Values[i] = ec._PublicStaffMemberConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "appointment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appointment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "branch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_branch(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "branches":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_branches(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_company(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "companies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "relatedCompanies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_relatedCompanies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "currentCompany":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentCompany(ctx, field)
				return res
			})
		case "customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_customer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "customers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_customers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emailTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailTemplates":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emailTemplates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "employee":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employee(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "employees":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_employees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "favorites":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_favorites(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orderHistory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orderHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isValidPasswordToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_isValidPasswordToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_product(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "products":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "productCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ProductCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ProductCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "productSubCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productSubCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "productSubCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productSubCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_reviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "services":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_services(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serviceCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serviceCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serviceSubCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceSubCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "serviceSubCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceSubCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "staffMember":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_staffMember(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "staffMembers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_staffMembers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "publicStaffMembers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_publicStaffMembers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "appointmentTimeslots":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appointmentTimeslots(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "viewer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_viewer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rawOpeningHourImplementors = []string{"RawOpeningHour", "OpeningHourBase"}

func (ec *executionContext) _RawOpeningHour(ctx context.Context, sel ast.SelectionSet, obj *RawOpeningHour) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rawOpeningHourImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RawOpeningHour")
		case "day":
			out.Values[i] = ec._RawOpeningHour_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closed":
			out.Values[i] = ec._RawOpeningHour_closed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "break":
			out.Values[i] = ec._RawOpeningHour_break(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDay":
			out.Values[i] = ec._RawOpeningHour_shortDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullDay":
			out.Values[i] = ec._RawOpeningHour_fullDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forenoon":
			out.Values[i] = ec._RawOpeningHour_forenoon(ctx, field, obj)
		case "afternoon":
			out.Values[i] = ec._RawOpeningHour_afternoon(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rawWorkingHoursImplementors = []string{"RawWorkingHours", "WorkingHoursBase"}

func (ec *executionContext) _RawWorkingHours(ctx context.Context, sel ast.SelectionSet, obj *RawWorkingHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rawWorkingHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RawWorkingHours")
		case "day":
			out.Values[i] = ec._RawWorkingHours_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notWorking":
			out.Values[i] = ec._RawWorkingHours_notWorking(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "break":
			out.Values[i] = ec._RawWorkingHours_break(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDay":
			out.Values[i] = ec._RawWorkingHours_shortDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullDay":
			out.Values[i] = ec._RawWorkingHours_fullDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forenoon":
			out.Values[i] = ec._RawWorkingHours_forenoon(ctx, field, obj)
		case "afternoon":
			out.Values[i] = ec._RawWorkingHours_afternoon(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var registerPayloadImplementors = []string{"RegisterPayload"}

func (ec *executionContext) _RegisterPayload(ctx context.Context, sel ast.SelectionSet, obj *RegisterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterPayload")
		case "status":
			out.Values[i] = ec._RegisterPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var relatedCompaniesImplementors = []string{"RelatedCompanies"}

func (ec *executionContext) _RelatedCompanies(ctx context.Context, sel ast.SelectionSet, obj *RelatedCompanies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relatedCompaniesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelatedCompanies")
		case "companies":
			out.Values[i] = ec._RelatedCompanies_companies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAdmin":
			out.Values[i] = ec._RelatedCompanies_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var removeViewerProfilePicturePayloadImplementors = []string{"RemoveViewerProfilePicturePayload"}

func (ec *executionContext) _RemoveViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, obj *RemoveViewerProfilePicturePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeViewerProfilePicturePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveViewerProfilePicturePayload")
		case "image":
			out.Values[i] = ec._RemoveViewerProfilePicturePayload_image(ctx, field, obj)
		case "user":
			out.Values[i] = ec._RemoveViewerProfilePicturePayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var replaceExistingProductsPayloadImplementors = []string{"ReplaceExistingProductsPayload"}

func (ec *executionContext) _ReplaceExistingProductsPayload(ctx context.Context, sel ast.SelectionSet, obj *ReplaceExistingProductsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, replaceExistingProductsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReplaceExistingProductsPayload")
		case "productSubCategory":
			out.Values[i] = ec._ReplaceExistingProductsPayload_productSubCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var replaceExistingServicePayloadImplementors = []string{"ReplaceExistingServicePayload"}

func (ec *executionContext) _ReplaceExistingServicePayload(ctx context.Context, sel ast.SelectionSet, obj *ReplaceExistingServicePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, replaceExistingServicePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReplaceExistingServicePayload")
		case "serviceSubCategory":
			out.Values[i] = ec._ReplaceExistingServicePayload_serviceSubCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestActivationLinkPayloadImplementors = []string{"RequestActivationLinkPayload"}

func (ec *executionContext) _RequestActivationLinkPayload(ctx context.Context, sel ast.SelectionSet, obj *RequestActivationLinkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestActivationLinkPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestActivationLinkPayload")
		case "status":
			out.Values[i] = ec._RequestActivationLinkPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestPasswordResetPayloadImplementors = []string{"RequestPasswordResetPayload"}

func (ec *executionContext) _RequestPasswordResetPayload(ctx context.Context, sel ast.SelectionSet, obj *RequestPasswordResetPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestPasswordResetPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestPasswordResetPayload")
		case "status":
			out.Values[i] = ec._RequestPasswordResetPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rescheduleAppointmentPayloadImplementors = []string{"RescheduleAppointmentPayload"}

func (ec *executionContext) _RescheduleAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *RescheduleAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rescheduleAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RescheduleAppointmentPayload")
		case "appointment":
			out.Values[i] = ec._RescheduleAppointmentPayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resetPasswordPayloadImplementors = []string{"ResetPasswordPayload"}

func (ec *executionContext) _ResetPasswordPayload(ctx context.Context, sel ast.SelectionSet, obj *ResetPasswordPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resetPasswordPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResetPasswordPayload")
		case "status":
			out.Values[i] = ec._ResetPasswordPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewAggregationsImplementors = []string{"ReviewAggregations"}

func (ec *executionContext) _ReviewAggregations(ctx context.Context, sel ast.SelectionSet, obj *ReviewAggregations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewAggregationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewAggregations")
		case "totalCount":
			out.Values[i] = ec._ReviewAggregations_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "averageRating":
			out.Values[i] = ec._ReviewAggregations_averageRating(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countPerStar":
			out.Values[i] = ec._ReviewAggregations_countPerStar(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewConnectionImplementors = []string{"ReviewConnection"}

func (ec *executionContext) _ReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *ReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewConnection")
		case "nodes":
			out.Values[i] = ec._ReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sendEmailPayloadImplementors = []string{"SendEmailPayload"}

func (ec *executionContext) _SendEmailPayload(ctx context.Context, sel ast.SelectionSet, obj *SendEmailPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sendEmailPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SendEmailPayload")
		case "status":
			out.Values[i] = ec._SendEmailPayload_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceImplementors = []string{"Service", "Node"}

func (ec *executionContext) _Service(ctx context.Context, sel ast.SelectionSet, obj *prisma.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._Service_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Service_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "desc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_desc(ctx, field, obj)
				return res
			})
		case "genderTarget":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_genderTarget(ctx, field, obj)
				return res
			})
		case "price":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_price(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "duration":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_duration(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_image(ctx, field, obj)
				return res
			})
		case "attributes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_attributes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_subCategory(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "active":
			out.Values[i] = ec._Service_active(ctx, field, obj)
		case "reviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_reviews(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "viewerReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_viewerReview(ctx, field, obj)
				return res
			})
		case "viewerCanReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_viewerCanReview(ctx, field, obj)
				return res
			})
		case "reviewAggregations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Service_reviewAggregations(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceCategoryImplementors = []string{"ServiceCategory", "Node"}

func (ec *executionContext) _ServiceCategory(ctx context.Context, sel ast.SelectionSet, obj *prisma.ServiceCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceCategory")
		case "id":
			out.Values[i] = ec._ServiceCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ServiceCategory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ServiceCategory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ServiceCategory_name(ctx, field, obj)
		case "services":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceCategory_services(ctx, field, obj)
				return res
			})
		case "subCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceCategory_subCategories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceConnectionImplementors = []string{"ServiceConnection"}

func (ec *executionContext) _ServiceConnection(ctx context.Context, sel ast.SelectionSet, obj *ServiceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceConnection")
		case "nodes":
			out.Values[i] = ec._ServiceConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceReviewImplementors = []string{"ServiceReview", "Node", "IReview", "IServiceReview"}

func (ec *executionContext) _ServiceReview(ctx context.Context, sel ast.SelectionSet, obj *prisma.ServiceReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceReview")
		case "id":
			out.Values[i] = ec._ServiceReview_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ServiceReview_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ServiceReview_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ServiceReview_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stars":
			out.Values[i] = ec._ServiceReview_stars(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			out.Values[i] = ec._ServiceReview_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "text":
			out.Values[i] = ec._ServiceReview_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ServiceReview_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceReview_customer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceReview_service(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceReviewConnectionImplementors = []string{"ServiceReviewConnection"}

func (ec *executionContext) _ServiceReviewConnection(ctx context.Context, sel ast.SelectionSet, obj *ServiceReviewConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceReviewConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceReviewConnection")
		case "nodes":
			out.Values[i] = ec._ServiceReviewConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceSubCategoryImplementors = []string{"ServiceSubCategory", "Node"}

func (ec *executionContext) _ServiceSubCategory(ctx context.Context, sel ast.SelectionSet, obj *prisma.ServiceSubCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceSubCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceSubCategory")
		case "id":
			out.Values[i] = ec._ServiceSubCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ServiceSubCategory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ServiceSubCategory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ServiceSubCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceSubCategory_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "services":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceSubCategory_services(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionImplementors = []string{"Session", "Node"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *prisma.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "id":
			out.Values[i] = ec._Session_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":
			out.Values[i] = ec._Session_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var setProductActivePayloadImplementors = []string{"SetProductActivePayload"}

func (ec *executionContext) _SetProductActivePayload(ctx context.Context, sel ast.SelectionSet, obj *SetProductActivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setProductActivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetProductActivePayload")
		case "product":
			out.Values[i] = ec._SetProductActivePayload_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var setServiceActivePayloadImplementors = []string{"SetServiceActivePayload"}

func (ec *executionContext) _SetServiceActivePayload(ctx context.Context, sel ast.SelectionSet, obj *SetServiceActivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setServiceActivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetServiceActivePayload")
		case "service":
			out.Values[i] = ec._SetServiceActivePayload_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffApproveAppointmentPayloadImplementors = []string{"StaffApproveAppointmentPayload"}

func (ec *executionContext) _StaffApproveAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *StaffApproveAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffApproveAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffApproveAppointmentPayload")
		case "appointment":
			out.Values[i] = ec._StaffApproveAppointmentPayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffCreateAppointmentPayloadImplementors = []string{"StaffCreateAppointmentPayload"}

func (ec *executionContext) _StaffCreateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *StaffCreateAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffCreateAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffCreateAppointmentPayload")
		case "appointment":
			out.Values[i] = ec._StaffCreateAppointmentPayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffMemberConnectionImplementors = []string{"StaffMemberConnection"}

func (ec *executionContext) _StaffMemberConnection(ctx context.Context, sel ast.SelectionSet, obj *StaffMemberConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffMemberConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffMemberConnection")
		case "nodes":
			out.Values[i] = ec._StaffMemberConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffUpdateAppointmentPayloadImplementors = []string{"StaffUpdateAppointmentPayload"}

func (ec *executionContext) _StaffUpdateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, obj *StaffUpdateAppointmentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffUpdateAppointmentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffUpdateAppointmentPayload")
		case "appointment":
			out.Values[i] = ec._StaffUpdateAppointmentPayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscribeNewsletterPayloadImplementors = []string{"SubscribeNewsletterPayload"}

func (ec *executionContext) _SubscribeNewsletterPayload(ctx context.Context, sel ast.SelectionSet, obj *SubscribeNewsletterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscribeNewsletterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubscribeNewsletterPayload")
		case "id":
			out.Values[i] = ec._SubscribeNewsletterPayload_id(ctx, field, obj)
		case "uniqueEmailID":
			out.Values[i] = ec._SubscribeNewsletterPayload_uniqueEmailID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timerangeImplementors = []string{"Timerange"}

func (ec *executionContext) _Timerange(ctx context.Context, sel ast.SelectionSet, obj *Timerange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timerangeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Timerange")
		case "start":
			out.Values[i] = ec._Timerange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end":
			out.Values[i] = ec._Timerange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeslotRangeImplementors = []string{"TimeslotRange"}

func (ec *executionContext) _TimeslotRange(ctx context.Context, sel ast.SelectionSet, obj *TimeslotRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeslotRangeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeslotRange")
		case "start":
			out.Values[i] = ec._TimeslotRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end":
			out.Values[i] = ec._TimeslotRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeslotsImplementors = []string{"Timeslots"}

func (ec *executionContext) _Timeslots(ctx context.Context, sel ast.SelectionSet, obj *Timeslots) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeslotsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Timeslots")
		case "duration":
			out.Values[i] = ec._Timeslots_duration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Timeslots_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ranges":
			out.Values[i] = ec._Timeslots_ranges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAdministratorPayloadImplementors = []string{"UpdateAdministratorPayload"}

func (ec *executionContext) _UpdateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateAdministratorPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAdministratorPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAdministratorPayload")
		case "administrator":
			out.Values[i] = ec._UpdateAdministratorPayload_administrator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAppointmentImagePayloadImplementors = []string{"UpdateAppointmentImagePayload"}

func (ec *executionContext) _UpdateAppointmentImagePayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateAppointmentImagePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAppointmentImagePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAppointmentImagePayload")
		case "appointment":
			out.Values[i] = ec._UpdateAppointmentImagePayload_appointment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBranchPayloadImplementors = []string{"UpdateBranchPayload"}

func (ec *executionContext) _UpdateBranchPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateBranchPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBranchPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBranchPayload")
		case "branch":
			out.Values[i] = ec._UpdateBranchPayload_branch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCompanyPayloadImplementors = []string{"UpdateCompanyPayload"}

func (ec *executionContext) _UpdateCompanyPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateCompanyPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCompanyPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCompanyPayload")
		case "company":
			out.Values[i] = ec._UpdateCompanyPayload_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCustomerPayloadImplementors = []string{"UpdateCustomerPayload"}

func (ec *executionContext) _UpdateCustomerPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateCustomerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCustomerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateCustomerPayload")
		case "customer":
			out.Values[i] = ec._UpdateCustomerPayload_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEmailTemplatePayloadImplementors = []string{"UpdateEmailTemplatePayload"}

func (ec *executionContext) _UpdateEmailTemplatePayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateEmailTemplatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEmailTemplatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEmailTemplatePayload")
		case "template":
			out.Values[i] = ec._UpdateEmailTemplatePayload_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateEmployeePayloadImplementors = []string{"UpdateEmployeePayload"}

func (ec *executionContext) _UpdateEmployeePayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateEmployeePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateEmployeePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateEmployeePayload")
		case "employee":
			out.Values[i] = ec._UpdateEmployeePayload_employee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateManagerPayloadImplementors = []string{"UpdateManagerPayload"}

func (ec *executionContext) _UpdateManagerPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateManagerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateManagerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateManagerPayload")
		case "manager":
			out.Values[i] = ec._UpdateManagerPayload_manager(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateNewsPayloadImplementors = []string{"UpdateNewsPayload"}

func (ec *executionContext) _UpdateNewsPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateNewsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateNewsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateNewsPayload")
		case "news":
			out.Values[i] = ec._UpdateNewsPayload_news(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProductCategoryPayloadImplementors = []string{"UpdateProductCategoryPayload"}

func (ec *executionContext) _UpdateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateProductCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductCategoryPayload")
		case "category":
			out.Values[i] = ec._UpdateProductCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProductPayloadImplementors = []string{"UpdateProductPayload"}

func (ec *executionContext) _UpdateProductPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateProductPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductPayload")
		case "product":
			out.Values[i] = ec._UpdateProductPayload_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateProductSubCategoryPayloadImplementors = []string{"UpdateProductSubCategoryPayload"}

func (ec *executionContext) _UpdateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateProductSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._UpdateProductSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateServiceCategoryPayloadImplementors = []string{"UpdateServiceCategoryPayload"}

func (ec *executionContext) _UpdateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateServiceCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateServiceCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateServiceCategoryPayload")
		case "category":
			out.Values[i] = ec._UpdateServiceCategoryPayload_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateServicePayloadImplementors = []string{"UpdateServicePayload"}

func (ec *executionContext) _UpdateServicePayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateServicePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateServicePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateServicePayload")
		case "service":
			out.Values[i] = ec._UpdateServicePayload_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateServiceSubCategoryPayloadImplementors = []string{"UpdateServiceSubCategoryPayload"}

func (ec *executionContext) _UpdateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateServiceSubCategoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateServiceSubCategoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateServiceSubCategoryPayload")
		case "subCategory":
			out.Values[i] = ec._UpdateServiceSubCategoryPayload_subCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateViewerPayloadImplementors = []string{"UpdateViewerPayload"}

func (ec *executionContext) _UpdateViewerPayload(ctx context.Context, sel ast.SelectionSet, obj *UpdateViewerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateViewerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateViewerPayload")
		case "user":
			out.Values[i] = ec._UpdateViewerPayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uploadViewerProfilePicturePayloadImplementors = []string{"UploadViewerProfilePicturePayload"}

func (ec *executionContext) _UploadViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, obj *UploadViewerProfilePicturePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uploadViewerProfilePicturePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UploadViewerProfilePicturePayload")
		case "image":
			out.Values[i] = ec._UploadViewerProfilePicturePayload_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._UploadViewerProfilePicturePayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var upsertBranchOpeningHourPayloadImplementors = []string{"UpsertBranchOpeningHourPayload"}

func (ec *executionContext) _UpsertBranchOpeningHourPayload(ctx context.Context, sel ast.SelectionSet, obj *UpsertBranchOpeningHourPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, upsertBranchOpeningHourPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpsertBranchOpeningHourPayload")
		case "branch":
			out.Values[i] = ec._UpsertBranchOpeningHourPayload_branch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var upsertReviewPayloadImplementors = []string{"UpsertReviewPayload"}

func (ec *executionContext) _UpsertReviewPayload(ctx context.Context, sel ast.SelectionSet, obj *UpsertReviewPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, upsertReviewPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpsertReviewPayload")
		case "review":
			out.Values[i] = ec._UpsertReviewPayload_review(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workingHoursImplementors = []string{"WorkingHours"}

func (ec *executionContext) _WorkingHours(ctx context.Context, sel ast.SelectionSet, obj *WorkingHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workingHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkingHours")
		case "formatted":
			out.Values[i] = ec._WorkingHours_formatted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "raw":
			out.Values[i] = ec._WorkingHours_raw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActivateAccountInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐActivateAccountInput(ctx context.Context, v interface{}) (ActivateAccountInput, error) {
	return ec.unmarshalInputActivateAccountInput(ctx, v)
}

func (ec *executionContext) marshalNActivateAccountPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐActivateAccountPayload(ctx context.Context, sel ast.SelectionSet, v ActivateAccountPayload) graphql.Marshaler {
	return ec._ActivateAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivateAccountPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐActivateAccountPayload(ctx context.Context, sel ast.SelectionSet, v *ActivateAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ActivateAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdministrator2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx context.Context, sel ast.SelectionSet, v prisma.Administrator) graphql.Marshaler {
	return ec._Administrator(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdministrator2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Administrator) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdministrator2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAdministrator2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAdministrator(ctx context.Context, sel ast.SelectionSet, v *prisma.Administrator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Administrator(ctx, sel, v)
}

func (ec *executionContext) marshalNAppointment2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx context.Context, sel ast.SelectionSet, v prisma.Appointment) graphql.Marshaler {
	return ec._Appointment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointment2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Appointment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAppointment2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointment(ctx context.Context, sel ast.SelectionSet, v *prisma.Appointment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Appointment(ctx, sel, v)
}

func (ec *executionContext) marshalNAppointmentConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentConnection(ctx context.Context, sel ast.SelectionSet, v AppointmentConnection) graphql.Marshaler {
	return ec._AppointmentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointmentConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentConnection(ctx context.Context, sel ast.SelectionSet, v *AppointmentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppointmentConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAppointmentOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByFields(ctx context.Context, v interface{}) (AppointmentOrderByFields, error) {
	var res AppointmentOrderByFields
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAppointmentOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByFields(ctx context.Context, sel ast.SelectionSet, v AppointmentOrderByFields) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAppointmentProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentProduct(ctx context.Context, sel ast.SelectionSet, v AppointmentProduct) graphql.Marshaler {
	return ec._AppointmentProduct(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*AppointmentProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentProduct(ctx context.Context, sel ast.SelectionSet, v *AppointmentProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppointmentProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNAppointmentReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx context.Context, sel ast.SelectionSet, v prisma.AppointmentReview) graphql.Marshaler {
	return ec._AppointmentReview(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointmentReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.AppointmentReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppointmentReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAppointmentReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx context.Context, sel ast.SelectionSet, v *prisma.AppointmentReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppointmentReview(ctx, sel, v)
}

func (ec *executionContext) marshalNAppointmentReviewConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentReviewConnection(ctx context.Context, sel ast.SelectionSet, v AppointmentReviewConnection) graphql.Marshaler {
	return ec._AppointmentReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointmentReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentReviewConnection(ctx context.Context, sel ast.SelectionSet, v *AppointmentReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppointmentReviewConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAppointmentStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatus(ctx context.Context, v interface{}) (prisma.AppointmentStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.AppointmentStatus(tmp), err
}

func (ec *executionContext) marshalNAppointmentStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatus(ctx context.Context, sel ast.SelectionSet, v prisma.AppointmentStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNApproveReviewPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐApproveReviewPayload(ctx context.Context, sel ast.SelectionSet, v ApproveReviewPayload) graphql.Marshaler {
	return ec._ApproveReviewPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNApproveReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐApproveReviewPayload(ctx context.Context, sel ast.SelectionSet, v *ApproveReviewPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApproveReviewPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAvailabilityStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAvailabilityStatus(ctx context.Context, v interface{}) (AvailabilityStatus, error) {
	var res AvailabilityStatus
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAvailabilityStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAvailabilityStatus(ctx context.Context, sel ast.SelectionSet, v AvailabilityStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBranch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx context.Context, sel ast.SelectionSet, v prisma.Branch) graphql.Marshaler {
	return ec._Branch(ctx, sel, &v)
}

func (ec *executionContext) marshalNBranch2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranchᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Branch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBranch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐBranch(ctx context.Context, sel ast.SelectionSet, v *prisma.Branch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Branch(ctx, sel, v)
}

func (ec *executionContext) marshalNBranchConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v BranchConnection) graphql.Marshaler {
	return ec._BranchConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBranchConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v *BranchConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BranchConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBranchImageSlotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx context.Context, v interface{}) (BranchImageSlotInput, error) {
	return ec.unmarshalInputBranchImageSlotInput(ctx, v)
}

func (ec *executionContext) unmarshalNBranchesInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchesInput(ctx context.Context, v interface{}) (BranchesInput, error) {
	return ec.unmarshalInputBranchesInput(ctx, v)
}

func (ec *executionContext) unmarshalNCancelAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCancelAppointmentInput(ctx context.Context, v interface{}) (CancelAppointmentInput, error) {
	return ec.unmarshalInputCancelAppointmentInput(ctx, v)
}

func (ec *executionContext) marshalNCancelAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCancelAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v CancelAppointmentPayload) graphql.Marshaler {
	return ec._CancelAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCancelAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCancelAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *CancelAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CancelAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCompany2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx context.Context, sel ast.SelectionSet, v prisma.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompany2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Company) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx context.Context, sel ast.SelectionSet, v *prisma.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCompanyConnection(ctx context.Context, sel ast.SelectionSet, v CompanyConnection) graphql.Marshaler {
	return ec._CompanyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCompanyConnection(ctx context.Context, sel ast.SelectionSet, v *CompanyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConnectAppointmentProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx context.Context, v interface{}) (ConnectAppointmentProduct, error) {
	return ec.unmarshalInputConnectAppointmentProduct(ctx, v)
}

func (ec *executionContext) unmarshalNConnectAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx context.Context, v interface{}) (*ConnectAppointmentProduct, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNConnectAppointmentProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNConnectAppointmentService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx context.Context, v interface{}) (ConnectAppointmentService, error) {
	return ec.unmarshalInputConnectAppointmentService(ctx, v)
}

func (ec *executionContext) unmarshalNConnectAppointmentService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentServiceᚄ(ctx context.Context, v interface{}) ([]*ConnectAppointmentService, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ConnectAppointmentService, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNConnectAppointmentService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNConnectAppointmentService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx context.Context, v interface{}) (*ConnectAppointmentService, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNConnectAppointmentService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAdministratorInput(ctx context.Context, v interface{}) (CreateAdministratorInput, error) {
	return ec.unmarshalInputCreateAdministratorInput(ctx, v)
}

func (ec *executionContext) marshalNCreateAdministratorPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v CreateAdministratorPayload) graphql.Marshaler {
	return ec._CreateAdministratorPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v *CreateAdministratorPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateAdministratorPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateAppointmentData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAppointmentData(ctx context.Context, v interface{}) (CreateAppointmentData, error) {
	return ec.unmarshalInputCreateAppointmentData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateAppointmentData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAppointmentData(ctx context.Context, v interface{}) (*CreateAppointmentData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateAppointmentData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateAppointmentData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateBranchData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchData(ctx context.Context, v interface{}) (CreateBranchData, error) {
	return ec.unmarshalInputCreateBranchData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateBranchData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchData(ctx context.Context, v interface{}) (*CreateBranchData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateBranchData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchInput(ctx context.Context, v interface{}) (CreateBranchInput, error) {
	return ec.unmarshalInputCreateBranchInput(ctx, v)
}

func (ec *executionContext) marshalNCreateBranchPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchPayload(ctx context.Context, sel ast.SelectionSet, v CreateBranchPayload) graphql.Marshaler {
	return ec._CreateBranchPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateBranchPayload(ctx context.Context, sel ast.SelectionSet, v *CreateBranchPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateBranchPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCompanyData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyData(ctx context.Context, v interface{}) (CreateCompanyData, error) {
	return ec.unmarshalInputCreateCompanyData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateCompanyData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyData(ctx context.Context, v interface{}) (*CreateCompanyData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateCompanyData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyInput(ctx context.Context, v interface{}) (CreateCompanyInput, error) {
	return ec.unmarshalInputCreateCompanyInput(ctx, v)
}

func (ec *executionContext) marshalNCreateCompanyPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyPayload(ctx context.Context, sel ast.SelectionSet, v CreateCompanyPayload) graphql.Marshaler {
	return ec._CreateCompanyPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCompanyPayload(ctx context.Context, sel ast.SelectionSet, v *CreateCompanyPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateCompanyPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCustomerData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerData(ctx context.Context, v interface{}) (CreateCustomerData, error) {
	return ec.unmarshalInputCreateCustomerData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateCustomerData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerData(ctx context.Context, v interface{}) (*CreateCustomerData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateCustomerData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerInput(ctx context.Context, v interface{}) (CreateCustomerInput, error) {
	return ec.unmarshalInputCreateCustomerInput(ctx, v)
}

func (ec *executionContext) marshalNCreateCustomerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerPayload(ctx context.Context, sel ast.SelectionSet, v CreateCustomerPayload) graphql.Marshaler {
	return ec._CreateCustomerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateCustomerPayload(ctx context.Context, sel ast.SelectionSet, v *CreateCustomerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateCustomerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateEmployeeData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeData(ctx context.Context, v interface{}) (CreateEmployeeData, error) {
	return ec.unmarshalInputCreateEmployeeData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateEmployeeData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeData(ctx context.Context, v interface{}) (*CreateEmployeeData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateEmployeeData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeeInput(ctx context.Context, v interface{}) (CreateEmployeeInput, error) {
	return ec.unmarshalInputCreateEmployeeInput(ctx, v)
}

func (ec *executionContext) marshalNCreateEmployeePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeePayload(ctx context.Context, sel ast.SelectionSet, v CreateEmployeePayload) graphql.Marshaler {
	return ec._CreateEmployeePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateEmployeePayload(ctx context.Context, sel ast.SelectionSet, v *CreateEmployeePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateEmployeePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateFavoriteData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteData(ctx context.Context, v interface{}) (CreateFavoriteData, error) {
	return ec.unmarshalInputCreateFavoriteData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateFavoriteData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteData(ctx context.Context, v interface{}) (*CreateFavoriteData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateFavoriteData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateFavoriteInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoriteInput(ctx context.Context, v interface{}) (CreateFavoriteInput, error) {
	return ec.unmarshalInputCreateFavoriteInput(ctx, v)
}

func (ec *executionContext) marshalNCreateFavoritePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoritePayload(ctx context.Context, sel ast.SelectionSet, v CreateFavoritePayload) graphql.Marshaler {
	return ec._CreateFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateFavoritePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *CreateFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateManagerData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerData(ctx context.Context, v interface{}) (CreateManagerData, error) {
	return ec.unmarshalInputCreateManagerData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateManagerData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerData(ctx context.Context, v interface{}) (*CreateManagerData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateManagerData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerInput(ctx context.Context, v interface{}) (CreateManagerInput, error) {
	return ec.unmarshalInputCreateManagerInput(ctx, v)
}

func (ec *executionContext) marshalNCreateManagerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerPayload(ctx context.Context, sel ast.SelectionSet, v CreateManagerPayload) graphql.Marshaler {
	return ec._CreateManagerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateManagerPayload(ctx context.Context, sel ast.SelectionSet, v *CreateManagerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateManagerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateNewsData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsData(ctx context.Context, v interface{}) (CreateNewsData, error) {
	return ec.unmarshalInputCreateNewsData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateNewsData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsData(ctx context.Context, v interface{}) (*CreateNewsData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateNewsData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsInput(ctx context.Context, v interface{}) (CreateNewsInput, error) {
	return ec.unmarshalInputCreateNewsInput(ctx, v)
}

func (ec *executionContext) marshalNCreateNewsPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsPayload(ctx context.Context, sel ast.SelectionSet, v CreateNewsPayload) graphql.Marshaler {
	return ec._CreateNewsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateNewsPayload(ctx context.Context, sel ast.SelectionSet, v *CreateNewsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateNewsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateProductCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryData(ctx context.Context, v interface{}) (CreateProductCategoryData, error) {
	return ec.unmarshalInputCreateProductCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProductCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryData(ctx context.Context, v interface{}) (*CreateProductCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateProductCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryInput(ctx context.Context, v interface{}) (CreateProductCategoryInput, error) {
	return ec.unmarshalInputCreateProductCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNCreateProductCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v CreateProductCategoryPayload) graphql.Marshaler {
	return ec._CreateProductCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *CreateProductCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateProductCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateProductData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductData(ctx context.Context, v interface{}) (CreateProductData, error) {
	return ec.unmarshalInputCreateProductData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProductData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductData(ctx context.Context, v interface{}) (*CreateProductData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateProductData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductInput(ctx context.Context, v interface{}) (CreateProductInput, error) {
	return ec.unmarshalInputCreateProductInput(ctx, v)
}

func (ec *executionContext) marshalNCreateProductPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductPayload(ctx context.Context, sel ast.SelectionSet, v CreateProductPayload) graphql.Marshaler {
	return ec._CreateProductPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductPayload(ctx context.Context, sel ast.SelectionSet, v *CreateProductPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateProductPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateProductSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryData(ctx context.Context, v interface{}) (CreateProductSubCategoryData, error) {
	return ec.unmarshalInputCreateProductSubCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateProductSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryData(ctx context.Context, v interface{}) (*CreateProductSubCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateProductSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryInput(ctx context.Context, v interface{}) (CreateProductSubCategoryInput, error) {
	return ec.unmarshalInputCreateProductSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNCreateProductSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v CreateProductSubCategoryPayload) graphql.Marshaler {
	return ec._CreateProductSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *CreateProductSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateProductSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateReviewData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx context.Context, v interface{}) (CreateReviewData, error) {
	return ec.unmarshalInputCreateReviewData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateReviewData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx context.Context, v interface{}) (*CreateReviewData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateReviewData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateReviewData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateServiceCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryData(ctx context.Context, v interface{}) (CreateServiceCategoryData, error) {
	return ec.unmarshalInputCreateServiceCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateServiceCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryData(ctx context.Context, v interface{}) (*CreateServiceCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateServiceCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryInput(ctx context.Context, v interface{}) (CreateServiceCategoryInput, error) {
	return ec.unmarshalInputCreateServiceCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNCreateServiceCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v CreateServiceCategoryPayload) graphql.Marshaler {
	return ec._CreateServiceCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *CreateServiceCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateServiceCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateServiceData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceData(ctx context.Context, v interface{}) (CreateServiceData, error) {
	return ec.unmarshalInputCreateServiceData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateServiceData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceData(ctx context.Context, v interface{}) (*CreateServiceData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateServiceData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceInput(ctx context.Context, v interface{}) (CreateServiceInput, error) {
	return ec.unmarshalInputCreateServiceInput(ctx, v)
}

func (ec *executionContext) marshalNCreateServicePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServicePayload(ctx context.Context, sel ast.SelectionSet, v CreateServicePayload) graphql.Marshaler {
	return ec._CreateServicePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServicePayload(ctx context.Context, sel ast.SelectionSet, v *CreateServicePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateServicePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateServiceSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryData(ctx context.Context, v interface{}) (CreateServiceSubCategoryData, error) {
	return ec.unmarshalInputCreateServiceSubCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateServiceSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryData(ctx context.Context, v interface{}) (*CreateServiceSubCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateServiceSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCreateServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryInput(ctx context.Context, v interface{}) (CreateServiceSubCategoryInput, error) {
	return ec.unmarshalInputCreateServiceSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNCreateServiceSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v CreateServiceSubCategoryPayload) graphql.Marshaler {
	return ec._CreateServiceSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *CreateServiceSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateServiceSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateUserData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx context.Context, v interface{}) (CreateUserData, error) {
	return ec.unmarshalInputCreateUserData(ctx, v)
}

func (ec *executionContext) unmarshalNCreateUserData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx context.Context, v interface{}) (*CreateUserData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCreateUserData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCreateUserData(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCustomer2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx context.Context, sel ast.SelectionSet, v prisma.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomer2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomerᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Customer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCustomer2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *prisma.Customer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerConnection(ctx context.Context, sel ast.SelectionSet, v CustomerConnection) graphql.Marshaler {
	return ec._CustomerConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerConnection(ctx context.Context, sel ast.SelectionSet, v *CustomerConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerInput(ctx context.Context, v interface{}) (CustomerInput, error) {
	return ec.unmarshalInputCustomerInput(ctx, v)
}

func (ec *executionContext) unmarshalNCustomerOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByFields(ctx context.Context, v interface{}) (CustomerOrderByFields, error) {
	var res CustomerOrderByFields
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNCustomerOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByFields(ctx context.Context, sel ast.SelectionSet, v CustomerOrderByFields) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCustomerRequestAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerRequestAppointmentInput(ctx context.Context, v interface{}) (CustomerRequestAppointmentInput, error) {
	return ec.unmarshalInputCustomerRequestAppointmentInput(ctx, v)
}

func (ec *executionContext) marshalNCustomerRequestAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerRequestAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v CustomerRequestAppointmentPayload) graphql.Marshaler {
	return ec._CustomerRequestAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerRequestAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerRequestAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *CustomerRequestAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerRequestAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerReviewConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerReviewConnection(ctx context.Context, sel ast.SelectionSet, v CustomerReviewConnection) graphql.Marshaler {
	return ec._CustomerReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerReviewConnection(ctx context.Context, sel ast.SelectionSet, v *CustomerReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CustomerReviewConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx context.Context, v interface{}) (prisma.DayOfWeek, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.DayOfWeek(tmp), err
}

func (ec *executionContext) marshalNDayOfWeek2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐDayOfWeek(ctx context.Context, sel ast.SelectionSet, v prisma.DayOfWeek) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteAdministratorInput(ctx context.Context, v interface{}) (DeleteAdministratorInput, error) {
	return ec.unmarshalInputDeleteAdministratorInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteAdministratorPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v DeleteAdministratorPayload) graphql.Marshaler {
	return ec._DeleteAdministratorPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteAdministratorPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteAdministratorPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteBranchImageInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchImageInput(ctx context.Context, v interface{}) (DeleteBranchImageInput, error) {
	return ec.unmarshalInputDeleteBranchImageInput(ctx, v)
}

func (ec *executionContext) unmarshalNDeleteBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchInput(ctx context.Context, v interface{}) (DeleteBranchInput, error) {
	return ec.unmarshalInputDeleteBranchInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteBranchPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchPayload(ctx context.Context, sel ast.SelectionSet, v DeleteBranchPayload) graphql.Marshaler {
	return ec._DeleteBranchPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteBranchPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteBranchPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteBranchPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCompanyInput(ctx context.Context, v interface{}) (DeleteCompanyInput, error) {
	return ec.unmarshalInputDeleteCompanyInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteCompanyPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCompanyPayload(ctx context.Context, sel ast.SelectionSet, v DeleteCompanyPayload) graphql.Marshaler {
	return ec._DeleteCompanyPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCompanyPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteCompanyPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteCompanyPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCustomerInput(ctx context.Context, v interface{}) (DeleteCustomerInput, error) {
	return ec.unmarshalInputDeleteCustomerInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteCustomerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCustomerPayload(ctx context.Context, sel ast.SelectionSet, v DeleteCustomerPayload) graphql.Marshaler {
	return ec._DeleteCustomerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteCustomerPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteCustomerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteCustomerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteEmployeeInput(ctx context.Context, v interface{}) (DeleteEmployeeInput, error) {
	return ec.unmarshalInputDeleteEmployeeInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteEmployeePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteEmployeePayload(ctx context.Context, sel ast.SelectionSet, v DeleteEmployeePayload) graphql.Marshaler {
	return ec._DeleteEmployeePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteEmployeePayload(ctx context.Context, sel ast.SelectionSet, v *DeleteEmployeePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteEmployeePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteFavoriteInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteFavoriteInput(ctx context.Context, v interface{}) (DeleteFavoriteInput, error) {
	return ec.unmarshalInputDeleteFavoriteInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteFavoritePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteFavoritePayload(ctx context.Context, sel ast.SelectionSet, v DeleteFavoritePayload) graphql.Marshaler {
	return ec._DeleteFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteFavoritePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *DeleteFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteManagerInput(ctx context.Context, v interface{}) (DeleteManagerInput, error) {
	return ec.unmarshalInputDeleteManagerInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteManagerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteManagerPayload(ctx context.Context, sel ast.SelectionSet, v DeleteManagerPayload) graphql.Marshaler {
	return ec._DeleteManagerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteManagerPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteManagerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteManagerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteNewsInput(ctx context.Context, v interface{}) (DeleteNewsInput, error) {
	return ec.unmarshalInputDeleteNewsInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteNewsPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteNewsPayload(ctx context.Context, sel ast.SelectionSet, v DeleteNewsPayload) graphql.Marshaler {
	return ec._DeleteNewsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteNewsPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteNewsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteNewsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductCategoryInput(ctx context.Context, v interface{}) (DeleteProductCategoryInput, error) {
	return ec.unmarshalInputDeleteProductCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteProductCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v DeleteProductCategoryPayload) graphql.Marshaler {
	return ec._DeleteProductCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteProductCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProductCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductInput(ctx context.Context, v interface{}) (DeleteProductInput, error) {
	return ec.unmarshalInputDeleteProductInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteProductPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductPayload(ctx context.Context, sel ast.SelectionSet, v DeleteProductPayload) graphql.Marshaler {
	return ec._DeleteProductPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteProductPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProductPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductSubCategoryInput(ctx context.Context, v interface{}) (DeleteProductSubCategoryInput, error) {
	return ec.unmarshalInputDeleteProductSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteProductSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v DeleteProductSubCategoryPayload) graphql.Marshaler {
	return ec._DeleteProductSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteProductSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteProductSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteReviewPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteReviewPayload(ctx context.Context, sel ast.SelectionSet, v DeleteReviewPayload) graphql.Marshaler {
	return ec._DeleteReviewPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteReviewPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteReviewPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteReviewPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceCategoryInput(ctx context.Context, v interface{}) (DeleteServiceCategoryInput, error) {
	return ec.unmarshalInputDeleteServiceCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteServiceCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v DeleteServiceCategoryPayload) graphql.Marshaler {
	return ec._DeleteServiceCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteServiceCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteServiceCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceInput(ctx context.Context, v interface{}) (DeleteServiceInput, error) {
	return ec.unmarshalInputDeleteServiceInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteServicePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServicePayload(ctx context.Context, sel ast.SelectionSet, v DeleteServicePayload) graphql.Marshaler {
	return ec._DeleteServicePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServicePayload(ctx context.Context, sel ast.SelectionSet, v *DeleteServicePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteServicePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceSubCategoryInput(ctx context.Context, v interface{}) (DeleteServiceSubCategoryInput, error) {
	return ec.unmarshalInputDeleteServiceSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNDeleteServiceSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v DeleteServiceSubCategoryPayload) graphql.Marshaler {
	return ec._DeleteServiceSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDeleteServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *DeleteServiceSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteServiceSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEditEmployeeAvailabilityInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEditEmployeeAvailabilityInput(ctx context.Context, v interface{}) (EditEmployeeAvailabilityInput, error) {
	return ec.unmarshalInputEditEmployeeAvailabilityInput(ctx, v)
}

func (ec *executionContext) marshalNEditEmployeeAvailabilityPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEditEmployeeAvailabilityPayload(ctx context.Context, sel ast.SelectionSet, v EditEmployeeAvailabilityPayload) graphql.Marshaler {
	return ec._EditEmployeeAvailabilityPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEditEmployeeAvailabilityPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEditEmployeeAvailabilityPayload(ctx context.Context, sel ast.SelectionSet, v *EditEmployeeAvailabilityPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EditEmployeeAvailabilityPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNEmailTemplate2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplate(ctx context.Context, sel ast.SelectionSet, v prisma.EmailTemplate) graphql.Marshaler {
	return ec._EmailTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailTemplate2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.EmailTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmailTemplate2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEmailTemplate2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmailTemplate(ctx context.Context, sel ast.SelectionSet, v *prisma.EmailTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailTemplateInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplateInput(ctx context.Context, v interface{}) (EmailTemplateInput, error) {
	return ec.unmarshalInputEmailTemplateInput(ctx, v)
}

func (ec *executionContext) marshalNEmailTemplateQueryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplateQueryPayload(ctx context.Context, sel ast.SelectionSet, v EmailTemplateQueryPayload) graphql.Marshaler {
	return ec._EmailTemplateQueryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailTemplateQueryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplateQueryPayload(ctx context.Context, sel ast.SelectionSet, v *EmailTemplateQueryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailTemplateQueryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNEmailTemplatesQueryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplatesQueryPayload(ctx context.Context, sel ast.SelectionSet, v EmailTemplatesQueryPayload) graphql.Marshaler {
	return ec._EmailTemplatesQueryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailTemplatesQueryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmailTemplatesQueryPayload(ctx context.Context, sel ast.SelectionSet, v *EmailTemplatesQueryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailTemplatesQueryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployee2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx context.Context, sel ast.SelectionSet, v prisma.Employee) graphql.Marshaler {
	return ec._Employee(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployee2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Employee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEmployee2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐEmployee(ctx context.Context, sel ast.SelectionSet, v *prisma.Employee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Employee(ctx, sel, v)
}

func (ec *executionContext) marshalNEmployeeConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v EmployeeConnection) graphql.Marshaler {
	return ec._EmployeeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmployeeConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmployeeConnection(ctx context.Context, sel ast.SelectionSet, v *EmployeeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmployeeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐEmployeeInput(ctx context.Context, v interface{}) (EmployeeInput, error) {
	return ec.unmarshalInputEmployeeInput(ctx, v)
}

func (ec *executionContext) marshalNFavorite2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐFavorite(ctx context.Context, sel ast.SelectionSet, v prisma.Favorite) graphql.Marshaler {
	return ec._Favorite(ctx, sel, &v)
}

func (ec *executionContext) marshalNFavorite2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐFavorite(ctx context.Context, sel ast.SelectionSet, v *prisma.Favorite) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Favorite(ctx, sel, v)
}

func (ec *executionContext) marshalNFavoritesPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFavoritesPayload(ctx context.Context, sel ast.SelectionSet, v FavoritesPayload) graphql.Marshaler {
	return ec._FavoritesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFavoritesPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFavoritesPayload(ctx context.Context, sel ast.SelectionSet, v *FavoritesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FavoritesPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFormattedOpeningHour2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedOpeningHour(ctx context.Context, sel ast.SelectionSet, v FormattedOpeningHour) graphql.Marshaler {
	return ec._FormattedOpeningHour(ctx, sel, &v)
}

func (ec *executionContext) marshalNFormattedOpeningHour2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedOpeningHourᚄ(ctx context.Context, sel ast.SelectionSet, v []*FormattedOpeningHour) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFormattedOpeningHour2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedOpeningHour(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFormattedOpeningHour2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedOpeningHour(ctx context.Context, sel ast.SelectionSet, v *FormattedOpeningHour) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FormattedOpeningHour(ctx, sel, v)
}

func (ec *executionContext) marshalNFormattedWorkingHours2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedWorkingHours(ctx context.Context, sel ast.SelectionSet, v FormattedWorkingHours) graphql.Marshaler {
	return ec._FormattedWorkingHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNFormattedWorkingHours2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedWorkingHoursᚄ(ctx context.Context, sel ast.SelectionSet, v []*FormattedWorkingHours) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFormattedWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedWorkingHours(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFormattedWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐFormattedWorkingHours(ctx context.Context, sel ast.SelectionSet, v *FormattedWorkingHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FormattedWorkingHours(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, v interface{}) (prisma.Gender, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.Gender(tmp), err
}

func (ec *executionContext) marshalNGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, sel ast.SelectionSet, v prisma.Gender) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, v interface{}) (prisma.GenderTarget, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.GenderTarget(tmp), err
}

func (ec *executionContext) marshalNGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, sel ast.SelectionSet, v prisma.GenderTarget) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNIPublicStaff2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIPublicStaff(ctx context.Context, sel ast.SelectionSet, v prisma.IPublicStaff) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IPublicStaff(ctx, sel, v)
}

func (ec *executionContext) marshalNIPublicStaff2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIPublicStaffᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.IPublicStaff) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIPublicStaff2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIPublicStaff(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReview(ctx context.Context, sel ast.SelectionSet, v prisma.IReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IReview(ctx, sel, v)
}

func (ec *executionContext) marshalNIReview2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.IReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIStaff2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIStaff(ctx context.Context, sel ast.SelectionSet, v prisma.IStaff) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IStaff(ctx, sel, v)
}

func (ec *executionContext) marshalNIStaff2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIStaffᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.IStaff) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIStaff2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIStaff(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNIUser2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐIUser(ctx context.Context, sel ast.SelectionSet, v prisma.IUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IUser(ctx, sel, v)
}

func (ec *executionContext) marshalNImage2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx context.Context, sel ast.SelectionSet, v Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNIsValidPasswordTokenPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐIsValidPasswordTokenPayload(ctx context.Context, sel ast.SelectionSet, v IsValidPasswordTokenPayload) graphql.Marshaler {
	return ec._IsValidPasswordTokenPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNIsValidPasswordTokenPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐIsValidPasswordTokenPayload(ctx context.Context, sel ast.SelectionSet, v *IsValidPasswordTokenPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IsValidPasswordTokenPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLoginInput(ctx context.Context, v interface{}) (LoginInput, error) {
	return ec.unmarshalInputLoginInput(ctx, v)
}

func (ec *executionContext) marshalNLoginPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLoginPayload(ctx context.Context, sel ast.SelectionSet, v LoginPayload) graphql.Marshaler {
	return ec._LoginPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLoginPayload(ctx context.Context, sel ast.SelectionSet, v *LoginPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LoginPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLogoutPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLogoutPayload(ctx context.Context, sel ast.SelectionSet, v LogoutPayload) graphql.Marshaler {
	return ec._LogoutPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLogoutPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐLogoutPayload(ctx context.Context, sel ast.SelectionSet, v *LogoutPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogoutPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNManager2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx context.Context, sel ast.SelectionSet, v prisma.Manager) graphql.Marshaler {
	return ec._Manager(ctx, sel, &v)
}

func (ec *executionContext) marshalNManager2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManagerᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Manager) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNManager2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNManager2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐManager(ctx context.Context, sel ast.SelectionSet, v *prisma.Manager) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Manager(ctx, sel, v)
}

func (ec *executionContext) marshalNNews2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx context.Context, sel ast.SelectionSet, v prisma.News) graphql.Marshaler {
	return ec._News(ctx, sel, &v)
}

func (ec *executionContext) marshalNNews2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNewsᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.News) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNews2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNews2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐNews(ctx context.Context, sel ast.SelectionSet, v *prisma.News) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._News(ctx, sel, v)
}

func (ec *executionContext) marshalNNotificationPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayload(ctx context.Context, sel ast.SelectionSet, v NotificationPayload) graphql.Marshaler {
	return ec._NotificationPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotificationPayload2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayloadᚄ(ctx context.Context, sel ast.SelectionSet, v []*NotificationPayload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotificationPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNotificationPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationPayload(ctx context.Context, sel ast.SelectionSet, v *NotificationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NotificationPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNotifyAllCustomersInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotifyAllCustomersInput(ctx context.Context, v interface{}) (NotifyAllCustomersInput, error) {
	return ec.unmarshalInputNotifyAllCustomersInput(ctx, v)
}

func (ec *executionContext) marshalNOpeningHours2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOpeningHours(ctx context.Context, sel ast.SelectionSet, v OpeningHours) graphql.Marshaler {
	return ec._OpeningHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNOpeningHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOpeningHours(ctx context.Context, sel ast.SelectionSet, v *OpeningHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OpeningHours(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx context.Context, v interface{}) (OrderByDirectionInput, error) {
	var res OrderByDirectionInput
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNOrderByDirectionInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderByDirectionInput(ctx context.Context, sel ast.SelectionSet, v OrderByDirectionInput) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrderHistoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderHistoryPayload(ctx context.Context, sel ast.SelectionSet, v OrderHistoryPayload) graphql.Marshaler {
	return ec._OrderHistoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderHistoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐOrderHistoryPayload(ctx context.Context, sel ast.SelectionSet, v *OrderHistoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrderHistoryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPrice2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx context.Context, sel ast.SelectionSet, v Price) graphql.Marshaler {
	return ec._Price(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrice2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPrice(ctx context.Context, sel ast.SelectionSet, v *Price) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Price(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx context.Context, sel ast.SelectionSet, v prisma.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx context.Context, sel ast.SelectionSet, v *prisma.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNProductCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ProductCategory) graphql.Marshaler {
	return ec._ProductCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx context.Context, sel ast.SelectionSet, v []*prisma.ProductCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNProductConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductConnection(ctx context.Context, sel ast.SelectionSet, v ProductConnection) graphql.Marshaler {
	return ec._ProductConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductConnection(ctx context.Context, sel ast.SelectionSet, v *ProductConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductInput(ctx context.Context, v interface{}) (ProductInput, error) {
	return ec.unmarshalInputProductInput(ctx, v)
}

func (ec *executionContext) unmarshalNProductOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByFields(ctx context.Context, v interface{}) (ProductOrderByFields, error) {
	var res ProductOrderByFields
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNProductOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByFields(ctx context.Context, sel ast.SelectionSet, v ProductOrderByFields) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProductReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx context.Context, sel ast.SelectionSet, v prisma.ProductReview) graphql.Marshaler {
	return ec._ProductReview(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.ProductReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductReview(ctx, sel, v)
}

func (ec *executionContext) marshalNProductReviewConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductReviewConnection(ctx context.Context, sel ast.SelectionSet, v ProductReviewConnection) graphql.Marshaler {
	return ec._ProductReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductReviewConnection(ctx context.Context, sel ast.SelectionSet, v *ProductReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductReviewConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNProductServiceAttribute2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttribute(ctx context.Context, sel ast.SelectionSet, v prisma.ProductServiceAttribute) graphql.Marshaler {
	return ec._ProductServiceAttribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductServiceAttribute2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.ProductServiceAttribute) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductServiceAttribute2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductServiceAttribute2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductServiceAttribute(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductServiceAttribute) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductServiceAttribute(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductServiceAttributeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInput(ctx context.Context, v interface{}) (ProductServiceAttributeInput, error) {
	return ec.unmarshalInputProductServiceAttributeInput(ctx, v)
}

func (ec *executionContext) unmarshalNProductServiceAttributeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInput(ctx context.Context, v interface{}) (*ProductServiceAttributeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNProductServiceAttributeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNProductSubCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ProductSubCategory) graphql.Marshaler {
	return ec._ProductSubCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNProductSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx context.Context, sel ast.SelectionSet, v []*prisma.ProductSubCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.ProductSubCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductSubCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProductSubCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNPublicStaffMemberConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPublicStaffMemberConnection(ctx context.Context, sel ast.SelectionSet, v PublicStaffMemberConnection) graphql.Marshaler {
	return ec._PublicStaffMemberConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPublicStaffMemberConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPublicStaffMemberConnection(ctx context.Context, sel ast.SelectionSet, v *PublicStaffMemberConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PublicStaffMemberConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNRawOpeningHour2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawOpeningHour(ctx context.Context, sel ast.SelectionSet, v RawOpeningHour) graphql.Marshaler {
	return ec._RawOpeningHour(ctx, sel, &v)
}

func (ec *executionContext) marshalNRawOpeningHour2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawOpeningHourᚄ(ctx context.Context, sel ast.SelectionSet, v []*RawOpeningHour) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRawOpeningHour2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawOpeningHour(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRawOpeningHour2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawOpeningHour(ctx context.Context, sel ast.SelectionSet, v *RawOpeningHour) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RawOpeningHour(ctx, sel, v)
}

func (ec *executionContext) marshalNRawWorkingHours2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawWorkingHours(ctx context.Context, sel ast.SelectionSet, v RawWorkingHours) graphql.Marshaler {
	return ec._RawWorkingHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNRawWorkingHours2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawWorkingHoursᚄ(ctx context.Context, sel ast.SelectionSet, v []*RawWorkingHours) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRawWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawWorkingHours(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRawWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRawWorkingHours(ctx context.Context, sel ast.SelectionSet, v *RawWorkingHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RawWorkingHours(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRegisterInput(ctx context.Context, v interface{}) (RegisterInput, error) {
	return ec.unmarshalInputRegisterInput(ctx, v)
}

func (ec *executionContext) marshalNRegisterPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRegisterPayload(ctx context.Context, sel ast.SelectionSet, v RegisterPayload) graphql.Marshaler {
	return ec._RegisterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRegisterPayload(ctx context.Context, sel ast.SelectionSet, v *RegisterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegisterPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRelatedCompanies2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRelatedCompanies(ctx context.Context, sel ast.SelectionSet, v RelatedCompanies) graphql.Marshaler {
	return ec._RelatedCompanies(ctx, sel, &v)
}

func (ec *executionContext) marshalNRelatedCompanies2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRelatedCompanies(ctx context.Context, sel ast.SelectionSet, v *RelatedCompanies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RelatedCompanies(ctx, sel, v)
}

func (ec *executionContext) marshalNRemoveViewerProfilePicturePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRemoveViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, v RemoveViewerProfilePicturePayload) graphql.Marshaler {
	return ec._RemoveViewerProfilePicturePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRemoveViewerProfilePicturePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRemoveViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, v *RemoveViewerProfilePicturePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RemoveViewerProfilePicturePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReplaceExistingProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingProductInput(ctx context.Context, v interface{}) (ReplaceExistingProductInput, error) {
	return ec.unmarshalInputReplaceExistingProductInput(ctx, v)
}

func (ec *executionContext) marshalNReplaceExistingProductsPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingProductsPayload(ctx context.Context, sel ast.SelectionSet, v ReplaceExistingProductsPayload) graphql.Marshaler {
	return ec._ReplaceExistingProductsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNReplaceExistingProductsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingProductsPayload(ctx context.Context, sel ast.SelectionSet, v *ReplaceExistingProductsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReplaceExistingProductsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReplaceExistingServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingServiceInput(ctx context.Context, v interface{}) (ReplaceExistingServiceInput, error) {
	return ec.unmarshalInputReplaceExistingServiceInput(ctx, v)
}

func (ec *executionContext) marshalNReplaceExistingServicePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingServicePayload(ctx context.Context, sel ast.SelectionSet, v ReplaceExistingServicePayload) graphql.Marshaler {
	return ec._ReplaceExistingServicePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNReplaceExistingServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReplaceExistingServicePayload(ctx context.Context, sel ast.SelectionSet, v *ReplaceExistingServicePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReplaceExistingServicePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestActivationLinkInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestActivationLinkInput(ctx context.Context, v interface{}) (RequestActivationLinkInput, error) {
	return ec.unmarshalInputRequestActivationLinkInput(ctx, v)
}

func (ec *executionContext) marshalNRequestActivationLinkPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestActivationLinkPayload(ctx context.Context, sel ast.SelectionSet, v RequestActivationLinkPayload) graphql.Marshaler {
	return ec._RequestActivationLinkPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestActivationLinkPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestActivationLinkPayload(ctx context.Context, sel ast.SelectionSet, v *RequestActivationLinkPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestActivationLinkPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestPasswordResetInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestPasswordResetInput(ctx context.Context, v interface{}) (RequestPasswordResetInput, error) {
	return ec.unmarshalInputRequestPasswordResetInput(ctx, v)
}

func (ec *executionContext) marshalNRequestPasswordResetPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestPasswordResetPayload(ctx context.Context, sel ast.SelectionSet, v RequestPasswordResetPayload) graphql.Marshaler {
	return ec._RequestPasswordResetPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestPasswordResetPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRequestPasswordResetPayload(ctx context.Context, sel ast.SelectionSet, v *RequestPasswordResetPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestPasswordResetPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRescheduleAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRescheduleAppointmentInput(ctx context.Context, v interface{}) (RescheduleAppointmentInput, error) {
	return ec.unmarshalInputRescheduleAppointmentInput(ctx, v)
}

func (ec *executionContext) marshalNRescheduleAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRescheduleAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v RescheduleAppointmentPayload) graphql.Marshaler {
	return ec._RescheduleAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRescheduleAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐRescheduleAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *RescheduleAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RescheduleAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResetPasswordInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐResetPasswordInput(ctx context.Context, v interface{}) (ResetPasswordInput, error) {
	return ec.unmarshalInputResetPasswordInput(ctx, v)
}

func (ec *executionContext) marshalNResetPasswordPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐResetPasswordPayload(ctx context.Context, sel ast.SelectionSet, v ResetPasswordPayload) graphql.Marshaler {
	return ec._ResetPasswordPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNResetPasswordPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐResetPasswordPayload(ctx context.Context, sel ast.SelectionSet, v *ResetPasswordPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResetPasswordPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v ReviewConnection) graphql.Marshaler {
	return ec._ReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewConnection(ctx context.Context, sel ast.SelectionSet, v *ReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReviewConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReviewInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewInput(ctx context.Context, v interface{}) (ReviewInput, error) {
	return ec.unmarshalInputReviewInput(ctx, v)
}

func (ec *executionContext) unmarshalNReviewOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByFields(ctx context.Context, v interface{}) (ReviewOrderByFields, error) {
	var res ReviewOrderByFields
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNReviewOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByFields(ctx context.Context, sel ast.SelectionSet, v ReviewOrderByFields) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, v interface{}) (prisma.ReviewStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.ReviewStatus(tmp), err
}

func (ec *executionContext) marshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, sel ast.SelectionSet, v prisma.ReviewStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx context.Context, v interface{}) (prisma.ReviewType, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.ReviewType(tmp), err
}

func (ec *executionContext) marshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx context.Context, sel ast.SelectionSet, v prisma.ReviewType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSendEmailPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendEmailPayload(ctx context.Context, sel ast.SelectionSet, v SendEmailPayload) graphql.Marshaler {
	return ec._SendEmailPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSendEmailPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendEmailPayload(ctx context.Context, sel ast.SelectionSet, v *SendEmailPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SendEmailPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSendInviteEmailInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendInviteEmailInput(ctx context.Context, v interface{}) (SendInviteEmailInput, error) {
	return ec.unmarshalInputSendInviteEmailInput(ctx, v)
}

func (ec *executionContext) marshalNService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx context.Context, sel ast.SelectionSet, v prisma.Service) graphql.Marshaler {
	return ec._Service(ctx, sel, &v)
}

func (ec *executionContext) marshalNService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Service) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx context.Context, sel ast.SelectionSet, v *prisma.Service) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Service(ctx, sel, v)
}

func (ec *executionContext) marshalNServiceCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceCategory) graphql.Marshaler {
	return ec._ServiceCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx context.Context, sel ast.SelectionSet, v []*prisma.ServiceCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServiceCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNServiceConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceConnection(ctx context.Context, sel ast.SelectionSet, v ServiceConnection) graphql.Marshaler {
	return ec._ServiceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceConnection(ctx context.Context, sel ast.SelectionSet, v *ServiceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServiceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceInput(ctx context.Context, v interface{}) (ServiceInput, error) {
	return ec.unmarshalInputServiceInput(ctx, v)
}

func (ec *executionContext) unmarshalNServiceOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByFields(ctx context.Context, v interface{}) (ServiceOrderByFields, error) {
	var res ServiceOrderByFields
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNServiceOrderByFields2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByFields(ctx context.Context, sel ast.SelectionSet, v ServiceOrderByFields) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNServiceReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceReview) graphql.Marshaler {
	return ec._ServiceReview(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceReview2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.ServiceReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNServiceReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNServiceReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServiceReview(ctx, sel, v)
}

func (ec *executionContext) marshalNServiceReviewConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceReviewConnection(ctx context.Context, sel ast.SelectionSet, v ServiceReviewConnection) graphql.Marshaler {
	return ec._ServiceReviewConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceReviewConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceReviewConnection(ctx context.Context, sel ast.SelectionSet, v *ServiceReviewConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServiceReviewConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNServiceSubCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceSubCategory) graphql.Marshaler {
	return ec._ServiceSubCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx context.Context, sel ast.SelectionSet, v []*prisma.ServiceSubCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNServiceSubCategory2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.ServiceSubCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceSubCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServiceSubCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNSession2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx context.Context, sel ast.SelectionSet, v prisma.Session) graphql.Marshaler {
	return ec._Session(ctx, sel, &v)
}

func (ec *executionContext) marshalNSession2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx context.Context, sel ast.SelectionSet, v *prisma.Session) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSetProductActiveInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetProductActiveInput(ctx context.Context, v interface{}) (SetProductActiveInput, error) {
	return ec.unmarshalInputSetProductActiveInput(ctx, v)
}

func (ec *executionContext) marshalNSetProductActivePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetProductActivePayload(ctx context.Context, sel ast.SelectionSet, v SetProductActivePayload) graphql.Marshaler {
	return ec._SetProductActivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSetProductActivePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetProductActivePayload(ctx context.Context, sel ast.SelectionSet, v *SetProductActivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SetProductActivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSetServiceActiveInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetServiceActiveInput(ctx context.Context, v interface{}) (SetServiceActiveInput, error) {
	return ec.unmarshalInputSetServiceActiveInput(ctx, v)
}

func (ec *executionContext) marshalNSetServiceActivePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetServiceActivePayload(ctx context.Context, sel ast.SelectionSet, v SetServiceActivePayload) graphql.Marshaler {
	return ec._SetServiceActivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSetServiceActivePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSetServiceActivePayload(ctx context.Context, sel ast.SelectionSet, v *SetServiceActivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SetServiceActivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffApproveAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentInput(ctx context.Context, v interface{}) (StaffApproveAppointmentInput, error) {
	return ec.unmarshalInputStaffApproveAppointmentInput(ctx, v)
}

func (ec *executionContext) marshalNStaffApproveAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v StaffApproveAppointmentPayload) graphql.Marshaler {
	return ec._StaffApproveAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffApproveAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *StaffApproveAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaffApproveAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffCreateAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffCreateAppointmentInput(ctx context.Context, v interface{}) (StaffCreateAppointmentInput, error) {
	return ec.unmarshalInputStaffCreateAppointmentInput(ctx, v)
}

func (ec *executionContext) marshalNStaffCreateAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffCreateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v StaffCreateAppointmentPayload) graphql.Marshaler {
	return ec._StaffCreateAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffCreateAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffCreateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *StaffCreateAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaffCreateAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNStaffMemberConnection2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberConnection(ctx context.Context, sel ast.SelectionSet, v StaffMemberConnection) graphql.Marshaler {
	return ec._StaffMemberConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffMemberConnection2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberConnection(ctx context.Context, sel ast.SelectionSet, v *StaffMemberConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaffMemberConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffMemberInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffMemberInput(ctx context.Context, v interface{}) (StaffMemberInput, error) {
	return ec.unmarshalInputStaffMemberInput(ctx, v)
}

func (ec *executionContext) unmarshalNStaffUpdateAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentInput(ctx context.Context, v interface{}) (StaffUpdateAppointmentInput, error) {
	return ec.unmarshalInputStaffUpdateAppointmentInput(ctx, v)
}

func (ec *executionContext) unmarshalNStaffUpdateAppointmentPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPatch(ctx context.Context, v interface{}) (StaffUpdateAppointmentPatch, error) {
	return ec.unmarshalInputStaffUpdateAppointmentPatch(ctx, v)
}

func (ec *executionContext) unmarshalNStaffUpdateAppointmentPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPatch(ctx context.Context, v interface{}) (*StaffUpdateAppointmentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNStaffUpdateAppointmentPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNStaffUpdateAppointmentPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v StaffUpdateAppointmentPayload) graphql.Marshaler {
	return ec._StaffUpdateAppointmentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffUpdateAppointmentPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffUpdateAppointmentPayload(ctx context.Context, sel ast.SelectionSet, v *StaffUpdateAppointmentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StaffUpdateAppointmentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNSubscribeNewsletterPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSubscribeNewsletterPayload(ctx context.Context, sel ast.SelectionSet, v SubscribeNewsletterPayload) graphql.Marshaler {
	return ec._SubscribeNewsletterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubscribeNewsletterPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSubscribeNewsletterPayload(ctx context.Context, sel ast.SelectionSet, v *SubscribeNewsletterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SubscribeNewsletterPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimeslotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotInput(ctx context.Context, v interface{}) (TimeslotInput, error) {
	return ec.unmarshalInputTimeslotInput(ctx, v)
}

func (ec *executionContext) marshalNTimeslotRange2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotRange(ctx context.Context, sel ast.SelectionSet, v TimeslotRange) graphql.Marshaler {
	return ec._TimeslotRange(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimeslotRange2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotRangeᚄ(ctx context.Context, sel ast.SelectionSet, v []*TimeslotRange) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimeslotRange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotRange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTimeslotRange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslotRange(ctx context.Context, sel ast.SelectionSet, v *TimeslotRange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TimeslotRange(ctx, sel, v)
}

func (ec *executionContext) marshalNTimeslots2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslots(ctx context.Context, sel ast.SelectionSet, v Timeslots) graphql.Marshaler {
	return ec._Timeslots(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimeslots2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimeslots(ctx context.Context, sel ast.SelectionSet, v *Timeslots) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Timeslots(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateAdministratorInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAdministratorInput(ctx context.Context, v interface{}) (UpdateAdministratorInput, error) {
	return ec.unmarshalInputUpdateAdministratorInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateAdministratorPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v UpdateAdministratorPayload) graphql.Marshaler {
	return ec._UpdateAdministratorPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateAdministratorPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAdministratorPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateAdministratorPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateAdministratorPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateAppointmentImageInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImageInput(ctx context.Context, v interface{}) (UpdateAppointmentImageInput, error) {
	return ec.unmarshalInputUpdateAppointmentImageInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateAppointmentImagePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImagePayload(ctx context.Context, sel ast.SelectionSet, v UpdateAppointmentImagePayload) graphql.Marshaler {
	return ec._UpdateAppointmentImagePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateAppointmentImagePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateAppointmentImagePayload(ctx context.Context, sel ast.SelectionSet, v *UpdateAppointmentImagePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateAppointmentImagePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateBranchInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchInput(ctx context.Context, v interface{}) (UpdateBranchInput, error) {
	return ec.unmarshalInputUpdateBranchInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateBranchPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPatch(ctx context.Context, v interface{}) (UpdateBranchPatch, error) {
	return ec.unmarshalInputUpdateBranchPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateBranchPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPatch(ctx context.Context, v interface{}) (*UpdateBranchPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateBranchPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateBranchPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPayload(ctx context.Context, sel ast.SelectionSet, v UpdateBranchPayload) graphql.Marshaler {
	return ec._UpdateBranchPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateBranchPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateBranchPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateBranchPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateBranchPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateCompanyData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyData(ctx context.Context, v interface{}) (UpdateCompanyData, error) {
	return ec.unmarshalInputUpdateCompanyData(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateCompanyData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyData(ctx context.Context, v interface{}) (*UpdateCompanyData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateCompanyData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateCompanyInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyInput(ctx context.Context, v interface{}) (UpdateCompanyInput, error) {
	return ec.unmarshalInputUpdateCompanyInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateCompanyPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyPayload(ctx context.Context, sel ast.SelectionSet, v UpdateCompanyPayload) graphql.Marshaler {
	return ec._UpdateCompanyPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateCompanyPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCompanyPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateCompanyPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateCompanyPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateCustomerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerInput(ctx context.Context, v interface{}) (UpdateCustomerInput, error) {
	return ec.unmarshalInputUpdateCustomerInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateCustomerPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPatch(ctx context.Context, v interface{}) (UpdateCustomerPatch, error) {
	return ec.unmarshalInputUpdateCustomerPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateCustomerPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPatch(ctx context.Context, v interface{}) (*UpdateCustomerPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateCustomerPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateCustomerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPayload(ctx context.Context, sel ast.SelectionSet, v UpdateCustomerPayload) graphql.Marshaler {
	return ec._UpdateCustomerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateCustomerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateCustomerPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateCustomerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateCustomerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateEmailTemplateInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplateInput(ctx context.Context, v interface{}) (UpdateEmailTemplateInput, error) {
	return ec.unmarshalInputUpdateEmailTemplateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEmailTemplatePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePatch(ctx context.Context, v interface{}) (UpdateEmailTemplatePatch, error) {
	return ec.unmarshalInputUpdateEmailTemplatePatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEmailTemplatePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePatch(ctx context.Context, v interface{}) (*UpdateEmailTemplatePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateEmailTemplatePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateEmailTemplatePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePayload(ctx context.Context, sel ast.SelectionSet, v UpdateEmailTemplatePayload) graphql.Marshaler {
	return ec._UpdateEmailTemplatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateEmailTemplatePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmailTemplatePayload(ctx context.Context, sel ast.SelectionSet, v *UpdateEmailTemplatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateEmailTemplatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateEmployeeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeeInput(ctx context.Context, v interface{}) (UpdateEmployeeInput, error) {
	return ec.unmarshalInputUpdateEmployeeInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEmployeePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePatch(ctx context.Context, v interface{}) (UpdateEmployeePatch, error) {
	return ec.unmarshalInputUpdateEmployeePatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEmployeePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePatch(ctx context.Context, v interface{}) (*UpdateEmployeePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateEmployeePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateEmployeePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePayload(ctx context.Context, sel ast.SelectionSet, v UpdateEmployeePayload) graphql.Marshaler {
	return ec._UpdateEmployeePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateEmployeePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateEmployeePayload(ctx context.Context, sel ast.SelectionSet, v *UpdateEmployeePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateEmployeePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateManagerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerInput(ctx context.Context, v interface{}) (UpdateManagerInput, error) {
	return ec.unmarshalInputUpdateManagerInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateManagerPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPatch(ctx context.Context, v interface{}) (UpdateManagerPatch, error) {
	return ec.unmarshalInputUpdateManagerPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateManagerPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPatch(ctx context.Context, v interface{}) (*UpdateManagerPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateManagerPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateManagerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPayload(ctx context.Context, sel ast.SelectionSet, v UpdateManagerPayload) graphql.Marshaler {
	return ec._UpdateManagerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateManagerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateManagerPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateManagerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateManagerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateNewsInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsInput(ctx context.Context, v interface{}) (UpdateNewsInput, error) {
	return ec.unmarshalInputUpdateNewsInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateNewsPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPatch(ctx context.Context, v interface{}) (UpdateNewsPatch, error) {
	return ec.unmarshalInputUpdateNewsPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateNewsPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPatch(ctx context.Context, v interface{}) (*UpdateNewsPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateNewsPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateNewsPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPayload(ctx context.Context, sel ast.SelectionSet, v UpdateNewsPayload) graphql.Marshaler {
	return ec._UpdateNewsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateNewsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNewsPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateNewsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateNewsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateNotificationTokenInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateNotificationTokenInput(ctx context.Context, v interface{}) (UpdateNotificationTokenInput, error) {
	return ec.unmarshalInputUpdateNotificationTokenInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProductCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryData(ctx context.Context, v interface{}) (UpdateProductCategoryData, error) {
	return ec.unmarshalInputUpdateProductCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProductCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryData(ctx context.Context, v interface{}) (*UpdateProductCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateProductCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateProductCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryInput(ctx context.Context, v interface{}) (UpdateProductCategoryInput, error) {
	return ec.unmarshalInputUpdateProductCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateProductCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v UpdateProductCategoryPayload) graphql.Marshaler {
	return ec._UpdateProductCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProductCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateProductCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProductCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProductInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductInput(ctx context.Context, v interface{}) (UpdateProductInput, error) {
	return ec.unmarshalInputUpdateProductInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProductPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPatch(ctx context.Context, v interface{}) (UpdateProductPatch, error) {
	return ec.unmarshalInputUpdateProductPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProductPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPatch(ctx context.Context, v interface{}) (*UpdateProductPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateProductPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateProductPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPayload(ctx context.Context, sel ast.SelectionSet, v UpdateProductPayload) graphql.Marshaler {
	return ec._UpdateProductPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProductPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateProductPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProductPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProductSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryData(ctx context.Context, v interface{}) (UpdateProductSubCategoryData, error) {
	return ec.unmarshalInputUpdateProductSubCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateProductSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryData(ctx context.Context, v interface{}) (*UpdateProductSubCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateProductSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateProductSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryInput(ctx context.Context, v interface{}) (UpdateProductSubCategoryInput, error) {
	return ec.unmarshalInputUpdateProductSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateProductSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v UpdateProductSubCategoryPayload) graphql.Marshaler {
	return ec._UpdateProductSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateProductSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateProductSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateProductSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateProductSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateReviewPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateReviewPatch(ctx context.Context, v interface{}) (UpdateReviewPatch, error) {
	return ec.unmarshalInputUpdateReviewPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateReviewPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateReviewPatch(ctx context.Context, v interface{}) (*UpdateReviewPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateReviewPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateReviewPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateServiceCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryData(ctx context.Context, v interface{}) (UpdateServiceCategoryData, error) {
	return ec.unmarshalInputUpdateServiceCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateServiceCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryData(ctx context.Context, v interface{}) (*UpdateServiceCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateServiceCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateServiceCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryInput(ctx context.Context, v interface{}) (UpdateServiceCategoryInput, error) {
	return ec.unmarshalInputUpdateServiceCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateServiceCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v UpdateServiceCategoryPayload) graphql.Marshaler {
	return ec._UpdateServiceCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateServiceCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateServiceCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateServiceCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateServiceInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceInput(ctx context.Context, v interface{}) (UpdateServiceInput, error) {
	return ec.unmarshalInputUpdateServiceInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateServicePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePatch(ctx context.Context, v interface{}) (UpdateServicePatch, error) {
	return ec.unmarshalInputUpdateServicePatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateServicePatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePatch(ctx context.Context, v interface{}) (*UpdateServicePatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateServicePatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpdateServicePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePayload(ctx context.Context, sel ast.SelectionSet, v UpdateServicePayload) graphql.Marshaler {
	return ec._UpdateServicePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateServicePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServicePayload(ctx context.Context, sel ast.SelectionSet, v *UpdateServicePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateServicePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateServiceSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryData(ctx context.Context, v interface{}) (UpdateServiceSubCategoryData, error) {
	return ec.unmarshalInputUpdateServiceSubCategoryData(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateServiceSubCategoryData2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryData(ctx context.Context, v interface{}) (*UpdateServiceSubCategoryData, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateServiceSubCategoryData2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryData(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateServiceSubCategoryInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryInput(ctx context.Context, v interface{}) (UpdateServiceSubCategoryInput, error) {
	return ec.unmarshalInputUpdateServiceSubCategoryInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateServiceSubCategoryPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v UpdateServiceSubCategoryPayload) graphql.Marshaler {
	return ec._UpdateServiceSubCategoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateServiceSubCategoryPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateServiceSubCategoryPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateServiceSubCategoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateServiceSubCategoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateUserPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx context.Context, v interface{}) (UpdateUserPatch, error) {
	return ec.unmarshalInputUpdateUserPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx context.Context, v interface{}) (*UpdateUserPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpdateUserPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateUserPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUpdateViewerInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerInput(ctx context.Context, v interface{}) (UpdateViewerInput, error) {
	return ec.unmarshalInputUpdateViewerInput(ctx, v)
}

func (ec *executionContext) marshalNUpdateViewerPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerPayload(ctx context.Context, sel ast.SelectionSet, v UpdateViewerPayload) graphql.Marshaler {
	return ec._UpdateViewerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateViewerPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpdateViewerPayload(ctx context.Context, sel ast.SelectionSet, v *UpdateViewerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateViewerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	return graphql.UnmarshalUpload(v)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUploadViewerProfilePicturePayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUploadViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, v UploadViewerProfilePicturePayload) graphql.Marshaler {
	return ec._UploadViewerProfilePicturePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUploadViewerProfilePicturePayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUploadViewerProfilePicturePayload(ctx context.Context, sel ast.SelectionSet, v *UploadViewerProfilePicturePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UploadViewerProfilePicturePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpsertBranchOpeningHourInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourInput(ctx context.Context, v interface{}) (UpsertBranchOpeningHourInput, error) {
	return ec.unmarshalInputUpsertBranchOpeningHourInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpsertBranchOpeningHourPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPatch(ctx context.Context, v interface{}) (UpsertBranchOpeningHourPatch, error) {
	return ec.unmarshalInputUpsertBranchOpeningHourPatch(ctx, v)
}

func (ec *executionContext) unmarshalNUpsertBranchOpeningHourPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPatch(ctx context.Context, v interface{}) (*UpsertBranchOpeningHourPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUpsertBranchOpeningHourPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUpsertBranchOpeningHourPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPayload(ctx context.Context, sel ast.SelectionSet, v UpsertBranchOpeningHourPayload) graphql.Marshaler {
	return ec._UpsertBranchOpeningHourPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpsertBranchOpeningHourPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertBranchOpeningHourPayload(ctx context.Context, sel ast.SelectionSet, v *UpsertBranchOpeningHourPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpsertBranchOpeningHourPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpsertReviewInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertReviewInput(ctx context.Context, v interface{}) (UpsertReviewInput, error) {
	return ec.unmarshalInputUpsertReviewInput(ctx, v)
}

func (ec *executionContext) marshalNUpsertReviewPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertReviewPayload(ctx context.Context, sel ast.SelectionSet, v UpsertReviewPayload) graphql.Marshaler {
	return ec._UpsertReviewPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpsertReviewPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐUpsertReviewPayload(ctx context.Context, sel ast.SelectionSet, v *UpsertReviewPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpsertReviewPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx context.Context, v interface{}) (prisma.UserType, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.UserType(tmp), err
}

func (ec *executionContext) marshalNUserType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐUserType(ctx context.Context, sel ast.SelectionSet, v prisma.UserType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNWorkingHours2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHours(ctx context.Context, sel ast.SelectionSet, v WorkingHours) graphql.Marshaler {
	return ec._WorkingHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorkingHours2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHours(ctx context.Context, sel ast.SelectionSet, v *WorkingHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WorkingHours(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWorkingHoursInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInput(ctx context.Context, v interface{}) (WorkingHoursInput, error) {
	return ec.unmarshalInputWorkingHoursInput(ctx, v)
}

func (ec *executionContext) unmarshalNWorkingHoursInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInput(ctx context.Context, v interface{}) (*WorkingHoursInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNWorkingHoursInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx context.Context, v interface{}) (AppointmentInput, error) {
	return ec.unmarshalInputAppointmentInput(ctx, v)
}

func (ec *executionContext) unmarshalOAppointmentInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx context.Context, v interface{}) (*AppointmentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAppointmentInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAppointmentOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByInput(ctx context.Context, v interface{}) (AppointmentOrderByInput, error) {
	return ec.unmarshalInputAppointmentOrderByInput(ctx, v)
}

func (ec *executionContext) unmarshalOAppointmentOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByInput(ctx context.Context, v interface{}) (*AppointmentOrderByInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAppointmentOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐAppointmentOrderByInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAppointmentReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx context.Context, sel ast.SelectionSet, v prisma.AppointmentReview) graphql.Marshaler {
	return ec._AppointmentReview(ctx, sel, &v)
}

func (ec *executionContext) marshalOAppointmentReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentReview(ctx context.Context, sel ast.SelectionSet, v *prisma.AppointmentReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppointmentReview(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAppointmentStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatusᚄ(ctx context.Context, v interface{}) ([]prisma.AppointmentStatus, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]prisma.AppointmentStatus, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAppointmentStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAppointmentStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.AppointmentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppointmentStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐAppointmentStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOBranchImageSlot2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlot(ctx context.Context, sel ast.SelectionSet, v BranchImageSlot) graphql.Marshaler {
	return ec._BranchImageSlot(ctx, sel, &v)
}

func (ec *executionContext) marshalOBranchImageSlot2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlot(ctx context.Context, sel ast.SelectionSet, v []*BranchImageSlot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBranchImageSlot2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlot(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBranchImageSlot2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlot(ctx context.Context, sel ast.SelectionSet, v *BranchImageSlot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BranchImageSlot(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBranchImageSlotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx context.Context, v interface{}) (BranchImageSlotInput, error) {
	return ec.unmarshalInputBranchImageSlotInput(ctx, v)
}

func (ec *executionContext) unmarshalOBranchImageSlotInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx context.Context, v interface{}) ([]*BranchImageSlotInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*BranchImageSlotInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOBranchImageSlotInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBranchImageSlotInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx context.Context, v interface{}) (*BranchImageSlotInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBranchImageSlotInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐBranchImageSlotInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCompany2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx context.Context, sel ast.SelectionSet, v prisma.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompany2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐCompany(ctx context.Context, sel ast.SelectionSet, v *prisma.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConnectAppointmentProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx context.Context, v interface{}) (ConnectAppointmentProduct, error) {
	return ec.unmarshalInputConnectAppointmentProduct(ctx, v)
}

func (ec *executionContext) unmarshalOConnectAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx context.Context, v interface{}) ([]*ConnectAppointmentProduct, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ConnectAppointmentProduct, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOConnectAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConnectAppointmentProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProductᚄ(ctx context.Context, v interface{}) ([]*ConnectAppointmentProduct, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ConnectAppointmentProduct, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNConnectAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConnectAppointmentProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx context.Context, v interface{}) (*ConnectAppointmentProduct, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectAppointmentProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentProduct(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOConnectAppointmentService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx context.Context, v interface{}) (ConnectAppointmentService, error) {
	return ec.unmarshalInputConnectAppointmentService(ctx, v)
}

func (ec *executionContext) unmarshalOConnectAppointmentService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx context.Context, v interface{}) ([]*ConnectAppointmentService, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ConnectAppointmentService, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOConnectAppointmentService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConnectAppointmentService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx context.Context, v interface{}) (*ConnectAppointmentService, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectAppointmentService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐConnectAppointmentService(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCursor2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOCursor2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOCursor2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCursor2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCursor2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOCursor2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOCustomerOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByInput(ctx context.Context, v interface{}) (CustomerOrderByInput, error) {
	return ec.unmarshalInputCustomerOrderByInput(ctx, v)
}

func (ec *executionContext) unmarshalOCustomerOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByInput(ctx context.Context, v interface{}) (*CustomerOrderByInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCustomerOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐCustomerOrderByInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalODateFilter2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDateFilter(ctx context.Context, v interface{}) (DateFilter, error) {
	return ec.unmarshalInputDateFilter(ctx, v)
}

func (ec *executionContext) unmarshalODateFilter2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDateFilter(ctx context.Context, v interface{}) (*DateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalODateFilter2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐDateFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOForceAppointmentNotificationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐForceAppointmentNotificationInput(ctx context.Context, v interface{}) (ForceAppointmentNotificationInput, error) {
	return ec.unmarshalInputForceAppointmentNotificationInput(ctx, v)
}

func (ec *executionContext) unmarshalOForceAppointmentNotificationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐForceAppointmentNotificationInput(ctx context.Context, v interface{}) (*ForceAppointmentNotificationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOForceAppointmentNotificationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐForceAppointmentNotificationInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, v interface{}) (prisma.Gender, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.Gender(tmp), err
}

func (ec *executionContext) marshalOGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, sel ast.SelectionSet, v prisma.Gender) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, v interface{}) (*prisma.Gender, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOGender2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx context.Context, sel ast.SelectionSet, v *prisma.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOGender2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGender(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, v interface{}) (prisma.GenderTarget, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.GenderTarget(tmp), err
}

func (ec *executionContext) marshalOGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, sel ast.SelectionSet, v prisma.GenderTarget) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalOGenderTarget2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, v interface{}) (*prisma.GenderTarget, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOGenderTarget2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx context.Context, sel ast.SelectionSet, v *prisma.GenderTarget) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOGenderTarget2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐGenderTarget(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOImage2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx context.Context, sel ast.SelectionSet, v Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalONotificationsPayload2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationsPayload(ctx context.Context, sel ast.SelectionSet, v NotificationsPayload) graphql.Marshaler {
	return ec._NotificationsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalONotificationsPayload2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐNotificationsPayload(ctx context.Context, sel ast.SelectionSet, v *NotificationsPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NotificationsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaginationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPaginationInput(ctx context.Context, v interface{}) (PaginationInput, error) {
	return ec.unmarshalInputPaginationInput(ctx, v)
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPaginationInput(ctx context.Context, v interface{}) (*PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPaginationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPaginationInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPhoneNumber2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v PhoneNumber) graphql.Marshaler {
	return ec._PhoneNumber(ctx, sel, &v)
}

func (ec *executionContext) marshalOPhoneNumber2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v *PhoneNumber) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PhoneNumber(ctx, sel, v)
}

func (ec *executionContext) marshalOProduct2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx context.Context, sel ast.SelectionSet, v prisma.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalOProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx context.Context, sel ast.SelectionSet, v []*prisma.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProduct2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProduct2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProduct(ctx context.Context, sel ast.SelectionSet, v *prisma.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalOProductCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ProductCategory) graphql.Marshaler {
	return ec._ProductCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalOProductCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByInput(ctx context.Context, v interface{}) (ProductOrderByInput, error) {
	return ec.unmarshalInputProductOrderByInput(ctx, v)
}

func (ec *executionContext) unmarshalOProductOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByInput(ctx context.Context, v interface{}) (*ProductOrderByInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOProductOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductOrderByInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOProductReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx context.Context, sel ast.SelectionSet, v prisma.ProductReview) graphql.Marshaler {
	return ec._ProductReview(ctx, sel, &v)
}

func (ec *executionContext) marshalOProductReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductReview(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductReview(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProductServiceAttributeInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInputᚄ(ctx context.Context, v interface{}) ([]*ProductServiceAttributeInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ProductServiceAttributeInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNProductServiceAttributeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐProductServiceAttributeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProductSubCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ProductSubCategory) graphql.Marshaler {
	return ec._ProductSubCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalOProductSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐProductSubCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ProductSubCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductSubCategory(ctx, sel, v)
}

func (ec *executionContext) marshalOReviewAggregations2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewAggregations(ctx context.Context, sel ast.SelectionSet, v ReviewAggregations) graphql.Marshaler {
	return ec._ReviewAggregations(ctx, sel, &v)
}

func (ec *executionContext) marshalOReviewAggregations2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewAggregations(ctx context.Context, sel ast.SelectionSet, v *ReviewAggregations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReviewAggregations(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReviewOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByInput(ctx context.Context, v interface{}) (ReviewOrderByInput, error) {
	return ec.unmarshalInputReviewOrderByInput(ctx, v)
}

func (ec *executionContext) unmarshalOReviewOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByInput(ctx context.Context, v interface{}) (*ReviewOrderByInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOReviewOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐReviewOrderByInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, v interface{}) (prisma.ReviewStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	return prisma.ReviewStatus(tmp), err
}

func (ec *executionContext) marshalOReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, sel ast.SelectionSet, v prisma.ReviewStatus) graphql.Marshaler {
	return graphql.MarshalString(string(v))
}

func (ec *executionContext) unmarshalOReviewStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatusᚄ(ctx context.Context, v interface{}) ([]prisma.ReviewStatus, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]prisma.ReviewStatus, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReviewStatus2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.ReviewStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOReviewStatus2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, v interface{}) (*prisma.ReviewStatus, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOReviewStatus2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx context.Context, sel ast.SelectionSet, v *prisma.ReviewStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOReviewStatus2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewStatus(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOReviewType2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewTypeᚄ(ctx context.Context, v interface{}) ([]prisma.ReviewType, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]prisma.ReviewType, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOReviewType2ᚕgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []prisma.ReviewType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewType2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐReviewType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSendUserNotificationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendUserNotificationInput(ctx context.Context, v interface{}) (SendUserNotificationInput, error) {
	return ec.unmarshalInputSendUserNotificationInput(ctx, v)
}

func (ec *executionContext) unmarshalOSendUserNotificationInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendUserNotificationInput(ctx context.Context, v interface{}) (*SendUserNotificationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSendUserNotificationInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐSendUserNotificationInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOService2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx context.Context, sel ast.SelectionSet, v prisma.Service) graphql.Marshaler {
	return ec._Service(ctx, sel, &v)
}

func (ec *executionContext) marshalOService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx context.Context, sel ast.SelectionSet, v []*prisma.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOService2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []*prisma.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOService2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐService(ctx context.Context, sel ast.SelectionSet, v *prisma.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Service(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceCategory) graphql.Marshaler {
	return ec._ServiceCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalOServiceCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOServiceOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByInput(ctx context.Context, v interface{}) (ServiceOrderByInput, error) {
	return ec.unmarshalInputServiceOrderByInput(ctx, v)
}

func (ec *executionContext) unmarshalOServiceOrderByInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByInput(ctx context.Context, v interface{}) (*ServiceOrderByInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOServiceOrderByInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐServiceOrderByInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOServiceReview2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceReview) graphql.Marshaler {
	return ec._ServiceReview(ctx, sel, &v)
}

func (ec *executionContext) marshalOServiceReview2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceReview(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceReview(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceSubCategory2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx context.Context, sel ast.SelectionSet, v prisma.ServiceSubCategory) graphql.Marshaler {
	return ec._ServiceSubCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalOServiceSubCategory2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐServiceSubCategory(ctx context.Context, sel ast.SelectionSet, v *prisma.ServiceSubCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceSubCategory(ctx, sel, v)
}

func (ec *executionContext) marshalOSession2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx context.Context, sel ast.SelectionSet, v prisma.Session) graphql.Marshaler {
	return ec._Session(ctx, sel, &v)
}

func (ec *executionContext) marshalOSession2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋprismaᚐSession(ctx context.Context, sel ast.SelectionSet, v *prisma.Session) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStaffApproveAppointmentPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPatch(ctx context.Context, v interface{}) (StaffApproveAppointmentPatch, error) {
	return ec.unmarshalInputStaffApproveAppointmentPatch(ctx, v)
}

func (ec *executionContext) unmarshalOStaffApproveAppointmentPatch2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPatch(ctx context.Context, v interface{}) (*StaffApproveAppointmentPatch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStaffApproveAppointmentPatch2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐStaffApproveAppointmentPatch(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOTime2timeᚐTime(ctx, sel, *v)
}

func (ec *executionContext) marshalOTimerange2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx context.Context, sel ast.SelectionSet, v Timerange) graphql.Marshaler {
	return ec._Timerange(ctx, sel, &v)
}

func (ec *executionContext) marshalOTimerange2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerange(ctx context.Context, sel ast.SelectionSet, v *Timerange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Timerange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimerangeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx context.Context, v interface{}) (TimerangeInput, error) {
	return ec.unmarshalInputTimerangeInput(ctx, v)
}

func (ec *executionContext) unmarshalOTimerangeInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx context.Context, v interface{}) (*TimerangeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOTimerangeInput2githubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐTimerangeInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	return graphql.UnmarshalUpload(v)
}

func (ec *executionContext) marshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	return graphql.MarshalUpload(v)
}

func (ec *executionContext) unmarshalOUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) ([]*graphql.Upload, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*graphql.Upload, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUpload2ᚕᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v []*graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOWorkingHoursInput2ᚕᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInputᚄ(ctx context.Context, v interface{}) ([]*WorkingHoursInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*WorkingHoursInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNWorkingHoursInput2ᚖgithubᚗcomᚋsteebchenᚋkeskinᚑapiᚋgqlgenᚐWorkingHoursInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
